
bin\Debug\ATMega2560Template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800200  000037a4  00003858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000037a4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800332  00800332  0000398a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000398a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000680  00000000  00000000  0000398d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000cc8  00000000  00000000  0000400d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007ada  00000000  00000000  00004cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000252b  00000000  00000000  0000c7af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003cbd  00000000  00000000  0000ecda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a70  00000000  00000000  00012998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000150c  00000000  00000000  00013408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041ba  00000000  00000000  00014914  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00018ace  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      54:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      5c:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_23>
      60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      68:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      6c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      70:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      74:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      78:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      7c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      80:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      84:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      88:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      8c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      90:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      94:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      98:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      9c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      a0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      a4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      a8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      ac:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      b0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      b4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      b8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      bc:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      c0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      c4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      c8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      cc:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      d0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      d4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      d8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      dc:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      e0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>

000000e4 <__ctors_start>:
      e4:	cf 00       	.word	0x00cf	; ????
      e6:	c7 09       	sbc	r28, r7

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf ef       	ldi	r28, 0xFF	; 255
      ee:	d1 e2       	ldi	r29, 0x21	; 33
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61
      f4:	00 e0       	ldi	r16, 0x00	; 0
      f6:	0c bf       	out	0x3c, r16	; 60

000000f8 <__do_copy_data>:
      f8:	13 e0       	ldi	r17, 0x03	; 3
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b2 e0       	ldi	r27, 0x02	; 2
      fe:	e4 ea       	ldi	r30, 0xA4	; 164
     100:	f7 e3       	ldi	r31, 0x37	; 55
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a2 33       	cpi	r26, 0x32	; 50
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	13 e0       	ldi	r17, 0x03	; 3
     114:	a2 e3       	ldi	r26, 0x32	; 50
     116:	b3 e0       	ldi	r27, 0x03	; 3
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	ac 34       	cpi	r26, 0x4C	; 76
     11e:	b1 07       	cpc	r27, r17
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
     122:	10 e0       	ldi	r17, 0x00	; 0
     124:	c8 ee       	ldi	r28, 0xE8	; 232
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	04 c0       	rjmp	.+8      	; 0x132 <.do_global_ctors_start>

0000012a <.do_global_ctors_loop>:
     12a:	22 97       	sbiw	r28, 0x02	; 2
     12c:	fe 01       	movw	r30, r28
     12e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__tablejump__>

00000132 <.do_global_ctors_start>:
     132:	c4 3e       	cpi	r28, 0xE4	; 228
     134:	d1 07       	cpc	r29, r17
     136:	c9 f7       	brne	.-14     	; 0x12a <.do_global_ctors_loop>
     138:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
     13c:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <_exit>

00000140 <__bad_interrupt>:
     140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <__cxa_pure_virtual>:
#ifndef WPROGRAM_H_INCLUDED
#define WPROGRAM_H_INCLUDED

extern "C" void __cxa_pure_virtual(void); //for C++ defines

void __cxa_pure_virtual(void) {};
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62
     14c:	cf 91       	pop	r28
     14e:	df 91       	pop	r29
     150:	08 95       	ret

00000152 <_Z41__static_initialization_and_destruction_0ii>:

int main(){

    init(); //Don't forget this!

}
     152:	0f 93       	push	r16
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	00 d0       	rcall	.+0      	; 0x15a <_Z41__static_initialization_and_destruction_0ii+0x8>
     15a:	0f 92       	push	r0
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	9a 83       	std	Y+2, r25	; 0x02
     162:	89 83       	std	Y+1, r24	; 0x01
     164:	7c 83       	std	Y+4, r23	; 0x04
     166:	6b 83       	std	Y+3, r22	; 0x03
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	9a 81       	ldd	r25, Y+2	; 0x02
     16c:	81 30       	cpi	r24, 0x01	; 1
     16e:	91 05       	cpc	r25, r1
     170:	71 f4       	brne	.+28     	; 0x18e <_Z41__static_initialization_and_destruction_0ii+0x3c>
     172:	8b 81       	ldd	r24, Y+3	; 0x03
     174:	9c 81       	ldd	r25, Y+4	; 0x04
     176:	2f ef       	ldi	r18, 0xFF	; 255
     178:	8f 3f       	cpi	r24, 0xFF	; 255
     17a:	92 07       	cpc	r25, r18
     17c:	41 f4       	brne	.+16     	; 0x18e <_Z41__static_initialization_and_destruction_0ii+0x3c>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     17e:	82 e3       	ldi	r24, 0x32	; 50
     180:	93 e0       	ldi	r25, 0x03	; 3
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN9IPAddressC1Ehhhh>
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
     196:	cf 91       	pop	r28
     198:	df 91       	pop	r29
     19a:	0f 91       	pop	r16
     19c:	08 95       	ret

0000019e <_GLOBAL__I___cxa_pure_virtual>:
     19e:	df 93       	push	r29
     1a0:	cf 93       	push	r28
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	6f ef       	ldi	r22, 0xFF	; 255
     1ac:	7f ef       	ldi	r23, 0xFF	; 255
     1ae:	0e 94 a9 00 	call	0x152	; 0x152 <_Z41__static_initialization_and_destruction_0ii>
     1b2:	cf 91       	pop	r28
     1b4:	df 91       	pop	r29
     1b6:	08 95       	ret

000001b8 <main>:
#include <WProgram.h> //import main Arduino header file

int main(){
     1b8:	df 93       	push	r29
     1ba:	cf 93       	push	r28
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62

    init(); //Don't forget this!
     1c0:	0e 94 4d 09 	call	0x129a	; 0x129a <init>
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0

}
     1c8:	cf 91       	pop	r28
     1ca:	df 91       	pop	r29
     1cc:	08 95       	ret

000001ce <__fixunssfsi>:
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	7b 01       	movw	r14, r22
     1d8:	8c 01       	movw	r16, r24
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	5f e4       	ldi	r21, 0x4F	; 79
     1e2:	0e 94 93 04 	call	0x926	; 0x926 <__gesf2>
     1e6:	88 23       	and	r24, r24
     1e8:	8c f0       	brlt	.+34     	; 0x20c <__fixunssfsi+0x3e>
     1ea:	c8 01       	movw	r24, r16
     1ec:	b7 01       	movw	r22, r14
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	5f e4       	ldi	r21, 0x4F	; 79
     1f6:	0e 94 5f 02 	call	0x4be	; 0x4be <__subsf3>
     1fa:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fixsfsi>
     1fe:	9b 01       	movw	r18, r22
     200:	ac 01       	movw	r20, r24
     202:	20 50       	subi	r18, 0x00	; 0
     204:	30 40       	sbci	r19, 0x00	; 0
     206:	40 40       	sbci	r20, 0x00	; 0
     208:	50 48       	sbci	r21, 0x80	; 128
     20a:	06 c0       	rjmp	.+12     	; 0x218 <__fixunssfsi+0x4a>
     20c:	c8 01       	movw	r24, r16
     20e:	b7 01       	movw	r22, r14
     210:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fixsfsi>
     214:	9b 01       	movw	r18, r22
     216:	ac 01       	movw	r20, r24
     218:	b9 01       	movw	r22, r18
     21a:	ca 01       	movw	r24, r20
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	ff 90       	pop	r15
     222:	ef 90       	pop	r14
     224:	08 95       	ret

00000226 <_fpadd_parts>:
     226:	a0 e0       	ldi	r26, 0x00	; 0
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	e9 e1       	ldi	r30, 0x19	; 25
     22c:	f1 e0       	ldi	r31, 0x01	; 1
     22e:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__prologue_saves__>
     232:	dc 01       	movw	r26, r24
     234:	2b 01       	movw	r4, r22
     236:	fa 01       	movw	r30, r20
     238:	9c 91       	ld	r25, X
     23a:	92 30       	cpi	r25, 0x02	; 2
     23c:	08 f4       	brcc	.+2      	; 0x240 <_fpadd_parts+0x1a>
     23e:	39 c1       	rjmp	.+626    	; 0x4b2 <_fpadd_parts+0x28c>
     240:	eb 01       	movw	r28, r22
     242:	88 81       	ld	r24, Y
     244:	82 30       	cpi	r24, 0x02	; 2
     246:	08 f4       	brcc	.+2      	; 0x24a <_fpadd_parts+0x24>
     248:	33 c1       	rjmp	.+614    	; 0x4b0 <_fpadd_parts+0x28a>
     24a:	94 30       	cpi	r25, 0x04	; 4
     24c:	69 f4       	brne	.+26     	; 0x268 <_fpadd_parts+0x42>
     24e:	84 30       	cpi	r24, 0x04	; 4
     250:	09 f0       	breq	.+2      	; 0x254 <_fpadd_parts+0x2e>
     252:	2f c1       	rjmp	.+606    	; 0x4b2 <_fpadd_parts+0x28c>
     254:	11 96       	adiw	r26, 0x01	; 1
     256:	9c 91       	ld	r25, X
     258:	11 97       	sbiw	r26, 0x01	; 1
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	98 17       	cp	r25, r24
     25e:	09 f4       	brne	.+2      	; 0x262 <_fpadd_parts+0x3c>
     260:	28 c1       	rjmp	.+592    	; 0x4b2 <_fpadd_parts+0x28c>
     262:	af e0       	ldi	r26, 0x0F	; 15
     264:	b2 e0       	ldi	r27, 0x02	; 2
     266:	25 c1       	rjmp	.+586    	; 0x4b2 <_fpadd_parts+0x28c>
     268:	84 30       	cpi	r24, 0x04	; 4
     26a:	09 f4       	brne	.+2      	; 0x26e <_fpadd_parts+0x48>
     26c:	21 c1       	rjmp	.+578    	; 0x4b0 <_fpadd_parts+0x28a>
     26e:	82 30       	cpi	r24, 0x02	; 2
     270:	a9 f4       	brne	.+42     	; 0x29c <_fpadd_parts+0x76>
     272:	92 30       	cpi	r25, 0x02	; 2
     274:	09 f0       	breq	.+2      	; 0x278 <_fpadd_parts+0x52>
     276:	1d c1       	rjmp	.+570    	; 0x4b2 <_fpadd_parts+0x28c>
     278:	9a 01       	movw	r18, r20
     27a:	ad 01       	movw	r20, r26
     27c:	88 e0       	ldi	r24, 0x08	; 8
     27e:	ea 01       	movw	r28, r20
     280:	09 90       	ld	r0, Y+
     282:	ae 01       	movw	r20, r28
     284:	e9 01       	movw	r28, r18
     286:	09 92       	st	Y+, r0
     288:	9e 01       	movw	r18, r28
     28a:	81 50       	subi	r24, 0x01	; 1
     28c:	c1 f7       	brne	.-16     	; 0x27e <_fpadd_parts+0x58>
     28e:	e2 01       	movw	r28, r4
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	11 96       	adiw	r26, 0x01	; 1
     294:	9c 91       	ld	r25, X
     296:	89 23       	and	r24, r25
     298:	81 83       	std	Z+1, r24	; 0x01
     29a:	08 c1       	rjmp	.+528    	; 0x4ac <_fpadd_parts+0x286>
     29c:	92 30       	cpi	r25, 0x02	; 2
     29e:	09 f4       	brne	.+2      	; 0x2a2 <_fpadd_parts+0x7c>
     2a0:	07 c1       	rjmp	.+526    	; 0x4b0 <_fpadd_parts+0x28a>
     2a2:	12 96       	adiw	r26, 0x02	; 2
     2a4:	2d 90       	ld	r2, X+
     2a6:	3c 90       	ld	r3, X
     2a8:	13 97       	sbiw	r26, 0x03	; 3
     2aa:	eb 01       	movw	r28, r22
     2ac:	8a 81       	ldd	r24, Y+2	; 0x02
     2ae:	9b 81       	ldd	r25, Y+3	; 0x03
     2b0:	14 96       	adiw	r26, 0x04	; 4
     2b2:	ad 90       	ld	r10, X+
     2b4:	bd 90       	ld	r11, X+
     2b6:	cd 90       	ld	r12, X+
     2b8:	dc 90       	ld	r13, X
     2ba:	17 97       	sbiw	r26, 0x07	; 7
     2bc:	ec 80       	ldd	r14, Y+4	; 0x04
     2be:	fd 80       	ldd	r15, Y+5	; 0x05
     2c0:	0e 81       	ldd	r16, Y+6	; 0x06
     2c2:	1f 81       	ldd	r17, Y+7	; 0x07
     2c4:	91 01       	movw	r18, r2
     2c6:	28 1b       	sub	r18, r24
     2c8:	39 0b       	sbc	r19, r25
     2ca:	b9 01       	movw	r22, r18
     2cc:	37 ff       	sbrs	r19, 7
     2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <_fpadd_parts+0xb2>
     2d0:	66 27       	eor	r22, r22
     2d2:	77 27       	eor	r23, r23
     2d4:	62 1b       	sub	r22, r18
     2d6:	73 0b       	sbc	r23, r19
     2d8:	60 32       	cpi	r22, 0x20	; 32
     2da:	71 05       	cpc	r23, r1
     2dc:	0c f0       	brlt	.+2      	; 0x2e0 <_fpadd_parts+0xba>
     2de:	61 c0       	rjmp	.+194    	; 0x3a2 <_fpadd_parts+0x17c>
     2e0:	12 16       	cp	r1, r18
     2e2:	13 06       	cpc	r1, r19
     2e4:	6c f5       	brge	.+90     	; 0x340 <_fpadd_parts+0x11a>
     2e6:	37 01       	movw	r6, r14
     2e8:	48 01       	movw	r8, r16
     2ea:	06 2e       	mov	r0, r22
     2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <_fpadd_parts+0xd0>
     2ee:	96 94       	lsr	r9
     2f0:	87 94       	ror	r8
     2f2:	77 94       	ror	r7
     2f4:	67 94       	ror	r6
     2f6:	0a 94       	dec	r0
     2f8:	d2 f7       	brpl	.-12     	; 0x2ee <_fpadd_parts+0xc8>
     2fa:	21 e0       	ldi	r18, 0x01	; 1
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	04 c0       	rjmp	.+8      	; 0x30c <_fpadd_parts+0xe6>
     304:	22 0f       	add	r18, r18
     306:	33 1f       	adc	r19, r19
     308:	44 1f       	adc	r20, r20
     30a:	55 1f       	adc	r21, r21
     30c:	6a 95       	dec	r22
     30e:	d2 f7       	brpl	.-12     	; 0x304 <_fpadd_parts+0xde>
     310:	21 50       	subi	r18, 0x01	; 1
     312:	30 40       	sbci	r19, 0x00	; 0
     314:	40 40       	sbci	r20, 0x00	; 0
     316:	50 40       	sbci	r21, 0x00	; 0
     318:	2e 21       	and	r18, r14
     31a:	3f 21       	and	r19, r15
     31c:	40 23       	and	r20, r16
     31e:	51 23       	and	r21, r17
     320:	21 15       	cp	r18, r1
     322:	31 05       	cpc	r19, r1
     324:	41 05       	cpc	r20, r1
     326:	51 05       	cpc	r21, r1
     328:	21 f0       	breq	.+8      	; 0x332 <_fpadd_parts+0x10c>
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	79 01       	movw	r14, r18
     334:	8a 01       	movw	r16, r20
     336:	e6 28       	or	r14, r6
     338:	f7 28       	or	r15, r7
     33a:	08 29       	or	r16, r8
     33c:	19 29       	or	r17, r9
     33e:	3c c0       	rjmp	.+120    	; 0x3b8 <_fpadd_parts+0x192>
     340:	23 2b       	or	r18, r19
     342:	d1 f1       	breq	.+116    	; 0x3b8 <_fpadd_parts+0x192>
     344:	26 0e       	add	r2, r22
     346:	37 1e       	adc	r3, r23
     348:	35 01       	movw	r6, r10
     34a:	46 01       	movw	r8, r12
     34c:	06 2e       	mov	r0, r22
     34e:	04 c0       	rjmp	.+8      	; 0x358 <_fpadd_parts+0x132>
     350:	96 94       	lsr	r9
     352:	87 94       	ror	r8
     354:	77 94       	ror	r7
     356:	67 94       	ror	r6
     358:	0a 94       	dec	r0
     35a:	d2 f7       	brpl	.-12     	; 0x350 <_fpadd_parts+0x12a>
     35c:	21 e0       	ldi	r18, 0x01	; 1
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	04 c0       	rjmp	.+8      	; 0x36e <_fpadd_parts+0x148>
     366:	22 0f       	add	r18, r18
     368:	33 1f       	adc	r19, r19
     36a:	44 1f       	adc	r20, r20
     36c:	55 1f       	adc	r21, r21
     36e:	6a 95       	dec	r22
     370:	d2 f7       	brpl	.-12     	; 0x366 <_fpadd_parts+0x140>
     372:	21 50       	subi	r18, 0x01	; 1
     374:	30 40       	sbci	r19, 0x00	; 0
     376:	40 40       	sbci	r20, 0x00	; 0
     378:	50 40       	sbci	r21, 0x00	; 0
     37a:	2a 21       	and	r18, r10
     37c:	3b 21       	and	r19, r11
     37e:	4c 21       	and	r20, r12
     380:	5d 21       	and	r21, r13
     382:	21 15       	cp	r18, r1
     384:	31 05       	cpc	r19, r1
     386:	41 05       	cpc	r20, r1
     388:	51 05       	cpc	r21, r1
     38a:	21 f0       	breq	.+8      	; 0x394 <_fpadd_parts+0x16e>
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	59 01       	movw	r10, r18
     396:	6a 01       	movw	r12, r20
     398:	a6 28       	or	r10, r6
     39a:	b7 28       	or	r11, r7
     39c:	c8 28       	or	r12, r8
     39e:	d9 28       	or	r13, r9
     3a0:	0b c0       	rjmp	.+22     	; 0x3b8 <_fpadd_parts+0x192>
     3a2:	82 15       	cp	r24, r2
     3a4:	93 05       	cpc	r25, r3
     3a6:	2c f0       	brlt	.+10     	; 0x3b2 <_fpadd_parts+0x18c>
     3a8:	1c 01       	movw	r2, r24
     3aa:	aa 24       	eor	r10, r10
     3ac:	bb 24       	eor	r11, r11
     3ae:	65 01       	movw	r12, r10
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <_fpadd_parts+0x192>
     3b2:	ee 24       	eor	r14, r14
     3b4:	ff 24       	eor	r15, r15
     3b6:	87 01       	movw	r16, r14
     3b8:	11 96       	adiw	r26, 0x01	; 1
     3ba:	9c 91       	ld	r25, X
     3bc:	d2 01       	movw	r26, r4
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	8c 91       	ld	r24, X
     3c2:	98 17       	cp	r25, r24
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <_fpadd_parts+0x1a2>
     3c6:	45 c0       	rjmp	.+138    	; 0x452 <_fpadd_parts+0x22c>
     3c8:	99 23       	and	r25, r25
     3ca:	39 f0       	breq	.+14     	; 0x3da <_fpadd_parts+0x1b4>
     3cc:	a8 01       	movw	r20, r16
     3ce:	97 01       	movw	r18, r14
     3d0:	2a 19       	sub	r18, r10
     3d2:	3b 09       	sbc	r19, r11
     3d4:	4c 09       	sbc	r20, r12
     3d6:	5d 09       	sbc	r21, r13
     3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <_fpadd_parts+0x1c0>
     3da:	a6 01       	movw	r20, r12
     3dc:	95 01       	movw	r18, r10
     3de:	2e 19       	sub	r18, r14
     3e0:	3f 09       	sbc	r19, r15
     3e2:	40 0b       	sbc	r20, r16
     3e4:	51 0b       	sbc	r21, r17
     3e6:	57 fd       	sbrc	r21, 7
     3e8:	08 c0       	rjmp	.+16     	; 0x3fa <_fpadd_parts+0x1d4>
     3ea:	11 82       	std	Z+1, r1	; 0x01
     3ec:	33 82       	std	Z+3, r3	; 0x03
     3ee:	22 82       	std	Z+2, r2	; 0x02
     3f0:	24 83       	std	Z+4, r18	; 0x04
     3f2:	35 83       	std	Z+5, r19	; 0x05
     3f4:	46 83       	std	Z+6, r20	; 0x06
     3f6:	57 83       	std	Z+7, r21	; 0x07
     3f8:	1d c0       	rjmp	.+58     	; 0x434 <_fpadd_parts+0x20e>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	81 83       	std	Z+1, r24	; 0x01
     3fe:	33 82       	std	Z+3, r3	; 0x03
     400:	22 82       	std	Z+2, r2	; 0x02
     402:	88 27       	eor	r24, r24
     404:	99 27       	eor	r25, r25
     406:	dc 01       	movw	r26, r24
     408:	82 1b       	sub	r24, r18
     40a:	93 0b       	sbc	r25, r19
     40c:	a4 0b       	sbc	r26, r20
     40e:	b5 0b       	sbc	r27, r21
     410:	84 83       	std	Z+4, r24	; 0x04
     412:	95 83       	std	Z+5, r25	; 0x05
     414:	a6 83       	std	Z+6, r26	; 0x06
     416:	b7 83       	std	Z+7, r27	; 0x07
     418:	0d c0       	rjmp	.+26     	; 0x434 <_fpadd_parts+0x20e>
     41a:	22 0f       	add	r18, r18
     41c:	33 1f       	adc	r19, r19
     41e:	44 1f       	adc	r20, r20
     420:	55 1f       	adc	r21, r21
     422:	24 83       	std	Z+4, r18	; 0x04
     424:	35 83       	std	Z+5, r19	; 0x05
     426:	46 83       	std	Z+6, r20	; 0x06
     428:	57 83       	std	Z+7, r21	; 0x07
     42a:	82 81       	ldd	r24, Z+2	; 0x02
     42c:	93 81       	ldd	r25, Z+3	; 0x03
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	93 83       	std	Z+3, r25	; 0x03
     432:	82 83       	std	Z+2, r24	; 0x02
     434:	24 81       	ldd	r18, Z+4	; 0x04
     436:	35 81       	ldd	r19, Z+5	; 0x05
     438:	46 81       	ldd	r20, Z+6	; 0x06
     43a:	57 81       	ldd	r21, Z+7	; 0x07
     43c:	da 01       	movw	r26, r20
     43e:	c9 01       	movw	r24, r18
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	a1 09       	sbc	r26, r1
     444:	b1 09       	sbc	r27, r1
     446:	8f 5f       	subi	r24, 0xFF	; 255
     448:	9f 4f       	sbci	r25, 0xFF	; 255
     44a:	af 4f       	sbci	r26, 0xFF	; 255
     44c:	bf 43       	sbci	r27, 0x3F	; 63
     44e:	28 f3       	brcs	.-54     	; 0x41a <_fpadd_parts+0x1f4>
     450:	0b c0       	rjmp	.+22     	; 0x468 <_fpadd_parts+0x242>
     452:	91 83       	std	Z+1, r25	; 0x01
     454:	33 82       	std	Z+3, r3	; 0x03
     456:	22 82       	std	Z+2, r2	; 0x02
     458:	ea 0c       	add	r14, r10
     45a:	fb 1c       	adc	r15, r11
     45c:	0c 1d       	adc	r16, r12
     45e:	1d 1d       	adc	r17, r13
     460:	e4 82       	std	Z+4, r14	; 0x04
     462:	f5 82       	std	Z+5, r15	; 0x05
     464:	06 83       	std	Z+6, r16	; 0x06
     466:	17 83       	std	Z+7, r17	; 0x07
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	80 83       	st	Z, r24
     46c:	24 81       	ldd	r18, Z+4	; 0x04
     46e:	35 81       	ldd	r19, Z+5	; 0x05
     470:	46 81       	ldd	r20, Z+6	; 0x06
     472:	57 81       	ldd	r21, Z+7	; 0x07
     474:	57 ff       	sbrs	r21, 7
     476:	1a c0       	rjmp	.+52     	; 0x4ac <_fpadd_parts+0x286>
     478:	c9 01       	movw	r24, r18
     47a:	aa 27       	eor	r26, r26
     47c:	97 fd       	sbrc	r25, 7
     47e:	a0 95       	com	r26
     480:	ba 2f       	mov	r27, r26
     482:	81 70       	andi	r24, 0x01	; 1
     484:	90 70       	andi	r25, 0x00	; 0
     486:	a0 70       	andi	r26, 0x00	; 0
     488:	b0 70       	andi	r27, 0x00	; 0
     48a:	56 95       	lsr	r21
     48c:	47 95       	ror	r20
     48e:	37 95       	ror	r19
     490:	27 95       	ror	r18
     492:	82 2b       	or	r24, r18
     494:	93 2b       	or	r25, r19
     496:	a4 2b       	or	r26, r20
     498:	b5 2b       	or	r27, r21
     49a:	84 83       	std	Z+4, r24	; 0x04
     49c:	95 83       	std	Z+5, r25	; 0x05
     49e:	a6 83       	std	Z+6, r26	; 0x06
     4a0:	b7 83       	std	Z+7, r27	; 0x07
     4a2:	82 81       	ldd	r24, Z+2	; 0x02
     4a4:	93 81       	ldd	r25, Z+3	; 0x03
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	93 83       	std	Z+3, r25	; 0x03
     4aa:	82 83       	std	Z+2, r24	; 0x02
     4ac:	df 01       	movw	r26, r30
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <_fpadd_parts+0x28c>
     4b0:	d2 01       	movw	r26, r4
     4b2:	cd 01       	movw	r24, r26
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	e2 e1       	ldi	r30, 0x12	; 18
     4ba:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__epilogue_restores__>

000004be <__subsf3>:
     4be:	a0 e2       	ldi	r26, 0x20	; 32
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	e5 e6       	ldi	r30, 0x65	; 101
     4c4:	f2 e0       	ldi	r31, 0x02	; 2
     4c6:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__prologue_saves__+0x18>
     4ca:	69 83       	std	Y+1, r22	; 0x01
     4cc:	7a 83       	std	Y+2, r23	; 0x02
     4ce:	8b 83       	std	Y+3, r24	; 0x03
     4d0:	9c 83       	std	Y+4, r25	; 0x04
     4d2:	2d 83       	std	Y+5, r18	; 0x05
     4d4:	3e 83       	std	Y+6, r19	; 0x06
     4d6:	4f 83       	std	Y+7, r20	; 0x07
     4d8:	58 87       	std	Y+8, r21	; 0x08
     4da:	e9 e0       	ldi	r30, 0x09	; 9
     4dc:	ee 2e       	mov	r14, r30
     4de:	f1 2c       	mov	r15, r1
     4e0:	ec 0e       	add	r14, r28
     4e2:	fd 1e       	adc	r15, r29
     4e4:	ce 01       	movw	r24, r28
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	b7 01       	movw	r22, r14
     4ea:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     4ee:	8e 01       	movw	r16, r28
     4f0:	0f 5e       	subi	r16, 0xEF	; 239
     4f2:	1f 4f       	sbci	r17, 0xFF	; 255
     4f4:	ce 01       	movw	r24, r28
     4f6:	05 96       	adiw	r24, 0x05	; 5
     4f8:	b8 01       	movw	r22, r16
     4fa:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     4fe:	8a 89       	ldd	r24, Y+18	; 0x12
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	89 27       	eor	r24, r25
     504:	8a 8b       	std	Y+18, r24	; 0x12
     506:	c7 01       	movw	r24, r14
     508:	b8 01       	movw	r22, r16
     50a:	ae 01       	movw	r20, r28
     50c:	47 5e       	subi	r20, 0xE7	; 231
     50e:	5f 4f       	sbci	r21, 0xFF	; 255
     510:	0e 94 13 01 	call	0x226	; 0x226 <_fpadd_parts>
     514:	0e 94 c8 06 	call	0xd90	; 0xd90 <__pack_f>
     518:	a0 96       	adiw	r28, 0x20	; 32
     51a:	e6 e0       	ldi	r30, 0x06	; 6
     51c:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__epilogue_restores__+0x18>

00000520 <__addsf3>:
     520:	a0 e2       	ldi	r26, 0x20	; 32
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	e6 e9       	ldi	r30, 0x96	; 150
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__prologue_saves__+0x18>
     52c:	69 83       	std	Y+1, r22	; 0x01
     52e:	7a 83       	std	Y+2, r23	; 0x02
     530:	8b 83       	std	Y+3, r24	; 0x03
     532:	9c 83       	std	Y+4, r25	; 0x04
     534:	2d 83       	std	Y+5, r18	; 0x05
     536:	3e 83       	std	Y+6, r19	; 0x06
     538:	4f 83       	std	Y+7, r20	; 0x07
     53a:	58 87       	std	Y+8, r21	; 0x08
     53c:	f9 e0       	ldi	r31, 0x09	; 9
     53e:	ef 2e       	mov	r14, r31
     540:	f1 2c       	mov	r15, r1
     542:	ec 0e       	add	r14, r28
     544:	fd 1e       	adc	r15, r29
     546:	ce 01       	movw	r24, r28
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	b7 01       	movw	r22, r14
     54c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     550:	8e 01       	movw	r16, r28
     552:	0f 5e       	subi	r16, 0xEF	; 239
     554:	1f 4f       	sbci	r17, 0xFF	; 255
     556:	ce 01       	movw	r24, r28
     558:	05 96       	adiw	r24, 0x05	; 5
     55a:	b8 01       	movw	r22, r16
     55c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     560:	c7 01       	movw	r24, r14
     562:	b8 01       	movw	r22, r16
     564:	ae 01       	movw	r20, r28
     566:	47 5e       	subi	r20, 0xE7	; 231
     568:	5f 4f       	sbci	r21, 0xFF	; 255
     56a:	0e 94 13 01 	call	0x226	; 0x226 <_fpadd_parts>
     56e:	0e 94 c8 06 	call	0xd90	; 0xd90 <__pack_f>
     572:	a0 96       	adiw	r28, 0x20	; 32
     574:	e6 e0       	ldi	r30, 0x06	; 6
     576:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__epilogue_restores__+0x18>

0000057a <__mulsf3>:
     57a:	a0 e2       	ldi	r26, 0x20	; 32
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	e3 ec       	ldi	r30, 0xC3	; 195
     580:	f2 e0       	ldi	r31, 0x02	; 2
     582:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__prologue_saves__>
     586:	69 83       	std	Y+1, r22	; 0x01
     588:	7a 83       	std	Y+2, r23	; 0x02
     58a:	8b 83       	std	Y+3, r24	; 0x03
     58c:	9c 83       	std	Y+4, r25	; 0x04
     58e:	2d 83       	std	Y+5, r18	; 0x05
     590:	3e 83       	std	Y+6, r19	; 0x06
     592:	4f 83       	std	Y+7, r20	; 0x07
     594:	58 87       	std	Y+8, r21	; 0x08
     596:	ce 01       	movw	r24, r28
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	be 01       	movw	r22, r28
     59c:	67 5f       	subi	r22, 0xF7	; 247
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     5a4:	ce 01       	movw	r24, r28
     5a6:	05 96       	adiw	r24, 0x05	; 5
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5e       	subi	r22, 0xEF	; 239
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     5b2:	99 85       	ldd	r25, Y+9	; 0x09
     5b4:	92 30       	cpi	r25, 0x02	; 2
     5b6:	88 f0       	brcs	.+34     	; 0x5da <__mulsf3+0x60>
     5b8:	89 89       	ldd	r24, Y+17	; 0x11
     5ba:	82 30       	cpi	r24, 0x02	; 2
     5bc:	c8 f0       	brcs	.+50     	; 0x5f0 <__mulsf3+0x76>
     5be:	94 30       	cpi	r25, 0x04	; 4
     5c0:	19 f4       	brne	.+6      	; 0x5c8 <__mulsf3+0x4e>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	51 f4       	brne	.+20     	; 0x5da <__mulsf3+0x60>
     5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <__mulsf3+0x56>
     5c8:	84 30       	cpi	r24, 0x04	; 4
     5ca:	29 f4       	brne	.+10     	; 0x5d6 <__mulsf3+0x5c>
     5cc:	92 30       	cpi	r25, 0x02	; 2
     5ce:	81 f4       	brne	.+32     	; 0x5f0 <__mulsf3+0x76>
     5d0:	8f e0       	ldi	r24, 0x0F	; 15
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	c6 c0       	rjmp	.+396    	; 0x762 <__mulsf3+0x1e8>
     5d6:	92 30       	cpi	r25, 0x02	; 2
     5d8:	49 f4       	brne	.+18     	; 0x5ec <__mulsf3+0x72>
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5de:	8a 89       	ldd	r24, Y+18	; 0x12
     5e0:	98 13       	cpse	r25, r24
     5e2:	21 e0       	ldi	r18, 0x01	; 1
     5e4:	2a 87       	std	Y+10, r18	; 0x0a
     5e6:	ce 01       	movw	r24, r28
     5e8:	09 96       	adiw	r24, 0x09	; 9
     5ea:	bb c0       	rjmp	.+374    	; 0x762 <__mulsf3+0x1e8>
     5ec:	82 30       	cpi	r24, 0x02	; 2
     5ee:	49 f4       	brne	.+18     	; 0x602 <__mulsf3+0x88>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f4:	8a 89       	ldd	r24, Y+18	; 0x12
     5f6:	98 13       	cpse	r25, r24
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	2a 8b       	std	Y+18, r18	; 0x12
     5fc:	ce 01       	movw	r24, r28
     5fe:	41 96       	adiw	r24, 0x11	; 17
     600:	b0 c0       	rjmp	.+352    	; 0x762 <__mulsf3+0x1e8>
     602:	2d 84       	ldd	r2, Y+13	; 0x0d
     604:	3e 84       	ldd	r3, Y+14	; 0x0e
     606:	4f 84       	ldd	r4, Y+15	; 0x0f
     608:	58 88       	ldd	r5, Y+16	; 0x10
     60a:	6d 88       	ldd	r6, Y+21	; 0x15
     60c:	7e 88       	ldd	r7, Y+22	; 0x16
     60e:	8f 88       	ldd	r8, Y+23	; 0x17
     610:	98 8c       	ldd	r9, Y+24	; 0x18
     612:	ee 24       	eor	r14, r14
     614:	ff 24       	eor	r15, r15
     616:	87 01       	movw	r16, r14
     618:	aa 24       	eor	r10, r10
     61a:	bb 24       	eor	r11, r11
     61c:	65 01       	movw	r12, r10
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	e0 e0       	ldi	r30, 0x00	; 0
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	c1 01       	movw	r24, r2
     62c:	81 70       	andi	r24, 0x01	; 1
     62e:	90 70       	andi	r25, 0x00	; 0
     630:	89 2b       	or	r24, r25
     632:	e9 f0       	breq	.+58     	; 0x66e <__mulsf3+0xf4>
     634:	e6 0c       	add	r14, r6
     636:	f7 1c       	adc	r15, r7
     638:	08 1d       	adc	r16, r8
     63a:	19 1d       	adc	r17, r9
     63c:	9a 01       	movw	r18, r20
     63e:	ab 01       	movw	r20, r22
     640:	2a 0d       	add	r18, r10
     642:	3b 1d       	adc	r19, r11
     644:	4c 1d       	adc	r20, r12
     646:	5d 1d       	adc	r21, r13
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	a0 e0       	ldi	r26, 0x00	; 0
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	e6 14       	cp	r14, r6
     652:	f7 04       	cpc	r15, r7
     654:	08 05       	cpc	r16, r8
     656:	19 05       	cpc	r17, r9
     658:	20 f4       	brcc	.+8      	; 0x662 <__mulsf3+0xe8>
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	a0 e0       	ldi	r26, 0x00	; 0
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	ba 01       	movw	r22, r20
     664:	a9 01       	movw	r20, r18
     666:	48 0f       	add	r20, r24
     668:	59 1f       	adc	r21, r25
     66a:	6a 1f       	adc	r22, r26
     66c:	7b 1f       	adc	r23, r27
     66e:	aa 0c       	add	r10, r10
     670:	bb 1c       	adc	r11, r11
     672:	cc 1c       	adc	r12, r12
     674:	dd 1c       	adc	r13, r13
     676:	97 fe       	sbrs	r9, 7
     678:	08 c0       	rjmp	.+16     	; 0x68a <__mulsf3+0x110>
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	a0 e0       	ldi	r26, 0x00	; 0
     680:	b0 e0       	ldi	r27, 0x00	; 0
     682:	a8 2a       	or	r10, r24
     684:	b9 2a       	or	r11, r25
     686:	ca 2a       	or	r12, r26
     688:	db 2a       	or	r13, r27
     68a:	31 96       	adiw	r30, 0x01	; 1
     68c:	e0 32       	cpi	r30, 0x20	; 32
     68e:	f1 05       	cpc	r31, r1
     690:	49 f0       	breq	.+18     	; 0x6a4 <__mulsf3+0x12a>
     692:	66 0c       	add	r6, r6
     694:	77 1c       	adc	r7, r7
     696:	88 1c       	adc	r8, r8
     698:	99 1c       	adc	r9, r9
     69a:	56 94       	lsr	r5
     69c:	47 94       	ror	r4
     69e:	37 94       	ror	r3
     6a0:	27 94       	ror	r2
     6a2:	c3 cf       	rjmp	.-122    	; 0x62a <__mulsf3+0xb0>
     6a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     6a6:	ea 89       	ldd	r30, Y+18	; 0x12
     6a8:	2b 89       	ldd	r18, Y+19	; 0x13
     6aa:	3c 89       	ldd	r19, Y+20	; 0x14
     6ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     6b0:	28 0f       	add	r18, r24
     6b2:	39 1f       	adc	r19, r25
     6b4:	2e 5f       	subi	r18, 0xFE	; 254
     6b6:	3f 4f       	sbci	r19, 0xFF	; 255
     6b8:	17 c0       	rjmp	.+46     	; 0x6e8 <__mulsf3+0x16e>
     6ba:	ca 01       	movw	r24, r20
     6bc:	81 70       	andi	r24, 0x01	; 1
     6be:	90 70       	andi	r25, 0x00	; 0
     6c0:	89 2b       	or	r24, r25
     6c2:	61 f0       	breq	.+24     	; 0x6dc <__mulsf3+0x162>
     6c4:	16 95       	lsr	r17
     6c6:	07 95       	ror	r16
     6c8:	f7 94       	ror	r15
     6ca:	e7 94       	ror	r14
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	a0 e0       	ldi	r26, 0x00	; 0
     6d2:	b0 e8       	ldi	r27, 0x80	; 128
     6d4:	e8 2a       	or	r14, r24
     6d6:	f9 2a       	or	r15, r25
     6d8:	0a 2b       	or	r16, r26
     6da:	1b 2b       	or	r17, r27
     6dc:	76 95       	lsr	r23
     6de:	67 95       	ror	r22
     6e0:	57 95       	ror	r21
     6e2:	47 95       	ror	r20
     6e4:	2f 5f       	subi	r18, 0xFF	; 255
     6e6:	3f 4f       	sbci	r19, 0xFF	; 255
     6e8:	77 fd       	sbrc	r23, 7
     6ea:	e7 cf       	rjmp	.-50     	; 0x6ba <__mulsf3+0x140>
     6ec:	0c c0       	rjmp	.+24     	; 0x706 <__mulsf3+0x18c>
     6ee:	44 0f       	add	r20, r20
     6f0:	55 1f       	adc	r21, r21
     6f2:	66 1f       	adc	r22, r22
     6f4:	77 1f       	adc	r23, r23
     6f6:	17 fd       	sbrc	r17, 7
     6f8:	41 60       	ori	r20, 0x01	; 1
     6fa:	ee 0c       	add	r14, r14
     6fc:	ff 1c       	adc	r15, r15
     6fe:	00 1f       	adc	r16, r16
     700:	11 1f       	adc	r17, r17
     702:	21 50       	subi	r18, 0x01	; 1
     704:	30 40       	sbci	r19, 0x00	; 0
     706:	40 30       	cpi	r20, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	59 07       	cpc	r21, r25
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	69 07       	cpc	r22, r25
     710:	90 e4       	ldi	r25, 0x40	; 64
     712:	79 07       	cpc	r23, r25
     714:	60 f3       	brcs	.-40     	; 0x6ee <__mulsf3+0x174>
     716:	2b 8f       	std	Y+27, r18	; 0x1b
     718:	3c 8f       	std	Y+28, r19	; 0x1c
     71a:	db 01       	movw	r26, r22
     71c:	ca 01       	movw	r24, r20
     71e:	8f 77       	andi	r24, 0x7F	; 127
     720:	90 70       	andi	r25, 0x00	; 0
     722:	a0 70       	andi	r26, 0x00	; 0
     724:	b0 70       	andi	r27, 0x00	; 0
     726:	80 34       	cpi	r24, 0x40	; 64
     728:	91 05       	cpc	r25, r1
     72a:	a1 05       	cpc	r26, r1
     72c:	b1 05       	cpc	r27, r1
     72e:	61 f4       	brne	.+24     	; 0x748 <__mulsf3+0x1ce>
     730:	47 fd       	sbrc	r20, 7
     732:	0a c0       	rjmp	.+20     	; 0x748 <__mulsf3+0x1ce>
     734:	e1 14       	cp	r14, r1
     736:	f1 04       	cpc	r15, r1
     738:	01 05       	cpc	r16, r1
     73a:	11 05       	cpc	r17, r1
     73c:	29 f0       	breq	.+10     	; 0x748 <__mulsf3+0x1ce>
     73e:	40 5c       	subi	r20, 0xC0	; 192
     740:	5f 4f       	sbci	r21, 0xFF	; 255
     742:	6f 4f       	sbci	r22, 0xFF	; 255
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	40 78       	andi	r20, 0x80	; 128
     748:	1a 8e       	std	Y+26, r1	; 0x1a
     74a:	fe 17       	cp	r31, r30
     74c:	11 f0       	breq	.+4      	; 0x752 <__mulsf3+0x1d8>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	8a 8f       	std	Y+26, r24	; 0x1a
     752:	4d 8f       	std	Y+29, r20	; 0x1d
     754:	5e 8f       	std	Y+30, r21	; 0x1e
     756:	6f 8f       	std	Y+31, r22	; 0x1f
     758:	78 a3       	std	Y+32, r23	; 0x20
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	89 8f       	std	Y+25, r24	; 0x19
     75e:	ce 01       	movw	r24, r28
     760:	49 96       	adiw	r24, 0x19	; 25
     762:	0e 94 c8 06 	call	0xd90	; 0xd90 <__pack_f>
     766:	a0 96       	adiw	r28, 0x20	; 32
     768:	e2 e1       	ldi	r30, 0x12	; 18
     76a:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__epilogue_restores__>

0000076e <__divsf3>:
     76e:	a8 e1       	ldi	r26, 0x18	; 24
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	ed eb       	ldi	r30, 0xBD	; 189
     774:	f3 e0       	ldi	r31, 0x03	; 3
     776:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__+0x10>
     77a:	69 83       	std	Y+1, r22	; 0x01
     77c:	7a 83       	std	Y+2, r23	; 0x02
     77e:	8b 83       	std	Y+3, r24	; 0x03
     780:	9c 83       	std	Y+4, r25	; 0x04
     782:	2d 83       	std	Y+5, r18	; 0x05
     784:	3e 83       	std	Y+6, r19	; 0x06
     786:	4f 83       	std	Y+7, r20	; 0x07
     788:	58 87       	std	Y+8, r21	; 0x08
     78a:	b9 e0       	ldi	r27, 0x09	; 9
     78c:	eb 2e       	mov	r14, r27
     78e:	f1 2c       	mov	r15, r1
     790:	ec 0e       	add	r14, r28
     792:	fd 1e       	adc	r15, r29
     794:	ce 01       	movw	r24, r28
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	b7 01       	movw	r22, r14
     79a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     79e:	8e 01       	movw	r16, r28
     7a0:	0f 5e       	subi	r16, 0xEF	; 239
     7a2:	1f 4f       	sbci	r17, 0xFF	; 255
     7a4:	ce 01       	movw	r24, r28
     7a6:	05 96       	adiw	r24, 0x05	; 5
     7a8:	b8 01       	movw	r22, r16
     7aa:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     7ae:	29 85       	ldd	r18, Y+9	; 0x09
     7b0:	22 30       	cpi	r18, 0x02	; 2
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <__divsf3+0x48>
     7b4:	7e c0       	rjmp	.+252    	; 0x8b2 <__divsf3+0x144>
     7b6:	39 89       	ldd	r19, Y+17	; 0x11
     7b8:	32 30       	cpi	r19, 0x02	; 2
     7ba:	10 f4       	brcc	.+4      	; 0x7c0 <__divsf3+0x52>
     7bc:	b8 01       	movw	r22, r16
     7be:	7c c0       	rjmp	.+248    	; 0x8b8 <__divsf3+0x14a>
     7c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     7c2:	9a 89       	ldd	r25, Y+18	; 0x12
     7c4:	89 27       	eor	r24, r25
     7c6:	8a 87       	std	Y+10, r24	; 0x0a
     7c8:	24 30       	cpi	r18, 0x04	; 4
     7ca:	11 f0       	breq	.+4      	; 0x7d0 <__divsf3+0x62>
     7cc:	22 30       	cpi	r18, 0x02	; 2
     7ce:	31 f4       	brne	.+12     	; 0x7dc <__divsf3+0x6e>
     7d0:	23 17       	cp	r18, r19
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <__divsf3+0x68>
     7d4:	6e c0       	rjmp	.+220    	; 0x8b2 <__divsf3+0x144>
     7d6:	6f e0       	ldi	r22, 0x0F	; 15
     7d8:	72 e0       	ldi	r23, 0x02	; 2
     7da:	6e c0       	rjmp	.+220    	; 0x8b8 <__divsf3+0x14a>
     7dc:	34 30       	cpi	r19, 0x04	; 4
     7de:	39 f4       	brne	.+14     	; 0x7ee <__divsf3+0x80>
     7e0:	1d 86       	std	Y+13, r1	; 0x0d
     7e2:	1e 86       	std	Y+14, r1	; 0x0e
     7e4:	1f 86       	std	Y+15, r1	; 0x0f
     7e6:	18 8a       	std	Y+16, r1	; 0x10
     7e8:	1c 86       	std	Y+12, r1	; 0x0c
     7ea:	1b 86       	std	Y+11, r1	; 0x0b
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <__divsf3+0x88>
     7ee:	32 30       	cpi	r19, 0x02	; 2
     7f0:	21 f4       	brne	.+8      	; 0x7fa <__divsf3+0x8c>
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	89 87       	std	Y+9, r24	; 0x09
     7f6:	b7 01       	movw	r22, r14
     7f8:	5f c0       	rjmp	.+190    	; 0x8b8 <__divsf3+0x14a>
     7fa:	2b 85       	ldd	r18, Y+11	; 0x0b
     7fc:	3c 85       	ldd	r19, Y+12	; 0x0c
     7fe:	8b 89       	ldd	r24, Y+19	; 0x13
     800:	9c 89       	ldd	r25, Y+20	; 0x14
     802:	28 1b       	sub	r18, r24
     804:	39 0b       	sbc	r19, r25
     806:	3c 87       	std	Y+12, r19	; 0x0c
     808:	2b 87       	std	Y+11, r18	; 0x0b
     80a:	ed 84       	ldd	r14, Y+13	; 0x0d
     80c:	fe 84       	ldd	r15, Y+14	; 0x0e
     80e:	0f 85       	ldd	r16, Y+15	; 0x0f
     810:	18 89       	ldd	r17, Y+16	; 0x10
     812:	ad 88       	ldd	r10, Y+21	; 0x15
     814:	be 88       	ldd	r11, Y+22	; 0x16
     816:	cf 88       	ldd	r12, Y+23	; 0x17
     818:	d8 8c       	ldd	r13, Y+24	; 0x18
     81a:	ea 14       	cp	r14, r10
     81c:	fb 04       	cpc	r15, r11
     81e:	0c 05       	cpc	r16, r12
     820:	1d 05       	cpc	r17, r13
     822:	40 f4       	brcc	.+16     	; 0x834 <__divsf3+0xc6>
     824:	ee 0c       	add	r14, r14
     826:	ff 1c       	adc	r15, r15
     828:	00 1f       	adc	r16, r16
     82a:	11 1f       	adc	r17, r17
     82c:	21 50       	subi	r18, 0x01	; 1
     82e:	30 40       	sbci	r19, 0x00	; 0
     830:	3c 87       	std	Y+12, r19	; 0x0c
     832:	2b 87       	std	Y+11, r18	; 0x0b
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	a0 e0       	ldi	r26, 0x00	; 0
     842:	b0 e4       	ldi	r27, 0x40	; 64
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	ea 14       	cp	r14, r10
     84a:	fb 04       	cpc	r15, r11
     84c:	0c 05       	cpc	r16, r12
     84e:	1d 05       	cpc	r17, r13
     850:	40 f0       	brcs	.+16     	; 0x862 <__divsf3+0xf4>
     852:	28 2b       	or	r18, r24
     854:	39 2b       	or	r19, r25
     856:	4a 2b       	or	r20, r26
     858:	5b 2b       	or	r21, r27
     85a:	ea 18       	sub	r14, r10
     85c:	fb 08       	sbc	r15, r11
     85e:	0c 09       	sbc	r16, r12
     860:	1d 09       	sbc	r17, r13
     862:	b6 95       	lsr	r27
     864:	a7 95       	ror	r26
     866:	97 95       	ror	r25
     868:	87 95       	ror	r24
     86a:	ee 0c       	add	r14, r14
     86c:	ff 1c       	adc	r15, r15
     86e:	00 1f       	adc	r16, r16
     870:	11 1f       	adc	r17, r17
     872:	6f 5f       	subi	r22, 0xFF	; 255
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	6f 31       	cpi	r22, 0x1F	; 31
     878:	71 05       	cpc	r23, r1
     87a:	31 f7       	brne	.-52     	; 0x848 <__divsf3+0xda>
     87c:	da 01       	movw	r26, r20
     87e:	c9 01       	movw	r24, r18
     880:	8f 77       	andi	r24, 0x7F	; 127
     882:	90 70       	andi	r25, 0x00	; 0
     884:	a0 70       	andi	r26, 0x00	; 0
     886:	b0 70       	andi	r27, 0x00	; 0
     888:	80 34       	cpi	r24, 0x40	; 64
     88a:	91 05       	cpc	r25, r1
     88c:	a1 05       	cpc	r26, r1
     88e:	b1 05       	cpc	r27, r1
     890:	61 f4       	brne	.+24     	; 0x8aa <__divsf3+0x13c>
     892:	27 fd       	sbrc	r18, 7
     894:	0a c0       	rjmp	.+20     	; 0x8aa <__divsf3+0x13c>
     896:	e1 14       	cp	r14, r1
     898:	f1 04       	cpc	r15, r1
     89a:	01 05       	cpc	r16, r1
     89c:	11 05       	cpc	r17, r1
     89e:	29 f0       	breq	.+10     	; 0x8aa <__divsf3+0x13c>
     8a0:	20 5c       	subi	r18, 0xC0	; 192
     8a2:	3f 4f       	sbci	r19, 0xFF	; 255
     8a4:	4f 4f       	sbci	r20, 0xFF	; 255
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	20 78       	andi	r18, 0x80	; 128
     8aa:	2d 87       	std	Y+13, r18	; 0x0d
     8ac:	3e 87       	std	Y+14, r19	; 0x0e
     8ae:	4f 87       	std	Y+15, r20	; 0x0f
     8b0:	58 8b       	std	Y+16, r21	; 0x10
     8b2:	be 01       	movw	r22, r28
     8b4:	67 5f       	subi	r22, 0xF7	; 247
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	cb 01       	movw	r24, r22
     8ba:	0e 94 c8 06 	call	0xd90	; 0xd90 <__pack_f>
     8be:	68 96       	adiw	r28, 0x18	; 24
     8c0:	ea e0       	ldi	r30, 0x0A	; 10
     8c2:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__+0x10>

000008c6 <__gtsf2>:
     8c6:	a8 e1       	ldi	r26, 0x18	; 24
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	e9 e6       	ldi	r30, 0x69	; 105
     8cc:	f4 e0       	ldi	r31, 0x04	; 4
     8ce:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__prologue_saves__+0x18>
     8d2:	69 83       	std	Y+1, r22	; 0x01
     8d4:	7a 83       	std	Y+2, r23	; 0x02
     8d6:	8b 83       	std	Y+3, r24	; 0x03
     8d8:	9c 83       	std	Y+4, r25	; 0x04
     8da:	2d 83       	std	Y+5, r18	; 0x05
     8dc:	3e 83       	std	Y+6, r19	; 0x06
     8de:	4f 83       	std	Y+7, r20	; 0x07
     8e0:	58 87       	std	Y+8, r21	; 0x08
     8e2:	89 e0       	ldi	r24, 0x09	; 9
     8e4:	e8 2e       	mov	r14, r24
     8e6:	f1 2c       	mov	r15, r1
     8e8:	ec 0e       	add	r14, r28
     8ea:	fd 1e       	adc	r15, r29
     8ec:	ce 01       	movw	r24, r28
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	b7 01       	movw	r22, r14
     8f2:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     8f6:	8e 01       	movw	r16, r28
     8f8:	0f 5e       	subi	r16, 0xEF	; 239
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	ce 01       	movw	r24, r28
     8fe:	05 96       	adiw	r24, 0x05	; 5
     900:	b8 01       	movw	r22, r16
     902:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     906:	89 85       	ldd	r24, Y+9	; 0x09
     908:	82 30       	cpi	r24, 0x02	; 2
     90a:	40 f0       	brcs	.+16     	; 0x91c <__gtsf2+0x56>
     90c:	89 89       	ldd	r24, Y+17	; 0x11
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	28 f0       	brcs	.+10     	; 0x91c <__gtsf2+0x56>
     912:	c7 01       	movw	r24, r14
     914:	b8 01       	movw	r22, r16
     916:	0e 94 15 08 	call	0x102a	; 0x102a <__fpcmp_parts_f>
     91a:	01 c0       	rjmp	.+2      	; 0x91e <__gtsf2+0x58>
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	68 96       	adiw	r28, 0x18	; 24
     920:	e6 e0       	ldi	r30, 0x06	; 6
     922:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__epilogue_restores__+0x18>

00000926 <__gesf2>:
     926:	a8 e1       	ldi	r26, 0x18	; 24
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	e9 e9       	ldi	r30, 0x99	; 153
     92c:	f4 e0       	ldi	r31, 0x04	; 4
     92e:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__prologue_saves__+0x18>
     932:	69 83       	std	Y+1, r22	; 0x01
     934:	7a 83       	std	Y+2, r23	; 0x02
     936:	8b 83       	std	Y+3, r24	; 0x03
     938:	9c 83       	std	Y+4, r25	; 0x04
     93a:	2d 83       	std	Y+5, r18	; 0x05
     93c:	3e 83       	std	Y+6, r19	; 0x06
     93e:	4f 83       	std	Y+7, r20	; 0x07
     940:	58 87       	std	Y+8, r21	; 0x08
     942:	89 e0       	ldi	r24, 0x09	; 9
     944:	e8 2e       	mov	r14, r24
     946:	f1 2c       	mov	r15, r1
     948:	ec 0e       	add	r14, r28
     94a:	fd 1e       	adc	r15, r29
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	b7 01       	movw	r22, r14
     952:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     956:	8e 01       	movw	r16, r28
     958:	0f 5e       	subi	r16, 0xEF	; 239
     95a:	1f 4f       	sbci	r17, 0xFF	; 255
     95c:	ce 01       	movw	r24, r28
     95e:	05 96       	adiw	r24, 0x05	; 5
     960:	b8 01       	movw	r22, r16
     962:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     966:	89 85       	ldd	r24, Y+9	; 0x09
     968:	82 30       	cpi	r24, 0x02	; 2
     96a:	40 f0       	brcs	.+16     	; 0x97c <__gesf2+0x56>
     96c:	89 89       	ldd	r24, Y+17	; 0x11
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	28 f0       	brcs	.+10     	; 0x97c <__gesf2+0x56>
     972:	c7 01       	movw	r24, r14
     974:	b8 01       	movw	r22, r16
     976:	0e 94 15 08 	call	0x102a	; 0x102a <__fpcmp_parts_f>
     97a:	01 c0       	rjmp	.+2      	; 0x97e <__gesf2+0x58>
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	68 96       	adiw	r28, 0x18	; 24
     980:	e6 e0       	ldi	r30, 0x06	; 6
     982:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__epilogue_restores__+0x18>

00000986 <__ltsf2>:
     986:	a8 e1       	ldi	r26, 0x18	; 24
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	e9 ec       	ldi	r30, 0xC9	; 201
     98c:	f4 e0       	ldi	r31, 0x04	; 4
     98e:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__prologue_saves__+0x18>
     992:	69 83       	std	Y+1, r22	; 0x01
     994:	7a 83       	std	Y+2, r23	; 0x02
     996:	8b 83       	std	Y+3, r24	; 0x03
     998:	9c 83       	std	Y+4, r25	; 0x04
     99a:	2d 83       	std	Y+5, r18	; 0x05
     99c:	3e 83       	std	Y+6, r19	; 0x06
     99e:	4f 83       	std	Y+7, r20	; 0x07
     9a0:	58 87       	std	Y+8, r21	; 0x08
     9a2:	89 e0       	ldi	r24, 0x09	; 9
     9a4:	e8 2e       	mov	r14, r24
     9a6:	f1 2c       	mov	r15, r1
     9a8:	ec 0e       	add	r14, r28
     9aa:	fd 1e       	adc	r15, r29
     9ac:	ce 01       	movw	r24, r28
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	b7 01       	movw	r22, r14
     9b2:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     9b6:	8e 01       	movw	r16, r28
     9b8:	0f 5e       	subi	r16, 0xEF	; 239
     9ba:	1f 4f       	sbci	r17, 0xFF	; 255
     9bc:	ce 01       	movw	r24, r28
     9be:	05 96       	adiw	r24, 0x05	; 5
     9c0:	b8 01       	movw	r22, r16
     9c2:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     9c6:	89 85       	ldd	r24, Y+9	; 0x09
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	40 f0       	brcs	.+16     	; 0x9dc <__ltsf2+0x56>
     9cc:	89 89       	ldd	r24, Y+17	; 0x11
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	28 f0       	brcs	.+10     	; 0x9dc <__ltsf2+0x56>
     9d2:	c7 01       	movw	r24, r14
     9d4:	b8 01       	movw	r22, r16
     9d6:	0e 94 15 08 	call	0x102a	; 0x102a <__fpcmp_parts_f>
     9da:	01 c0       	rjmp	.+2      	; 0x9de <__ltsf2+0x58>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	68 96       	adiw	r28, 0x18	; 24
     9e0:	e6 e0       	ldi	r30, 0x06	; 6
     9e2:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__epilogue_restores__+0x18>

000009e6 <__lesf2>:
     9e6:	a8 e1       	ldi	r26, 0x18	; 24
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	e9 ef       	ldi	r30, 0xF9	; 249
     9ec:	f4 e0       	ldi	r31, 0x04	; 4
     9ee:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__prologue_saves__+0x18>
     9f2:	69 83       	std	Y+1, r22	; 0x01
     9f4:	7a 83       	std	Y+2, r23	; 0x02
     9f6:	8b 83       	std	Y+3, r24	; 0x03
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	2d 83       	std	Y+5, r18	; 0x05
     9fc:	3e 83       	std	Y+6, r19	; 0x06
     9fe:	4f 83       	std	Y+7, r20	; 0x07
     a00:	58 87       	std	Y+8, r21	; 0x08
     a02:	89 e0       	ldi	r24, 0x09	; 9
     a04:	e8 2e       	mov	r14, r24
     a06:	f1 2c       	mov	r15, r1
     a08:	ec 0e       	add	r14, r28
     a0a:	fd 1e       	adc	r15, r29
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	b7 01       	movw	r22, r14
     a12:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     a16:	8e 01       	movw	r16, r28
     a18:	0f 5e       	subi	r16, 0xEF	; 239
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255
     a1c:	ce 01       	movw	r24, r28
     a1e:	05 96       	adiw	r24, 0x05	; 5
     a20:	b8 01       	movw	r22, r16
     a22:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     a26:	89 85       	ldd	r24, Y+9	; 0x09
     a28:	82 30       	cpi	r24, 0x02	; 2
     a2a:	40 f0       	brcs	.+16     	; 0xa3c <__lesf2+0x56>
     a2c:	89 89       	ldd	r24, Y+17	; 0x11
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	28 f0       	brcs	.+10     	; 0xa3c <__lesf2+0x56>
     a32:	c7 01       	movw	r24, r14
     a34:	b8 01       	movw	r22, r16
     a36:	0e 94 15 08 	call	0x102a	; 0x102a <__fpcmp_parts_f>
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__lesf2+0x58>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	68 96       	adiw	r28, 0x18	; 24
     a40:	e6 e0       	ldi	r30, 0x06	; 6
     a42:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__epilogue_restores__+0x18>

00000a46 <__unordsf2>:
     a46:	a8 e1       	ldi	r26, 0x18	; 24
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e9 e2       	ldi	r30, 0x29	; 41
     a4c:	f5 e0       	ldi	r31, 0x05	; 5
     a4e:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x20>
     a52:	69 83       	std	Y+1, r22	; 0x01
     a54:	7a 83       	std	Y+2, r23	; 0x02
     a56:	8b 83       	std	Y+3, r24	; 0x03
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	2d 83       	std	Y+5, r18	; 0x05
     a5c:	3e 83       	std	Y+6, r19	; 0x06
     a5e:	4f 83       	std	Y+7, r20	; 0x07
     a60:	58 87       	std	Y+8, r21	; 0x08
     a62:	ce 01       	movw	r24, r28
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	be 01       	movw	r22, r28
     a68:	67 5f       	subi	r22, 0xF7	; 247
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     a70:	ce 01       	movw	r24, r28
     a72:	05 96       	adiw	r24, 0x05	; 5
     a74:	be 01       	movw	r22, r28
     a76:	6f 5e       	subi	r22, 0xEF	; 239
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     a7e:	89 85       	ldd	r24, Y+9	; 0x09
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	28 f0       	brcs	.+10     	; 0xa8e <__unordsf2+0x48>
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	89 89       	ldd	r24, Y+17	; 0x11
     a8a:	82 30       	cpi	r24, 0x02	; 2
     a8c:	10 f4       	brcc	.+4      	; 0xa92 <__unordsf2+0x4c>
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	82 2f       	mov	r24, r18
     a94:	68 96       	adiw	r28, 0x18	; 24
     a96:	e2 e0       	ldi	r30, 0x02	; 2
     a98:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x20>

00000a9c <__floatsisf>:
     a9c:	a8 e0       	ldi	r26, 0x08	; 8
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e4 e5       	ldi	r30, 0x54	; 84
     aa2:	f5 e0       	ldi	r31, 0x05	; 5
     aa4:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x12>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	da 01       	movw	r26, r20
     ab2:	c9 01       	movw	r24, r18
     ab4:	88 27       	eor	r24, r24
     ab6:	b7 fd       	sbrc	r27, 7
     ab8:	83 95       	inc	r24
     aba:	99 27       	eor	r25, r25
     abc:	aa 27       	eor	r26, r26
     abe:	bb 27       	eor	r27, r27
     ac0:	b8 2e       	mov	r11, r24
     ac2:	21 15       	cp	r18, r1
     ac4:	31 05       	cpc	r19, r1
     ac6:	41 05       	cpc	r20, r1
     ac8:	51 05       	cpc	r21, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__floatsisf+0x36>
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	3a c0       	rjmp	.+116    	; 0xb46 <__floatsisf+0xaa>
     ad2:	88 23       	and	r24, r24
     ad4:	a9 f0       	breq	.+42     	; 0xb00 <__floatsisf+0x64>
     ad6:	20 30       	cpi	r18, 0x00	; 0
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	38 07       	cpc	r19, r24
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	48 07       	cpc	r20, r24
     ae0:	80 e8       	ldi	r24, 0x80	; 128
     ae2:	58 07       	cpc	r21, r24
     ae4:	29 f4       	brne	.+10     	; 0xaf0 <__floatsisf+0x54>
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	9f ec       	ldi	r25, 0xCF	; 207
     aee:	30 c0       	rjmp	.+96     	; 0xb50 <__floatsisf+0xb4>
     af0:	ee 24       	eor	r14, r14
     af2:	ff 24       	eor	r15, r15
     af4:	87 01       	movw	r16, r14
     af6:	e2 1a       	sub	r14, r18
     af8:	f3 0a       	sbc	r15, r19
     afa:	04 0b       	sbc	r16, r20
     afc:	15 0b       	sbc	r17, r21
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <__floatsisf+0x68>
     b00:	79 01       	movw	r14, r18
     b02:	8a 01       	movw	r16, r20
     b04:	8e e1       	ldi	r24, 0x1E	; 30
     b06:	c8 2e       	mov	r12, r24
     b08:	d1 2c       	mov	r13, r1
     b0a:	dc 82       	std	Y+4, r13	; 0x04
     b0c:	cb 82       	std	Y+3, r12	; 0x03
     b0e:	ed 82       	std	Y+5, r14	; 0x05
     b10:	fe 82       	std	Y+6, r15	; 0x06
     b12:	0f 83       	std	Y+7, r16	; 0x07
     b14:	18 87       	std	Y+8, r17	; 0x08
     b16:	c8 01       	movw	r24, r16
     b18:	b7 01       	movw	r22, r14
     b1a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__clzsi2>
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	18 16       	cp	r1, r24
     b22:	19 06       	cpc	r1, r25
     b24:	84 f4       	brge	.+32     	; 0xb46 <__floatsisf+0xaa>
     b26:	08 2e       	mov	r0, r24
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__floatsisf+0x96>
     b2a:	ee 0c       	add	r14, r14
     b2c:	ff 1c       	adc	r15, r15
     b2e:	00 1f       	adc	r16, r16
     b30:	11 1f       	adc	r17, r17
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__floatsisf+0x8e>
     b36:	ed 82       	std	Y+5, r14	; 0x05
     b38:	fe 82       	std	Y+6, r15	; 0x06
     b3a:	0f 83       	std	Y+7, r16	; 0x07
     b3c:	18 87       	std	Y+8, r17	; 0x08
     b3e:	c8 1a       	sub	r12, r24
     b40:	d9 0a       	sbc	r13, r25
     b42:	dc 82       	std	Y+4, r13	; 0x04
     b44:	cb 82       	std	Y+3, r12	; 0x03
     b46:	ba 82       	std	Y+2, r11	; 0x02
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	0e 94 c8 06 	call	0xd90	; 0xd90 <__pack_f>
     b50:	28 96       	adiw	r28, 0x08	; 8
     b52:	e9 e0       	ldi	r30, 0x09	; 9
     b54:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x12>

00000b58 <__fixsfsi>:
     b58:	ac e0       	ldi	r26, 0x0C	; 12
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e2 eb       	ldi	r30, 0xB2	; 178
     b5e:	f5 e0       	ldi	r31, 0x05	; 5
     b60:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__prologue_saves__+0x20>
     b64:	69 83       	std	Y+1, r22	; 0x01
     b66:	7a 83       	std	Y+2, r23	; 0x02
     b68:	8b 83       	std	Y+3, r24	; 0x03
     b6a:	9c 83       	std	Y+4, r25	; 0x04
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	be 01       	movw	r22, r28
     b72:	6b 5f       	subi	r22, 0xFB	; 251
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__unpack_f>
     b7a:	8d 81       	ldd	r24, Y+5	; 0x05
     b7c:	82 30       	cpi	r24, 0x02	; 2
     b7e:	61 f1       	breq	.+88     	; 0xbd8 <__fixsfsi+0x80>
     b80:	82 30       	cpi	r24, 0x02	; 2
     b82:	50 f1       	brcs	.+84     	; 0xbd8 <__fixsfsi+0x80>
     b84:	84 30       	cpi	r24, 0x04	; 4
     b86:	21 f4       	brne	.+8      	; 0xb90 <__fixsfsi+0x38>
     b88:	8e 81       	ldd	r24, Y+6	; 0x06
     b8a:	88 23       	and	r24, r24
     b8c:	51 f1       	breq	.+84     	; 0xbe2 <__fixsfsi+0x8a>
     b8e:	2e c0       	rjmp	.+92     	; 0xbec <__fixsfsi+0x94>
     b90:	2f 81       	ldd	r18, Y+7	; 0x07
     b92:	38 85       	ldd	r19, Y+8	; 0x08
     b94:	37 fd       	sbrc	r19, 7
     b96:	20 c0       	rjmp	.+64     	; 0xbd8 <__fixsfsi+0x80>
     b98:	6e 81       	ldd	r22, Y+6	; 0x06
     b9a:	2f 31       	cpi	r18, 0x1F	; 31
     b9c:	31 05       	cpc	r19, r1
     b9e:	1c f0       	brlt	.+6      	; 0xba6 <__fixsfsi+0x4e>
     ba0:	66 23       	and	r22, r22
     ba2:	f9 f0       	breq	.+62     	; 0xbe2 <__fixsfsi+0x8a>
     ba4:	23 c0       	rjmp	.+70     	; 0xbec <__fixsfsi+0x94>
     ba6:	8e e1       	ldi	r24, 0x1E	; 30
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	82 1b       	sub	r24, r18
     bac:	93 0b       	sbc	r25, r19
     bae:	29 85       	ldd	r18, Y+9	; 0x09
     bb0:	3a 85       	ldd	r19, Y+10	; 0x0a
     bb2:	4b 85       	ldd	r20, Y+11	; 0x0b
     bb4:	5c 85       	ldd	r21, Y+12	; 0x0c
     bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <__fixsfsi+0x68>
     bb8:	56 95       	lsr	r21
     bba:	47 95       	ror	r20
     bbc:	37 95       	ror	r19
     bbe:	27 95       	ror	r18
     bc0:	8a 95       	dec	r24
     bc2:	d2 f7       	brpl	.-12     	; 0xbb8 <__fixsfsi+0x60>
     bc4:	66 23       	and	r22, r22
     bc6:	b1 f0       	breq	.+44     	; 0xbf4 <__fixsfsi+0x9c>
     bc8:	50 95       	com	r21
     bca:	40 95       	com	r20
     bcc:	30 95       	com	r19
     bce:	21 95       	neg	r18
     bd0:	3f 4f       	sbci	r19, 0xFF	; 255
     bd2:	4f 4f       	sbci	r20, 0xFF	; 255
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
     bd6:	0e c0       	rjmp	.+28     	; 0xbf4 <__fixsfsi+0x9c>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	09 c0       	rjmp	.+18     	; 0xbf4 <__fixsfsi+0x9c>
     be2:	2f ef       	ldi	r18, 0xFF	; 255
     be4:	3f ef       	ldi	r19, 0xFF	; 255
     be6:	4f ef       	ldi	r20, 0xFF	; 255
     be8:	5f e7       	ldi	r21, 0x7F	; 127
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <__fixsfsi+0x9c>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	50 e8       	ldi	r21, 0x80	; 128
     bf4:	b9 01       	movw	r22, r18
     bf6:	ca 01       	movw	r24, r20
     bf8:	2c 96       	adiw	r28, 0x0c	; 12
     bfa:	e2 e0       	ldi	r30, 0x02	; 2
     bfc:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__epilogue_restores__+0x20>

00000c00 <__floatunsisf>:
     c00:	a8 e0       	ldi	r26, 0x08	; 8
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e6 e0       	ldi	r30, 0x06	; 6
     c06:	f6 e0       	ldi	r31, 0x06	; 6
     c08:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__prologue_saves__+0x10>
     c0c:	7b 01       	movw	r14, r22
     c0e:	8c 01       	movw	r16, r24
     c10:	61 15       	cp	r22, r1
     c12:	71 05       	cpc	r23, r1
     c14:	81 05       	cpc	r24, r1
     c16:	91 05       	cpc	r25, r1
     c18:	19 f4       	brne	.+6      	; 0xc20 <__floatunsisf+0x20>
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	89 83       	std	Y+1, r24	; 0x01
     c1e:	60 c0       	rjmp	.+192    	; 0xce0 <__floatunsisf+0xe0>
     c20:	83 e0       	ldi	r24, 0x03	; 3
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	8e e1       	ldi	r24, 0x1E	; 30
     c26:	c8 2e       	mov	r12, r24
     c28:	d1 2c       	mov	r13, r1
     c2a:	dc 82       	std	Y+4, r13	; 0x04
     c2c:	cb 82       	std	Y+3, r12	; 0x03
     c2e:	ed 82       	std	Y+5, r14	; 0x05
     c30:	fe 82       	std	Y+6, r15	; 0x06
     c32:	0f 83       	std	Y+7, r16	; 0x07
     c34:	18 87       	std	Y+8, r17	; 0x08
     c36:	c8 01       	movw	r24, r16
     c38:	b7 01       	movw	r22, r14
     c3a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__clzsi2>
     c3e:	fc 01       	movw	r30, r24
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	f7 ff       	sbrs	r31, 7
     c44:	3b c0       	rjmp	.+118    	; 0xcbc <__floatunsisf+0xbc>
     c46:	22 27       	eor	r18, r18
     c48:	33 27       	eor	r19, r19
     c4a:	2e 1b       	sub	r18, r30
     c4c:	3f 0b       	sbc	r19, r31
     c4e:	57 01       	movw	r10, r14
     c50:	68 01       	movw	r12, r16
     c52:	02 2e       	mov	r0, r18
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__floatunsisf+0x5e>
     c56:	d6 94       	lsr	r13
     c58:	c7 94       	ror	r12
     c5a:	b7 94       	ror	r11
     c5c:	a7 94       	ror	r10
     c5e:	0a 94       	dec	r0
     c60:	d2 f7       	brpl	.-12     	; 0xc56 <__floatunsisf+0x56>
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	a0 e0       	ldi	r26, 0x00	; 0
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <__floatunsisf+0x7c>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	aa 1f       	adc	r26, r26
     c7a:	bb 1f       	adc	r27, r27
     c7c:	2a 95       	dec	r18
     c7e:	d2 f7       	brpl	.-12     	; 0xc74 <__floatunsisf+0x74>
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	a1 09       	sbc	r26, r1
     c84:	b1 09       	sbc	r27, r1
     c86:	8e 21       	and	r24, r14
     c88:	9f 21       	and	r25, r15
     c8a:	a0 23       	and	r26, r16
     c8c:	b1 23       	and	r27, r17
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	a1 05       	cpc	r26, r1
     c92:	b1 05       	cpc	r27, r1
     c94:	21 f0       	breq	.+8      	; 0xc9e <__floatunsisf+0x9e>
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	4a 29       	or	r20, r10
     ca0:	5b 29       	or	r21, r11
     ca2:	6c 29       	or	r22, r12
     ca4:	7d 29       	or	r23, r13
     ca6:	4d 83       	std	Y+5, r20	; 0x05
     ca8:	5e 83       	std	Y+6, r21	; 0x06
     caa:	6f 83       	std	Y+7, r22	; 0x07
     cac:	78 87       	std	Y+8, r23	; 0x08
     cae:	8e e1       	ldi	r24, 0x1E	; 30
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	8e 1b       	sub	r24, r30
     cb4:	9f 0b       	sbc	r25, r31
     cb6:	9c 83       	std	Y+4, r25	; 0x04
     cb8:	8b 83       	std	Y+3, r24	; 0x03
     cba:	12 c0       	rjmp	.+36     	; 0xce0 <__floatunsisf+0xe0>
     cbc:	30 97       	sbiw	r30, 0x00	; 0
     cbe:	81 f0       	breq	.+32     	; 0xce0 <__floatunsisf+0xe0>
     cc0:	0e 2e       	mov	r0, r30
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <__floatunsisf+0xcc>
     cc4:	ee 0c       	add	r14, r14
     cc6:	ff 1c       	adc	r15, r15
     cc8:	00 1f       	adc	r16, r16
     cca:	11 1f       	adc	r17, r17
     ccc:	0a 94       	dec	r0
     cce:	d2 f7       	brpl	.-12     	; 0xcc4 <__floatunsisf+0xc4>
     cd0:	ed 82       	std	Y+5, r14	; 0x05
     cd2:	fe 82       	std	Y+6, r15	; 0x06
     cd4:	0f 83       	std	Y+7, r16	; 0x07
     cd6:	18 87       	std	Y+8, r17	; 0x08
     cd8:	ce 1a       	sub	r12, r30
     cda:	df 0a       	sbc	r13, r31
     cdc:	dc 82       	std	Y+4, r13	; 0x04
     cde:	cb 82       	std	Y+3, r12	; 0x03
     ce0:	1a 82       	std	Y+2, r1	; 0x02
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	0e 94 c8 06 	call	0xd90	; 0xd90 <__pack_f>
     cea:	28 96       	adiw	r28, 0x08	; 8
     cec:	ea e0       	ldi	r30, 0x0A	; 10
     cee:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__epilogue_restores__+0x10>

00000cf2 <__clzsi2>:
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	7b 01       	movw	r14, r22
     cfc:	8c 01       	movw	r16, r24
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	e8 16       	cp	r14, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	f8 06       	cpc	r15, r24
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	08 07       	cpc	r16, r24
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	18 07       	cpc	r17, r24
     d0e:	88 f4       	brcc	.+34     	; 0xd32 <__clzsi2+0x40>
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	e8 16       	cp	r14, r24
     d14:	f1 04       	cpc	r15, r1
     d16:	01 05       	cpc	r16, r1
     d18:	11 05       	cpc	r17, r1
     d1a:	31 f0       	breq	.+12     	; 0xd28 <__clzsi2+0x36>
     d1c:	28 f0       	brcs	.+10     	; 0xd28 <__clzsi2+0x36>
     d1e:	88 e0       	ldi	r24, 0x08	; 8
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a0 e0       	ldi	r26, 0x00	; 0
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	17 c0       	rjmp	.+46     	; 0xd56 <__clzsi2+0x64>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	12 c0       	rjmp	.+36     	; 0xd56 <__clzsi2+0x64>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	e8 16       	cp	r14, r24
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	f8 06       	cpc	r15, r24
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	08 07       	cpc	r16, r24
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	18 07       	cpc	r17, r24
     d42:	28 f0       	brcs	.+10     	; 0xd4e <__clzsi2+0x5c>
     d44:	88 e1       	ldi	r24, 0x18	; 24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	04 c0       	rjmp	.+8      	; 0xd56 <__clzsi2+0x64>
     d4e:	80 e1       	ldi	r24, 0x10	; 16
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	20 e2       	ldi	r18, 0x20	; 32
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	28 1b       	sub	r18, r24
     d60:	39 0b       	sbc	r19, r25
     d62:	4a 0b       	sbc	r20, r26
     d64:	5b 0b       	sbc	r21, r27
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <__clzsi2+0x7e>
     d68:	16 95       	lsr	r17
     d6a:	07 95       	ror	r16
     d6c:	f7 94       	ror	r15
     d6e:	e7 94       	ror	r14
     d70:	8a 95       	dec	r24
     d72:	d2 f7       	brpl	.-12     	; 0xd68 <__clzsi2+0x76>
     d74:	f7 01       	movw	r30, r14
     d76:	e9 5e       	subi	r30, 0xE9	; 233
     d78:	fd 4f       	sbci	r31, 0xFD	; 253
     d7a:	80 81       	ld	r24, Z
     d7c:	28 1b       	sub	r18, r24
     d7e:	31 09       	sbc	r19, r1
     d80:	41 09       	sbc	r20, r1
     d82:	51 09       	sbc	r21, r1
     d84:	c9 01       	movw	r24, r18
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	08 95       	ret

00000d90 <__pack_f>:
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	fc 01       	movw	r30, r24
     d9c:	e4 80       	ldd	r14, Z+4	; 0x04
     d9e:	f5 80       	ldd	r15, Z+5	; 0x05
     da0:	06 81       	ldd	r16, Z+6	; 0x06
     da2:	17 81       	ldd	r17, Z+7	; 0x07
     da4:	d1 80       	ldd	r13, Z+1	; 0x01
     da6:	80 81       	ld	r24, Z
     da8:	82 30       	cpi	r24, 0x02	; 2
     daa:	48 f4       	brcc	.+18     	; 0xdbe <__pack_f+0x2e>
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	a0 e1       	ldi	r26, 0x10	; 16
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e8 2a       	or	r14, r24
     db6:	f9 2a       	or	r15, r25
     db8:	0a 2b       	or	r16, r26
     dba:	1b 2b       	or	r17, r27
     dbc:	a5 c0       	rjmp	.+330    	; 0xf08 <__pack_f+0x178>
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <__pack_f+0x34>
     dc2:	9f c0       	rjmp	.+318    	; 0xf02 <__pack_f+0x172>
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <__pack_f+0x40>
     dc8:	ee 24       	eor	r14, r14
     dca:	ff 24       	eor	r15, r15
     dcc:	87 01       	movw	r16, r14
     dce:	05 c0       	rjmp	.+10     	; 0xdda <__pack_f+0x4a>
     dd0:	e1 14       	cp	r14, r1
     dd2:	f1 04       	cpc	r15, r1
     dd4:	01 05       	cpc	r16, r1
     dd6:	11 05       	cpc	r17, r1
     dd8:	19 f4       	brne	.+6      	; 0xde0 <__pack_f+0x50>
     dda:	e0 e0       	ldi	r30, 0x00	; 0
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	96 c0       	rjmp	.+300    	; 0xf0c <__pack_f+0x17c>
     de0:	62 81       	ldd	r22, Z+2	; 0x02
     de2:	73 81       	ldd	r23, Z+3	; 0x03
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	62 38       	cpi	r22, 0x82	; 130
     de8:	79 07       	cpc	r23, r25
     dea:	0c f0       	brlt	.+2      	; 0xdee <__pack_f+0x5e>
     dec:	5b c0       	rjmp	.+182    	; 0xea4 <__pack_f+0x114>
     dee:	22 e8       	ldi	r18, 0x82	; 130
     df0:	3f ef       	ldi	r19, 0xFF	; 255
     df2:	26 1b       	sub	r18, r22
     df4:	37 0b       	sbc	r19, r23
     df6:	2a 31       	cpi	r18, 0x1A	; 26
     df8:	31 05       	cpc	r19, r1
     dfa:	2c f0       	brlt	.+10     	; 0xe06 <__pack_f+0x76>
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	2a c0       	rjmp	.+84     	; 0xe5a <__pack_f+0xca>
     e06:	b8 01       	movw	r22, r16
     e08:	a7 01       	movw	r20, r14
     e0a:	02 2e       	mov	r0, r18
     e0c:	04 c0       	rjmp	.+8      	; 0xe16 <__pack_f+0x86>
     e0e:	76 95       	lsr	r23
     e10:	67 95       	ror	r22
     e12:	57 95       	ror	r21
     e14:	47 95       	ror	r20
     e16:	0a 94       	dec	r0
     e18:	d2 f7       	brpl	.-12     	; 0xe0e <__pack_f+0x7e>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <__pack_f+0x9c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	aa 1f       	adc	r26, r26
     e2a:	bb 1f       	adc	r27, r27
     e2c:	2a 95       	dec	r18
     e2e:	d2 f7       	brpl	.-12     	; 0xe24 <__pack_f+0x94>
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	a1 09       	sbc	r26, r1
     e34:	b1 09       	sbc	r27, r1
     e36:	8e 21       	and	r24, r14
     e38:	9f 21       	and	r25, r15
     e3a:	a0 23       	and	r26, r16
     e3c:	b1 23       	and	r27, r17
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	a1 05       	cpc	r26, r1
     e42:	b1 05       	cpc	r27, r1
     e44:	21 f0       	breq	.+8      	; 0xe4e <__pack_f+0xbe>
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	a0 e0       	ldi	r26, 0x00	; 0
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	9a 01       	movw	r18, r20
     e50:	ab 01       	movw	r20, r22
     e52:	28 2b       	or	r18, r24
     e54:	39 2b       	or	r19, r25
     e56:	4a 2b       	or	r20, r26
     e58:	5b 2b       	or	r21, r27
     e5a:	da 01       	movw	r26, r20
     e5c:	c9 01       	movw	r24, r18
     e5e:	8f 77       	andi	r24, 0x7F	; 127
     e60:	90 70       	andi	r25, 0x00	; 0
     e62:	a0 70       	andi	r26, 0x00	; 0
     e64:	b0 70       	andi	r27, 0x00	; 0
     e66:	80 34       	cpi	r24, 0x40	; 64
     e68:	91 05       	cpc	r25, r1
     e6a:	a1 05       	cpc	r26, r1
     e6c:	b1 05       	cpc	r27, r1
     e6e:	39 f4       	brne	.+14     	; 0xe7e <__pack_f+0xee>
     e70:	27 ff       	sbrs	r18, 7
     e72:	09 c0       	rjmp	.+18     	; 0xe86 <__pack_f+0xf6>
     e74:	20 5c       	subi	r18, 0xC0	; 192
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	4f 4f       	sbci	r20, 0xFF	; 255
     e7a:	5f 4f       	sbci	r21, 0xFF	; 255
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <__pack_f+0xf6>
     e7e:	21 5c       	subi	r18, 0xC1	; 193
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	4f 4f       	sbci	r20, 0xFF	; 255
     e84:	5f 4f       	sbci	r21, 0xFF	; 255
     e86:	e0 e0       	ldi	r30, 0x00	; 0
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	20 30       	cpi	r18, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	3a 07       	cpc	r19, r26
     e90:	a0 e0       	ldi	r26, 0x00	; 0
     e92:	4a 07       	cpc	r20, r26
     e94:	a0 e4       	ldi	r26, 0x40	; 64
     e96:	5a 07       	cpc	r21, r26
     e98:	10 f0       	brcs	.+4      	; 0xe9e <__pack_f+0x10e>
     e9a:	e1 e0       	ldi	r30, 0x01	; 1
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	79 01       	movw	r14, r18
     ea0:	8a 01       	movw	r16, r20
     ea2:	27 c0       	rjmp	.+78     	; 0xef2 <__pack_f+0x162>
     ea4:	60 38       	cpi	r22, 0x80	; 128
     ea6:	71 05       	cpc	r23, r1
     ea8:	64 f5       	brge	.+88     	; 0xf02 <__pack_f+0x172>
     eaa:	fb 01       	movw	r30, r22
     eac:	e1 58       	subi	r30, 0x81	; 129
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	d8 01       	movw	r26, r16
     eb2:	c7 01       	movw	r24, r14
     eb4:	8f 77       	andi	r24, 0x7F	; 127
     eb6:	90 70       	andi	r25, 0x00	; 0
     eb8:	a0 70       	andi	r26, 0x00	; 0
     eba:	b0 70       	andi	r27, 0x00	; 0
     ebc:	80 34       	cpi	r24, 0x40	; 64
     ebe:	91 05       	cpc	r25, r1
     ec0:	a1 05       	cpc	r26, r1
     ec2:	b1 05       	cpc	r27, r1
     ec4:	39 f4       	brne	.+14     	; 0xed4 <__pack_f+0x144>
     ec6:	e7 fe       	sbrs	r14, 7
     ec8:	0d c0       	rjmp	.+26     	; 0xee4 <__pack_f+0x154>
     eca:	80 e4       	ldi	r24, 0x40	; 64
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a0 e0       	ldi	r26, 0x00	; 0
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <__pack_f+0x14c>
     ed4:	8f e3       	ldi	r24, 0x3F	; 63
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e8 0e       	add	r14, r24
     ede:	f9 1e       	adc	r15, r25
     ee0:	0a 1f       	adc	r16, r26
     ee2:	1b 1f       	adc	r17, r27
     ee4:	17 ff       	sbrs	r17, 7
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <__pack_f+0x162>
     ee8:	16 95       	lsr	r17
     eea:	07 95       	ror	r16
     eec:	f7 94       	ror	r15
     eee:	e7 94       	ror	r14
     ef0:	31 96       	adiw	r30, 0x01	; 1
     ef2:	87 e0       	ldi	r24, 0x07	; 7
     ef4:	16 95       	lsr	r17
     ef6:	07 95       	ror	r16
     ef8:	f7 94       	ror	r15
     efa:	e7 94       	ror	r14
     efc:	8a 95       	dec	r24
     efe:	d1 f7       	brne	.-12     	; 0xef4 <__pack_f+0x164>
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <__pack_f+0x17c>
     f02:	ee 24       	eor	r14, r14
     f04:	ff 24       	eor	r15, r15
     f06:	87 01       	movw	r16, r14
     f08:	ef ef       	ldi	r30, 0xFF	; 255
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	6e 2f       	mov	r22, r30
     f0e:	67 95       	ror	r22
     f10:	66 27       	eor	r22, r22
     f12:	67 95       	ror	r22
     f14:	90 2f       	mov	r25, r16
     f16:	9f 77       	andi	r25, 0x7F	; 127
     f18:	d7 94       	ror	r13
     f1a:	dd 24       	eor	r13, r13
     f1c:	d7 94       	ror	r13
     f1e:	8e 2f       	mov	r24, r30
     f20:	86 95       	lsr	r24
     f22:	49 2f       	mov	r20, r25
     f24:	46 2b       	or	r20, r22
     f26:	58 2f       	mov	r21, r24
     f28:	5d 29       	or	r21, r13
     f2a:	b7 01       	movw	r22, r14
     f2c:	ca 01       	movw	r24, r20
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	08 95       	ret

00000f3a <__unpack_f>:
     f3a:	fc 01       	movw	r30, r24
     f3c:	db 01       	movw	r26, r22
     f3e:	40 81       	ld	r20, Z
     f40:	51 81       	ldd	r21, Z+1	; 0x01
     f42:	22 81       	ldd	r18, Z+2	; 0x02
     f44:	62 2f       	mov	r22, r18
     f46:	6f 77       	andi	r22, 0x7F	; 127
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	22 1f       	adc	r18, r18
     f4c:	22 27       	eor	r18, r18
     f4e:	22 1f       	adc	r18, r18
     f50:	93 81       	ldd	r25, Z+3	; 0x03
     f52:	89 2f       	mov	r24, r25
     f54:	88 0f       	add	r24, r24
     f56:	82 2b       	or	r24, r18
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	99 1f       	adc	r25, r25
     f5e:	99 27       	eor	r25, r25
     f60:	99 1f       	adc	r25, r25
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	9c 93       	st	X, r25
     f66:	11 97       	sbiw	r26, 0x01	; 1
     f68:	21 15       	cp	r18, r1
     f6a:	31 05       	cpc	r19, r1
     f6c:	a9 f5       	brne	.+106    	; 0xfd8 <__unpack_f+0x9e>
     f6e:	41 15       	cp	r20, r1
     f70:	51 05       	cpc	r21, r1
     f72:	61 05       	cpc	r22, r1
     f74:	71 05       	cpc	r23, r1
     f76:	11 f4       	brne	.+4      	; 0xf7c <__unpack_f+0x42>
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	37 c0       	rjmp	.+110    	; 0xfea <__unpack_f+0xb0>
     f7c:	82 e8       	ldi	r24, 0x82	; 130
     f7e:	9f ef       	ldi	r25, 0xFF	; 255
     f80:	13 96       	adiw	r26, 0x03	; 3
     f82:	9c 93       	st	X, r25
     f84:	8e 93       	st	-X, r24
     f86:	12 97       	sbiw	r26, 0x02	; 2
     f88:	9a 01       	movw	r18, r20
     f8a:	ab 01       	movw	r20, r22
     f8c:	67 e0       	ldi	r22, 0x07	; 7
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	44 1f       	adc	r20, r20
     f94:	55 1f       	adc	r21, r21
     f96:	6a 95       	dec	r22
     f98:	d1 f7       	brne	.-12     	; 0xf8e <__unpack_f+0x54>
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	8c 93       	st	X, r24
     f9e:	0d c0       	rjmp	.+26     	; 0xfba <__unpack_f+0x80>
     fa0:	22 0f       	add	r18, r18
     fa2:	33 1f       	adc	r19, r19
     fa4:	44 1f       	adc	r20, r20
     fa6:	55 1f       	adc	r21, r21
     fa8:	12 96       	adiw	r26, 0x02	; 2
     faa:	8d 91       	ld	r24, X+
     fac:	9c 91       	ld	r25, X
     fae:	13 97       	sbiw	r26, 0x03	; 3
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	13 96       	adiw	r26, 0x03	; 3
     fb4:	9c 93       	st	X, r25
     fb6:	8e 93       	st	-X, r24
     fb8:	12 97       	sbiw	r26, 0x02	; 2
     fba:	20 30       	cpi	r18, 0x00	; 0
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	38 07       	cpc	r19, r24
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	48 07       	cpc	r20, r24
     fc4:	80 e4       	ldi	r24, 0x40	; 64
     fc6:	58 07       	cpc	r21, r24
     fc8:	58 f3       	brcs	.-42     	; 0xfa0 <__unpack_f+0x66>
     fca:	14 96       	adiw	r26, 0x04	; 4
     fcc:	2d 93       	st	X+, r18
     fce:	3d 93       	st	X+, r19
     fd0:	4d 93       	st	X+, r20
     fd2:	5c 93       	st	X, r21
     fd4:	17 97       	sbiw	r26, 0x07	; 7
     fd6:	08 95       	ret
     fd8:	2f 3f       	cpi	r18, 0xFF	; 255
     fda:	31 05       	cpc	r19, r1
     fdc:	79 f4       	brne	.+30     	; 0xffc <__unpack_f+0xc2>
     fde:	41 15       	cp	r20, r1
     fe0:	51 05       	cpc	r21, r1
     fe2:	61 05       	cpc	r22, r1
     fe4:	71 05       	cpc	r23, r1
     fe6:	19 f4       	brne	.+6      	; 0xfee <__unpack_f+0xb4>
     fe8:	84 e0       	ldi	r24, 0x04	; 4
     fea:	8c 93       	st	X, r24
     fec:	08 95       	ret
     fee:	64 ff       	sbrs	r22, 4
     ff0:	03 c0       	rjmp	.+6      	; 0xff8 <__unpack_f+0xbe>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	8c 93       	st	X, r24
     ff6:	12 c0       	rjmp	.+36     	; 0x101c <__unpack_f+0xe2>
     ff8:	1c 92       	st	X, r1
     ffa:	10 c0       	rjmp	.+32     	; 0x101c <__unpack_f+0xe2>
     ffc:	2f 57       	subi	r18, 0x7F	; 127
     ffe:	30 40       	sbci	r19, 0x00	; 0
    1000:	13 96       	adiw	r26, 0x03	; 3
    1002:	3c 93       	st	X, r19
    1004:	2e 93       	st	-X, r18
    1006:	12 97       	sbiw	r26, 0x02	; 2
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	8c 93       	st	X, r24
    100c:	87 e0       	ldi	r24, 0x07	; 7
    100e:	44 0f       	add	r20, r20
    1010:	55 1f       	adc	r21, r21
    1012:	66 1f       	adc	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	8a 95       	dec	r24
    1018:	d1 f7       	brne	.-12     	; 0x100e <__unpack_f+0xd4>
    101a:	70 64       	ori	r23, 0x40	; 64
    101c:	14 96       	adiw	r26, 0x04	; 4
    101e:	4d 93       	st	X+, r20
    1020:	5d 93       	st	X+, r21
    1022:	6d 93       	st	X+, r22
    1024:	7c 93       	st	X, r23
    1026:	17 97       	sbiw	r26, 0x07	; 7
    1028:	08 95       	ret

0000102a <__fpcmp_parts_f>:
    102a:	1f 93       	push	r17
    102c:	dc 01       	movw	r26, r24
    102e:	fb 01       	movw	r30, r22
    1030:	9c 91       	ld	r25, X
    1032:	92 30       	cpi	r25, 0x02	; 2
    1034:	08 f4       	brcc	.+2      	; 0x1038 <__fpcmp_parts_f+0xe>
    1036:	47 c0       	rjmp	.+142    	; 0x10c6 <__fpcmp_parts_f+0x9c>
    1038:	80 81       	ld	r24, Z
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	08 f4       	brcc	.+2      	; 0x1040 <__fpcmp_parts_f+0x16>
    103e:	43 c0       	rjmp	.+134    	; 0x10c6 <__fpcmp_parts_f+0x9c>
    1040:	94 30       	cpi	r25, 0x04	; 4
    1042:	51 f4       	brne	.+20     	; 0x1058 <__fpcmp_parts_f+0x2e>
    1044:	11 96       	adiw	r26, 0x01	; 1
    1046:	1c 91       	ld	r17, X
    1048:	84 30       	cpi	r24, 0x04	; 4
    104a:	99 f5       	brne	.+102    	; 0x10b2 <__fpcmp_parts_f+0x88>
    104c:	81 81       	ldd	r24, Z+1	; 0x01
    104e:	68 2f       	mov	r22, r24
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	61 1b       	sub	r22, r17
    1054:	71 09       	sbc	r23, r1
    1056:	3f c0       	rjmp	.+126    	; 0x10d6 <__fpcmp_parts_f+0xac>
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	21 f0       	breq	.+8      	; 0x1064 <__fpcmp_parts_f+0x3a>
    105c:	92 30       	cpi	r25, 0x02	; 2
    105e:	31 f4       	brne	.+12     	; 0x106c <__fpcmp_parts_f+0x42>
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	b9 f1       	breq	.+110    	; 0x10d2 <__fpcmp_parts_f+0xa8>
    1064:	81 81       	ldd	r24, Z+1	; 0x01
    1066:	88 23       	and	r24, r24
    1068:	89 f1       	breq	.+98     	; 0x10cc <__fpcmp_parts_f+0xa2>
    106a:	2d c0       	rjmp	.+90     	; 0x10c6 <__fpcmp_parts_f+0x9c>
    106c:	11 96       	adiw	r26, 0x01	; 1
    106e:	1c 91       	ld	r17, X
    1070:	11 97       	sbiw	r26, 0x01	; 1
    1072:	82 30       	cpi	r24, 0x02	; 2
    1074:	f1 f0       	breq	.+60     	; 0x10b2 <__fpcmp_parts_f+0x88>
    1076:	81 81       	ldd	r24, Z+1	; 0x01
    1078:	18 17       	cp	r17, r24
    107a:	d9 f4       	brne	.+54     	; 0x10b2 <__fpcmp_parts_f+0x88>
    107c:	12 96       	adiw	r26, 0x02	; 2
    107e:	2d 91       	ld	r18, X+
    1080:	3c 91       	ld	r19, X
    1082:	13 97       	sbiw	r26, 0x03	; 3
    1084:	82 81       	ldd	r24, Z+2	; 0x02
    1086:	93 81       	ldd	r25, Z+3	; 0x03
    1088:	82 17       	cp	r24, r18
    108a:	93 07       	cpc	r25, r19
    108c:	94 f0       	brlt	.+36     	; 0x10b2 <__fpcmp_parts_f+0x88>
    108e:	28 17       	cp	r18, r24
    1090:	39 07       	cpc	r19, r25
    1092:	bc f0       	brlt	.+46     	; 0x10c2 <__fpcmp_parts_f+0x98>
    1094:	14 96       	adiw	r26, 0x04	; 4
    1096:	8d 91       	ld	r24, X+
    1098:	9d 91       	ld	r25, X+
    109a:	0d 90       	ld	r0, X+
    109c:	bc 91       	ld	r27, X
    109e:	a0 2d       	mov	r26, r0
    10a0:	24 81       	ldd	r18, Z+4	; 0x04
    10a2:	35 81       	ldd	r19, Z+5	; 0x05
    10a4:	46 81       	ldd	r20, Z+6	; 0x06
    10a6:	57 81       	ldd	r21, Z+7	; 0x07
    10a8:	28 17       	cp	r18, r24
    10aa:	39 07       	cpc	r19, r25
    10ac:	4a 07       	cpc	r20, r26
    10ae:	5b 07       	cpc	r21, r27
    10b0:	18 f4       	brcc	.+6      	; 0x10b8 <__fpcmp_parts_f+0x8e>
    10b2:	11 23       	and	r17, r17
    10b4:	41 f0       	breq	.+16     	; 0x10c6 <__fpcmp_parts_f+0x9c>
    10b6:	0a c0       	rjmp	.+20     	; 0x10cc <__fpcmp_parts_f+0xa2>
    10b8:	82 17       	cp	r24, r18
    10ba:	93 07       	cpc	r25, r19
    10bc:	a4 07       	cpc	r26, r20
    10be:	b5 07       	cpc	r27, r21
    10c0:	40 f4       	brcc	.+16     	; 0x10d2 <__fpcmp_parts_f+0xa8>
    10c2:	11 23       	and	r17, r17
    10c4:	19 f0       	breq	.+6      	; 0x10cc <__fpcmp_parts_f+0xa2>
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	05 c0       	rjmp	.+10     	; 0x10d6 <__fpcmp_parts_f+0xac>
    10cc:	6f ef       	ldi	r22, 0xFF	; 255
    10ce:	7f ef       	ldi	r23, 0xFF	; 255
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <__fpcmp_parts_f+0xac>
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	cb 01       	movw	r24, r22
    10d8:	1f 91       	pop	r17
    10da:	08 95       	ret

000010dc <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	2f 93       	push	r18
    10e8:	3f 93       	push	r19
    10ea:	8f 93       	push	r24
    10ec:	9f 93       	push	r25
    10ee:	af 93       	push	r26
    10f0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    10f2:	80 91 3c 03 	lds	r24, 0x033C
    10f6:	90 91 3d 03 	lds	r25, 0x033D
    10fa:	a0 91 3e 03 	lds	r26, 0x033E
    10fe:	b0 91 3f 03 	lds	r27, 0x033F
	unsigned char f = timer0_fract;
    1102:	30 91 40 03 	lds	r19, 0x0340

	m += MILLIS_INC;
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	a1 1d       	adc	r26, r1
    110a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    110c:	23 2f       	mov	r18, r19
    110e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1110:	2d 37       	cpi	r18, 0x7D	; 125
    1112:	20 f0       	brcs	.+8      	; 0x111c <__vector_23+0x40>
		f -= FRACT_MAX;
    1114:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	a1 1d       	adc	r26, r1
    111a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    111c:	20 93 40 03 	sts	0x0340, r18
	timer0_millis = m;
    1120:	80 93 3c 03 	sts	0x033C, r24
    1124:	90 93 3d 03 	sts	0x033D, r25
    1128:	a0 93 3e 03 	sts	0x033E, r26
    112c:	b0 93 3f 03 	sts	0x033F, r27
	timer0_overflow_count++;
    1130:	80 91 38 03 	lds	r24, 0x0338
    1134:	90 91 39 03 	lds	r25, 0x0339
    1138:	a0 91 3a 03 	lds	r26, 0x033A
    113c:	b0 91 3b 03 	lds	r27, 0x033B
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	a1 1d       	adc	r26, r1
    1144:	b1 1d       	adc	r27, r1
    1146:	80 93 38 03 	sts	0x0338, r24
    114a:	90 93 39 03 	sts	0x0339, r25
    114e:	a0 93 3a 03 	sts	0x033A, r26
    1152:	b0 93 3b 03 	sts	0x033B, r27
}
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    116c:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    116e:	f8 94       	cli
	m = timer0_millis;
    1170:	20 91 3c 03 	lds	r18, 0x033C
    1174:	30 91 3d 03 	lds	r19, 0x033D
    1178:	40 91 3e 03 	lds	r20, 0x033E
    117c:	50 91 3f 03 	lds	r21, 0x033F
	SREG = oldSREG;
    1180:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    1182:	b9 01       	movw	r22, r18
    1184:	ca 01       	movw	r24, r20
    1186:	08 95       	ret

00001188 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1188:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    118a:	f8 94       	cli
	m = timer0_overflow_count;
    118c:	20 91 38 03 	lds	r18, 0x0338
    1190:	30 91 39 03 	lds	r19, 0x0339
    1194:	40 91 3a 03 	lds	r20, 0x033A
    1198:	50 91 3b 03 	lds	r21, 0x033B
#if defined(TCNT0)
	t = TCNT0;
    119c:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    119e:	a8 9b       	sbis	0x15, 0	; 21
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <micros+0x26>
    11a2:	8f 3f       	cpi	r24, 0xFF	; 255
    11a4:	21 f0       	breq	.+8      	; 0x11ae <micros+0x26>
		m++;
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	4f 4f       	sbci	r20, 0xFF	; 255
    11ac:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    11ae:	9f bf       	out	0x3f, r25	; 63
    11b0:	54 2f       	mov	r21, r20
    11b2:	43 2f       	mov	r20, r19
    11b4:	32 2f       	mov	r19, r18
    11b6:	22 27       	eor	r18, r18
    11b8:	28 0f       	add	r18, r24
    11ba:	31 1d       	adc	r19, r1
    11bc:	41 1d       	adc	r20, r1
    11be:	51 1d       	adc	r21, r1
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	22 0f       	add	r18, r18
    11c4:	33 1f       	adc	r19, r19
    11c6:	44 1f       	adc	r20, r20
    11c8:	55 1f       	adc	r21, r21
    11ca:	8a 95       	dec	r24
    11cc:	d1 f7       	brne	.-12     	; 0x11c2 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    11ce:	b9 01       	movw	r22, r18
    11d0:	ca 01       	movw	r24, r20
    11d2:	08 95       	ret

000011d4 <delay>:

void delay(unsigned long ms)
{
    11d4:	9b 01       	movw	r18, r22
    11d6:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    11d8:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    11da:	f8 94       	cli
	m = timer0_overflow_count;
    11dc:	80 91 38 03 	lds	r24, 0x0338
    11e0:	90 91 39 03 	lds	r25, 0x0339
    11e4:	a0 91 3a 03 	lds	r26, 0x033A
    11e8:	b0 91 3b 03 	lds	r27, 0x033B
#if defined(TCNT0)
	t = TCNT0;
    11ec:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    11ee:	a8 9b       	sbis	0x15, 0	; 21
    11f0:	05 c0       	rjmp	.+10     	; 0x11fc <delay+0x28>
    11f2:	6f 3f       	cpi	r22, 0xFF	; 255
    11f4:	19 f0       	breq	.+6      	; 0x11fc <delay+0x28>
		m++;
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	a1 1d       	adc	r26, r1
    11fa:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    11fc:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    11fe:	ba 2f       	mov	r27, r26
    1200:	a9 2f       	mov	r26, r25
    1202:	98 2f       	mov	r25, r24
    1204:	88 27       	eor	r24, r24
    1206:	86 0f       	add	r24, r22
    1208:	91 1d       	adc	r25, r1
    120a:	a1 1d       	adc	r26, r1
    120c:	b1 1d       	adc	r27, r1
    120e:	62 e0       	ldi	r22, 0x02	; 2
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	aa 1f       	adc	r26, r26
    1216:	bb 1f       	adc	r27, r27
    1218:	6a 95       	dec	r22
    121a:	d1 f7       	brne	.-12     	; 0x1210 <delay+0x3c>
    121c:	bc 01       	movw	r22, r24
    121e:	2d c0       	rjmp	.+90     	; 0x127a <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1220:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1222:	f8 94       	cli
	m = timer0_overflow_count;
    1224:	80 91 38 03 	lds	r24, 0x0338
    1228:	90 91 39 03 	lds	r25, 0x0339
    122c:	a0 91 3a 03 	lds	r26, 0x033A
    1230:	b0 91 3b 03 	lds	r27, 0x033B
#if defined(TCNT0)
	t = TCNT0;
    1234:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1236:	a8 9b       	sbis	0x15, 0	; 21
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <delay+0x70>
    123a:	ef 3f       	cpi	r30, 0xFF	; 255
    123c:	19 f0       	breq	.+6      	; 0x1244 <delay+0x70>
		m++;
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	a1 1d       	adc	r26, r1
    1242:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1244:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1246:	ba 2f       	mov	r27, r26
    1248:	a9 2f       	mov	r26, r25
    124a:	98 2f       	mov	r25, r24
    124c:	88 27       	eor	r24, r24
    124e:	8e 0f       	add	r24, r30
    1250:	91 1d       	adc	r25, r1
    1252:	a1 1d       	adc	r26, r1
    1254:	b1 1d       	adc	r27, r1
    1256:	e2 e0       	ldi	r30, 0x02	; 2
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	aa 1f       	adc	r26, r26
    125e:	bb 1f       	adc	r27, r27
    1260:	ea 95       	dec	r30
    1262:	d1 f7       	brne	.-12     	; 0x1258 <delay+0x84>
    1264:	86 1b       	sub	r24, r22
    1266:	97 0b       	sbc	r25, r23
    1268:	88 5e       	subi	r24, 0xE8	; 232
    126a:	93 40       	sbci	r25, 0x03	; 3
    126c:	c8 f2       	brcs	.-78     	; 0x1220 <delay+0x4c>
			ms--;
    126e:	21 50       	subi	r18, 0x01	; 1
    1270:	30 40       	sbci	r19, 0x00	; 0
    1272:	40 40       	sbci	r20, 0x00	; 0
    1274:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1276:	68 51       	subi	r22, 0x18	; 24
    1278:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    127a:	21 15       	cp	r18, r1
    127c:	31 05       	cpc	r19, r1
    127e:	41 05       	cpc	r20, r1
    1280:	51 05       	cpc	r21, r1
    1282:	71 f6       	brne	.-100    	; 0x1220 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1284:	08 95       	ret

00001286 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	39 f0       	breq	.+14     	; 0x1298 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    1292:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <delayMicroseconds+0xe>
    1298:	08 95       	ret

0000129a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    129a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    129c:	84 b5       	in	r24, 0x24	; 36
    129e:	82 60       	ori	r24, 0x02	; 2
    12a0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    12a2:	84 b5       	in	r24, 0x24	; 36
    12a4:	81 60       	ori	r24, 0x01	; 1
    12a6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    12a8:	85 b5       	in	r24, 0x25	; 37
    12aa:	82 60       	ori	r24, 0x02	; 2
    12ac:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    12ae:	85 b5       	in	r24, 0x25	; 37
    12b0:	81 60       	ori	r24, 0x01	; 1
    12b2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    12b4:	ee e6       	ldi	r30, 0x6E	; 110
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	81 60       	ori	r24, 0x01	; 1
    12bc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    12be:	e1 e8       	ldi	r30, 0x81	; 129
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    12c4:	80 81       	ld	r24, Z
    12c6:	82 60       	ori	r24, 0x02	; 2
    12c8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    12ca:	80 81       	ld	r24, Z
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    12d0:	e0 e8       	ldi	r30, 0x80	; 128
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	81 60       	ori	r24, 0x01	; 1
    12d8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    12da:	e1 eb       	ldi	r30, 0xB1	; 177
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	84 60       	ori	r24, 0x04	; 4
    12e2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    12e4:	e0 eb       	ldi	r30, 0xB0	; 176
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	81 60       	ori	r24, 0x01	; 1
    12ec:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    12ee:	e1 e9       	ldi	r30, 0x91	; 145
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	82 60       	ori	r24, 0x02	; 2
    12f6:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    12f8:	80 81       	ld	r24, Z
    12fa:	81 60       	ori	r24, 0x01	; 1
    12fc:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    12fe:	e0 e9       	ldi	r30, 0x90	; 144
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	81 60       	ori	r24, 0x01	; 1
    1306:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1308:	e1 ea       	ldi	r30, 0xA1	; 161
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	82 60       	ori	r24, 0x02	; 2
    1310:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1312:	80 81       	ld	r24, Z
    1314:	81 60       	ori	r24, 0x01	; 1
    1316:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1318:	e0 ea       	ldi	r30, 0xA0	; 160
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	81 60       	ori	r24, 0x01	; 1
    1320:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1322:	e1 e2       	ldi	r30, 0x21	; 33
    1324:	f1 e0       	ldi	r31, 0x01	; 1
    1326:	80 81       	ld	r24, Z
    1328:	82 60       	ori	r24, 0x02	; 2
    132a:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    132c:	80 81       	ld	r24, Z
    132e:	81 60       	ori	r24, 0x01	; 1
    1330:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1332:	e0 e2       	ldi	r30, 0x20	; 32
    1334:	f1 e0       	ldi	r31, 0x01	; 1
    1336:	80 81       	ld	r24, Z
    1338:	81 60       	ori	r24, 0x01	; 1
    133a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    133c:	ea e7       	ldi	r30, 0x7A	; 122
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	84 60       	ori	r24, 0x04	; 4
    1344:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1346:	80 81       	ld	r24, Z
    1348:	82 60       	ori	r24, 0x02	; 2
    134a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    134c:	80 81       	ld	r24, Z
    134e:	81 60       	ori	r24, 0x01	; 1
    1350:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1352:	80 81       	ld	r24, Z
    1354:	80 68       	ori	r24, 0x80	; 128
    1356:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1358:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    135c:	08 95       	ret

0000135e <_ZN9IPAddressC2Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    135e:	0f 93       	push	r16
    1360:	fc 01       	movw	r30, r24
    1362:	81 e2       	ldi	r24, 0x21	; 33
    1364:	93 e0       	ldi	r25, 0x03	; 3
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    136a:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    136c:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    136e:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    1370:	05 83       	std	Z+5, r16	; 0x05
}
    1372:	0f 91       	pop	r16
    1374:	08 95       	ret

00001376 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    1376:	0f 93       	push	r16
    1378:	fc 01       	movw	r30, r24
    137a:	81 e2       	ldi	r24, 0x21	; 33
    137c:	93 e0       	ldi	r25, 0x03	; 3
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    1382:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    1384:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    1386:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    1388:	05 83       	std	Z+5, r16	; 0x05
}
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    138e:	81 e2       	ldi	r24, 0x21	; 33
    1390:	93 e0       	ldi	r25, 0x03	; 3
    1392:	90 93 42 03 	sts	0x0342, r25
    1396:	80 93 41 03 	sts	0x0341, r24
{
    _address[0] = first_octet;
    139a:	10 92 43 03 	sts	0x0343, r1
    _address[1] = second_octet;
    139e:	10 92 44 03 	sts	0x0344, r1
    _address[2] = third_octet;
    13a2:	10 92 45 03 	sts	0x0345, r1
    _address[3] = fourth_octet;
    13a6:	10 92 46 03 	sts	0x0346, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    13aa:	08 95       	ret

000013ac <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    13ac:	8f 92       	push	r8
    13ae:	9f 92       	push	r9
    13b0:	af 92       	push	r10
    13b2:	bf 92       	push	r11
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	4c 01       	movw	r8, r24
    13c6:	6b 01       	movw	r12, r22
    13c8:	7c 01       	movw	r14, r24
    13ca:	aa 24       	eor	r10, r10
    13cc:	bb 24       	eor	r11, r11
    13ce:	c0 e0       	ldi	r28, 0x00	; 0
    13d0:	d0 e0       	ldi	r29, 0x00	; 0
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    13d2:	c6 01       	movw	r24, r12
    13d4:	f7 01       	movw	r30, r14
    13d6:	62 81       	ldd	r22, Z+2	; 0x02
    13d8:	4a e0       	ldi	r20, 0x0A	; 10
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZN5Print5printEhi>
    13e0:	8c 01       	movw	r16, r24
        n += p.print('.');
    13e2:	c6 01       	movw	r24, r12
    13e4:	6e e2       	ldi	r22, 0x2E	; 46
    13e6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    13ea:	08 0f       	add	r16, r24
    13ec:	19 1f       	adc	r17, r25
        n += p.print('.');
    13ee:	a0 0e       	add	r10, r16
    13f0:	b1 1e       	adc	r11, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    13f2:	21 96       	adiw	r28, 0x01	; 1
    13f4:	08 94       	sec
    13f6:	e1 1c       	adc	r14, r1
    13f8:	f1 1c       	adc	r15, r1
    13fa:	c3 30       	cpi	r28, 0x03	; 3
    13fc:	d1 05       	cpc	r29, r1
    13fe:	49 f7       	brne	.-46     	; 0x13d2 <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    1400:	c6 01       	movw	r24, r12
    1402:	f4 01       	movw	r30, r8
    1404:	65 81       	ldd	r22, Z+5	; 0x05
    1406:	4a e0       	ldi	r20, 0x0A	; 10
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZN5Print5printEhi>
    140e:	95 01       	movw	r18, r10
    1410:	28 0f       	add	r18, r24
    1412:	39 1f       	adc	r19, r25
    return n;
}
    1414:	c9 01       	movw	r24, r18
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	df 90       	pop	r13
    1424:	cf 90       	pop	r12
    1426:	bf 90       	pop	r11
    1428:	af 90       	pop	r10
    142a:	9f 90       	pop	r9
    142c:	8f 90       	pop	r8
    142e:	08 95       	ret

00001430 <_ZN9IPAddresseqEPKh>:
    return *this;
}

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
    1430:	9c 01       	movw	r18, r24
    1432:	2e 5f       	subi	r18, 0xFE	; 254
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	cb 01       	movw	r24, r22
    1438:	b9 01       	movw	r22, r18
    143a:	44 e0       	ldi	r20, 0x04	; 4
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <memcmp>
    1442:	9c 01       	movw	r18, r24
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	23 2b       	or	r18, r19
    1448:	09 f4       	brne	.+2      	; 0x144c <_ZN9IPAddresseqEPKh+0x1c>
    144a:	81 e0       	ldi	r24, 0x01	; 1
}
    144c:	08 95       	ret

0000144e <_ZN9IPAddressaSEm>:
{
    memcpy(_address, address, sizeof(_address));
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t address)
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <_ZN9IPAddressaSEm+0x6>
    1454:	0f 92       	push	r0
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	fc 01       	movw	r30, r24
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    145c:	42 83       	std	Z+2, r20	; 0x02
    145e:	53 83       	std	Z+3, r21	; 0x03
    1460:	64 83       	std	Z+4, r22	; 0x04
    1462:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <_ZN9IPAddressaSEPKh>:
IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
}

IPAddress& IPAddress::operator=(const uint8_t *address)
    1472:	9c 01       	movw	r18, r24
    1474:	fb 01       	movw	r30, r22
{
    memcpy(_address, address, sizeof(_address));
    1476:	80 81       	ld	r24, Z
    1478:	91 81       	ldd	r25, Z+1	; 0x01
    147a:	a2 81       	ldd	r26, Z+2	; 0x02
    147c:	b3 81       	ldd	r27, Z+3	; 0x03
    147e:	f9 01       	movw	r30, r18
    1480:	82 83       	std	Z+2, r24	; 0x02
    1482:	93 83       	std	Z+3, r25	; 0x03
    1484:	a4 83       	std	Z+4, r26	; 0x04
    1486:	b5 83       	std	Z+5, r27	; 0x05
    return *this;
}
    1488:	c9 01       	movw	r24, r18
    148a:	08 95       	ret

0000148c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
    148c:	9c 01       	movw	r18, r24
    148e:	fb 01       	movw	r30, r22
    1490:	81 e2       	ldi	r24, 0x21	; 33
    1492:	93 e0       	ldi	r25, 0x03	; 3
    1494:	d9 01       	movw	r26, r18
    1496:	8d 93       	st	X+, r24
    1498:	9c 93       	st	X, r25
{
    memcpy(_address, address, sizeof(_address));
    149a:	80 81       	ld	r24, Z
    149c:	91 81       	ldd	r25, Z+1	; 0x01
    149e:	a2 81       	ldd	r26, Z+2	; 0x02
    14a0:	b3 81       	ldd	r27, Z+3	; 0x03
    14a2:	f9 01       	movw	r30, r18
    14a4:	82 83       	std	Z+2, r24	; 0x02
    14a6:	93 83       	std	Z+3, r25	; 0x03
    14a8:	a4 83       	std	Z+4, r26	; 0x04
    14aa:	b5 83       	std	Z+5, r27	; 0x05
}
    14ac:	08 95       	ret

000014ae <_ZN9IPAddressC2EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
    14ae:	9c 01       	movw	r18, r24
    14b0:	fb 01       	movw	r30, r22
    14b2:	81 e2       	ldi	r24, 0x21	; 33
    14b4:	93 e0       	ldi	r25, 0x03	; 3
    14b6:	d9 01       	movw	r26, r18
    14b8:	8d 93       	st	X+, r24
    14ba:	9c 93       	st	X, r25
{
    memcpy(_address, address, sizeof(_address));
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	a2 81       	ldd	r26, Z+2	; 0x02
    14c2:	b3 81       	ldd	r27, Z+3	; 0x03
    14c4:	f9 01       	movw	r30, r18
    14c6:	82 83       	std	Z+2, r24	; 0x02
    14c8:	93 83       	std	Z+3, r25	; 0x03
    14ca:	a4 83       	std	Z+4, r26	; 0x04
    14cc:	b5 83       	std	Z+5, r27	; 0x05
}
    14ce:	08 95       	ret

000014d0 <_ZN9IPAddressC1Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <_ZN9IPAddressC1Em+0x6>
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	fc 01       	movw	r30, r24
    14de:	81 e2       	ldi	r24, 0x21	; 33
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	91 83       	std	Z+1, r25	; 0x01
    14e4:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    14e6:	42 83       	std	Z+2, r20	; 0x02
    14e8:	53 83       	std	Z+3, r21	; 0x03
    14ea:	64 83       	std	Z+4, r22	; 0x04
    14ec:	75 83       	std	Z+5, r23	; 0x05
}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <_ZN9IPAddressC2Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <_ZN9IPAddressC2Em+0x6>
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	fc 01       	movw	r30, r24
    150a:	81 e2       	ldi	r24, 0x21	; 33
    150c:	93 e0       	ldi	r25, 0x03	; 3
    150e:	91 83       	std	Z+1, r25	; 0x01
    1510:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    1512:	42 83       	std	Z+2, r20	; 0x02
    1514:	53 83       	std	Z+3, r21	; 0x03
    1516:	64 83       	std	Z+4, r22	; 0x04
    1518:	75 83       	std	Z+5, r23	; 0x05
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    1528:	fc 01       	movw	r30, r24
    152a:	81 e2       	ldi	r24, 0x21	; 33
    152c:	93 e0       	ldi	r25, 0x03	; 3
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    1532:	12 82       	std	Z+2, r1	; 0x02
    1534:	13 82       	std	Z+3, r1	; 0x03
    1536:	14 82       	std	Z+4, r1	; 0x04
    1538:	15 82       	std	Z+5, r1	; 0x05
}
    153a:	08 95       	ret

0000153c <_ZN9IPAddressC2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    153c:	fc 01       	movw	r30, r24
    153e:	81 e2       	ldi	r24, 0x21	; 33
    1540:	93 e0       	ldi	r25, 0x03	; 3
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    1546:	12 82       	std	Z+2, r1	; 0x02
    1548:	13 82       	std	Z+3, r1	; 0x03
    154a:	14 82       	std	Z+4, r1	; 0x04
    154c:	15 82       	std	Z+5, r1	; 0x05
}
    154e:	08 95       	ret

00001550 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1550:	cf 92       	push	r12
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	7c 01       	movw	r14, r24
    1562:	6b 01       	movw	r12, r22
    1564:	8a 01       	movw	r16, r20
    1566:	c0 e0       	ldi	r28, 0x00	; 0
    1568:	d0 e0       	ldi	r29, 0x00	; 0
    156a:	0f c0       	rjmp	.+30     	; 0x158a <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    156c:	d6 01       	movw	r26, r12
    156e:	6d 91       	ld	r22, X+
    1570:	6d 01       	movw	r12, r26
    1572:	d7 01       	movw	r26, r14
    1574:	ed 91       	ld	r30, X+
    1576:	fc 91       	ld	r31, X
    1578:	01 90       	ld	r0, Z+
    157a:	f0 81       	ld	r31, Z
    157c:	e0 2d       	mov	r30, r0
    157e:	c7 01       	movw	r24, r14
    1580:	19 95       	eicall
    1582:	c8 0f       	add	r28, r24
    1584:	d9 1f       	adc	r29, r25
    1586:	01 50       	subi	r16, 0x01	; 1
    1588:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    158a:	01 15       	cp	r16, r1
    158c:	11 05       	cpc	r17, r1
    158e:	71 f7       	brne	.-36     	; 0x156c <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1590:	ce 01       	movw	r24, r28
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	ff 90       	pop	r15
    159c:	ef 90       	pop	r14
    159e:	df 90       	pop	r13
    15a0:	cf 90       	pop	r12
    15a2:	08 95       	ret

000015a4 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    15b2:	8b 01       	movw	r16, r22
    15b4:	c0 e0       	ldi	r28, 0x00	; 0
    15b6:	d0 e0       	ldi	r29, 0x00	; 0
    15b8:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    15ba:	0f 5f       	subi	r16, 0xFF	; 255
    15bc:	1f 4f       	sbci	r17, 0xFF	; 255
    15be:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    15c0:	66 23       	and	r22, r22
    15c2:	59 f0       	breq	.+22     	; 0x15da <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    15c4:	d7 01       	movw	r26, r14
    15c6:	ed 91       	ld	r30, X+
    15c8:	fc 91       	ld	r31, X
    15ca:	01 90       	ld	r0, Z+
    15cc:	f0 81       	ld	r31, Z
    15ce:	e0 2d       	mov	r30, r0
    15d0:	c7 01       	movw	r24, r14
    15d2:	19 95       	eicall
    15d4:	c8 0f       	add	r28, r24
    15d6:	d9 1f       	adc	r29, r25
    15d8:	ef cf       	rjmp	.-34     	; 0x15b8 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    15da:	ce 01       	movw	r24, r28
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	ff 90       	pop	r15
    15e6:	ef 90       	pop	r14
    15e8:	08 95       	ret

000015ea <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    15ea:	dc 01       	movw	r26, r24
{
  return write(c);
    15ec:	ed 91       	ld	r30, X+
    15ee:	fc 91       	ld	r31, X
    15f0:	01 90       	ld	r0, Z+
    15f2:	f0 81       	ld	r31, Z
    15f4:	e0 2d       	mov	r30, r0
    15f6:	19 95       	eicall
}
    15f8:	08 95       	ret

000015fa <_ZN5Print5printERK9Printable>:
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
    15fa:	9c 01       	movw	r18, r24
    15fc:	db 01       	movw	r26, r22
{
  return x.printTo(*this);
    15fe:	ed 91       	ld	r30, X+
    1600:	fc 91       	ld	r31, X
    1602:	01 90       	ld	r0, Z+
    1604:	f0 81       	ld	r31, Z
    1606:	e0 2d       	mov	r30, r0
    1608:	cb 01       	movw	r24, r22
    160a:	b9 01       	movw	r22, r18
    160c:	19 95       	eicall
}
    160e:	08 95       	ret

00001610 <_ZN5Print7printlnEv>:

size_t Print::println(void)
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    161a:	dc 01       	movw	r26, r24
    161c:	ed 91       	ld	r30, X+
    161e:	fc 91       	ld	r31, X
    1620:	01 90       	ld	r0, Z+
    1622:	f0 81       	ld	r31, Z
    1624:	e0 2d       	mov	r30, r0
    1626:	6d e0       	ldi	r22, 0x0D	; 13
    1628:	19 95       	eicall
    162a:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    162c:	d8 01       	movw	r26, r16
    162e:	ed 91       	ld	r30, X+
    1630:	fc 91       	ld	r31, X
    1632:	01 90       	ld	r0, Z+
    1634:	f0 81       	ld	r31, Z
    1636:	e0 2d       	mov	r30, r0
    1638:	c8 01       	movw	r24, r16
    163a:	6a e0       	ldi	r22, 0x0A	; 10
    163c:	19 95       	eicall
    163e:	9c 01       	movw	r18, r24
    1640:	2e 0d       	add	r18, r14
    1642:	3f 1d       	adc	r19, r15
    1644:	c9 01       	movw	r24, r18
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	08 95       	ret

00001650 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    165a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <_ZN5Print5printEPK19__FlashStringHelper>
    165e:	8c 01       	movw	r16, r24
  n += println();
    1660:	c7 01       	movw	r24, r14
    1662:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    1666:	9c 01       	movw	r18, r24
    1668:	20 0f       	add	r18, r16
    166a:	31 1f       	adc	r19, r17
  return n;
}
    166c:	c9 01       	movw	r24, r18
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	08 95       	ret

00001678 <_ZN5Print7printlnEc>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(char c)
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	7c 01       	movw	r14, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1682:	dc 01       	movw	r26, r24
    1684:	ed 91       	ld	r30, X+
    1686:	fc 91       	ld	r31, X
    1688:	01 90       	ld	r0, Z+
    168a:	f0 81       	ld	r31, Z
    168c:	e0 2d       	mov	r30, r0
    168e:	19 95       	eicall
    1690:	8c 01       	movw	r16, r24
}

size_t Print::println(char c)
{
  size_t n = print(c);
  n += println();
    1692:	c7 01       	movw	r24, r14
    1694:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    1698:	08 0f       	add	r16, r24
    169a:	19 1f       	adc	r17, r25
  return n;
}
    169c:	c8 01       	movw	r24, r16
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	08 95       	ret

000016a8 <_ZN5Print7printlnERK9Printable>:
  size_t n = print(num, digits);
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	7c 01       	movw	r14, r24
    16b2:	db 01       	movw	r26, r22
  return n;
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
    16b4:	ed 91       	ld	r30, X+
    16b6:	fc 91       	ld	r31, X
    16b8:	01 90       	ld	r0, Z+
    16ba:	f0 81       	ld	r31, Z
    16bc:	e0 2d       	mov	r30, r0
    16be:	cb 01       	movw	r24, r22
    16c0:	b7 01       	movw	r22, r14
    16c2:	19 95       	eicall
    16c4:	8c 01       	movw	r16, r24
}

size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
    16c6:	c7 01       	movw	r24, r14
    16c8:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    16cc:	08 0f       	add	r16, r24
    16ce:	19 1f       	adc	r17, r25
  return n;
}
    16d0:	c8 01       	movw	r24, r16
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	08 95       	ret

000016dc <_ZN5Print5writeEPKc>:
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	ec 01       	movw	r28, r24
    16e2:	61 15       	cp	r22, r1
    16e4:	71 05       	cpc	r23, r1
    16e6:	19 f4       	brne	.+6      	; 0x16ee <_ZN5Print5writeEPKc+0x12>
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <_ZN5Print5writeEPKc+0x30>
    16ee:	db 01       	movw	r26, r22
    16f0:	0d 90       	ld	r0, X+
    16f2:	00 20       	and	r0, r0
    16f4:	e9 f7       	brne	.-6      	; 0x16f0 <_ZN5Print5writeEPKc+0x14>
    16f6:	11 97       	sbiw	r26, 0x01	; 1
    16f8:	a6 1b       	sub	r26, r22
    16fa:	b7 0b       	sbc	r27, r23
    16fc:	e8 81       	ld	r30, Y
    16fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1700:	02 80       	ldd	r0, Z+2	; 0x02
    1702:	f3 81       	ldd	r31, Z+3	; 0x03
    1704:	e0 2d       	mov	r30, r0
    1706:	ad 01       	movw	r20, r26
    1708:	19 95       	eicall
    170a:	9c 01       	movw	r18, r24
    170c:	c9 01       	movw	r24, r18
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	08 95       	ret

00001714 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1714:	4f 92       	push	r4
    1716:	5f 92       	push	r5
    1718:	7f 92       	push	r7
    171a:	8f 92       	push	r8
    171c:	9f 92       	push	r9
    171e:	af 92       	push	r10
    1720:	bf 92       	push	r11
    1722:	cf 92       	push	r12
    1724:	df 92       	push	r13
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
    172c:	1f 93       	push	r17
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	a1 97       	sbiw	r28, 0x21	; 33
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	2c 01       	movw	r4, r24
    1744:	74 2e       	mov	r7, r20
    1746:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	08 f4       	brcc	.+2      	; 0x174e <_ZN5Print11printNumberEmh+0x3a>
    174c:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    174e:	19 a2       	std	Y+33, r1	; 0x21
    1750:	31 e2       	ldi	r19, 0x21	; 33
    1752:	c3 2e       	mov	r12, r19
    1754:	d1 2c       	mov	r13, r1
    1756:	cc 0e       	add	r12, r28
    1758:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    175a:	82 2e       	mov	r8, r18
    175c:	99 24       	eor	r9, r9
    175e:	aa 24       	eor	r10, r10
    1760:	bb 24       	eor	r11, r11
    1762:	67 2d       	mov	r22, r7
    1764:	75 2f       	mov	r23, r21
    1766:	a5 01       	movw	r20, r10
    1768:	94 01       	movw	r18, r8
    176a:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__udivmodsi4>
    176e:	79 01       	movw	r14, r18
    1770:	8a 01       	movw	r16, r20
    char c = m - base * n;
    1772:	c8 01       	movw	r24, r16
    1774:	b7 01       	movw	r22, r14
    1776:	a5 01       	movw	r20, r10
    1778:	94 01       	movw	r18, r8
    177a:	0e 94 c2 19 	call	0x3384	; 0x3384 <__mulsi3>
    177e:	47 2d       	mov	r20, r7
    1780:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1782:	08 94       	sec
    1784:	c1 08       	sbc	r12, r1
    1786:	d1 08       	sbc	r13, r1
    1788:	4a 30       	cpi	r20, 0x0A	; 10
    178a:	14 f4       	brge	.+4      	; 0x1790 <_ZN5Print11printNumberEmh+0x7c>
    178c:	40 5d       	subi	r20, 0xD0	; 208
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <_ZN5Print11printNumberEmh+0x7e>
    1790:	49 5c       	subi	r20, 0xC9	; 201
    1792:	f6 01       	movw	r30, r12
    1794:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1796:	e1 14       	cp	r14, r1
    1798:	f1 04       	cpc	r15, r1
    179a:	01 05       	cpc	r16, r1
    179c:	11 05       	cpc	r17, r1
    179e:	21 f0       	breq	.+8      	; 0x17a8 <_ZN5Print11printNumberEmh+0x94>
    17a0:	7e 2c       	mov	r7, r14
    17a2:	5f 2d       	mov	r21, r15
    17a4:	c8 01       	movw	r24, r16
    17a6:	dd cf       	rjmp	.-70     	; 0x1762 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    17a8:	c2 01       	movw	r24, r4
    17aa:	b6 01       	movw	r22, r12
    17ac:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN5Print5writeEPKc>
}
    17b0:	a1 96       	adiw	r28, 0x21	; 33
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	5f 90       	pop	r5
    17d8:	4f 90       	pop	r4
    17da:	08 95       	ret

000017dc <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    17dc:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    17de:	21 15       	cp	r18, r1
    17e0:	31 05       	cpc	r19, r1
    17e2:	41 f4       	brne	.+16     	; 0x17f4 <_ZN5Print5printEmi+0x18>
    17e4:	ed 91       	ld	r30, X+
    17e6:	fc 91       	ld	r31, X
    17e8:	01 90       	ld	r0, Z+
    17ea:	f0 81       	ld	r31, Z
    17ec:	e0 2d       	mov	r30, r0
    17ee:	64 2f       	mov	r22, r20
    17f0:	19 95       	eicall
    17f2:	08 95       	ret
  else return printNumber(n, base);
    17f4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN5Print11printNumberEmh>
}
    17f8:	08 95       	ret

000017fa <_ZN5Print7printlnEmi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	7c 01       	movw	r14, r24
{
  size_t n = print(num, base);
    1804:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN5Print5printEmi>
    1808:	8c 01       	movw	r16, r24
  n += println();
    180a:	c7 01       	movw	r24, r14
    180c:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    1810:	9c 01       	movw	r18, r24
    1812:	20 0f       	add	r18, r16
    1814:	31 1f       	adc	r19, r17
  return n;
}
    1816:	c9 01       	movw	r24, r18
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	08 95       	ret

00001822 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    182c:	7b 01       	movw	r14, r22
    182e:	00 e0       	ldi	r16, 0x00	; 0
    1830:	10 e0       	ldi	r17, 0x00	; 0
    1832:	b8 01       	movw	r22, r16
    1834:	a7 01       	movw	r20, r14
    1836:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN5Print5printEmi>
}
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	08 95       	ret

00001844 <_ZN5Print7printlnEji>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	6c 01       	movw	r12, r24
    1852:	7b 01       	movw	r14, r22
    1854:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1856:	00 e0       	ldi	r16, 0x00	; 0
    1858:	10 e0       	ldi	r17, 0x00	; 0
    185a:	b8 01       	movw	r22, r16
    185c:	a7 01       	movw	r20, r14
    185e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN5Print5printEmi>
    1862:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1864:	c6 01       	movw	r24, r12
    1866:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    186a:	08 0f       	add	r16, r24
    186c:	19 1f       	adc	r17, r25
  return n;
}
    186e:	c8 01       	movw	r24, r16
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	df 90       	pop	r13
    187a:	cf 90       	pop	r12
    187c:	08 95       	ret

0000187e <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    1888:	e6 2e       	mov	r14, r22
    188a:	ff 24       	eor	r15, r15
    188c:	00 e0       	ldi	r16, 0x00	; 0
    188e:	10 e0       	ldi	r17, 0x00	; 0
    1890:	b8 01       	movw	r22, r16
    1892:	a7 01       	movw	r20, r14
    1894:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN5Print5printEmi>
}
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	08 95       	ret

000018a2 <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
    18a2:	cf 92       	push	r12
    18a4:	df 92       	push	r13
    18a6:	ef 92       	push	r14
    18a8:	ff 92       	push	r15
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	6c 01       	movw	r12, r24
    18b0:	e6 2e       	mov	r14, r22
    18b2:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    18b4:	ff 24       	eor	r15, r15
    18b6:	00 e0       	ldi	r16, 0x00	; 0
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	b8 01       	movw	r22, r16
    18bc:	a7 01       	movw	r20, r14
    18be:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN5Print5printEmi>
    18c2:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    18c4:	c6 01       	movw	r24, r12
    18c6:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    18ca:	08 0f       	add	r16, r24
    18cc:	19 1f       	adc	r17, r25
  return n;
}
    18ce:	c8 01       	movw	r24, r16
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	08 95       	ret

000018de <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	ec 01       	movw	r28, r24
    18f0:	6a 01       	movw	r12, r20
    18f2:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    18f4:	21 15       	cp	r18, r1
    18f6:	31 05       	cpc	r19, r1
    18f8:	41 f4       	brne	.+16     	; 0x190a <_ZN5Print5printEli+0x2c>
    return write(n);
    18fa:	e8 81       	ld	r30, Y
    18fc:	f9 81       	ldd	r31, Y+1	; 0x01
    18fe:	01 90       	ld	r0, Z+
    1900:	f0 81       	ld	r31, Z
    1902:	e0 2d       	mov	r30, r0
    1904:	64 2f       	mov	r22, r20
    1906:	19 95       	eicall
    1908:	1f c0       	rjmp	.+62     	; 0x1948 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    190a:	2a 30       	cpi	r18, 0x0A	; 10
    190c:	31 05       	cpc	r19, r1
    190e:	d1 f4       	brne	.+52     	; 0x1944 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    1910:	77 ff       	sbrs	r23, 7
    1912:	17 c0       	rjmp	.+46     	; 0x1942 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1914:	e8 81       	ld	r30, Y
    1916:	f9 81       	ldd	r31, Y+1	; 0x01
    1918:	01 90       	ld	r0, Z+
    191a:	f0 81       	ld	r31, Z
    191c:	e0 2d       	mov	r30, r0
    191e:	6d e2       	ldi	r22, 0x2D	; 45
    1920:	19 95       	eicall
    1922:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    1924:	44 27       	eor	r20, r20
    1926:	55 27       	eor	r21, r21
    1928:	ba 01       	movw	r22, r20
    192a:	4c 19       	sub	r20, r12
    192c:	5d 09       	sbc	r21, r13
    192e:	6e 09       	sbc	r22, r14
    1930:	7f 09       	sbc	r23, r15
    1932:	ce 01       	movw	r24, r28
    1934:	2a e0       	ldi	r18, 0x0A	; 10
    1936:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN5Print11printNumberEmh>
    193a:	98 01       	movw	r18, r16
    193c:	28 0f       	add	r18, r24
    193e:	39 1f       	adc	r19, r25
    1940:	04 c0       	rjmp	.+8      	; 0x194a <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    1942:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    1944:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN5Print11printNumberEmh>
    1948:	9c 01       	movw	r18, r24
  }
}
    194a:	c9 01       	movw	r24, r18
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	ff 90       	pop	r15
    1956:	ef 90       	pop	r14
    1958:	df 90       	pop	r13
    195a:	cf 90       	pop	r12
    195c:	08 95       	ret

0000195e <_ZN5Print7printlnEli>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(long num, int base)
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	7c 01       	movw	r14, r24
{
  size_t n = print(num, base);
    1968:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN5Print5printEli>
    196c:	8c 01       	movw	r16, r24
  n += println();
    196e:	c7 01       	movw	r24, r14
    1970:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    1974:	9c 01       	movw	r18, r24
    1976:	20 0f       	add	r18, r16
    1978:	31 1f       	adc	r19, r17
  return n;
}
    197a:	c9 01       	movw	r24, r18
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	ff 90       	pop	r15
    1982:	ef 90       	pop	r14
    1984:	08 95       	ret

00001986 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	7b 01       	movw	r14, r22
    1990:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    1992:	00 27       	eor	r16, r16
    1994:	f7 fc       	sbrc	r15, 7
    1996:	00 95       	com	r16
    1998:	10 2f       	mov	r17, r16
    199a:	b8 01       	movw	r22, r16
    199c:	a7 01       	movw	r20, r14
    199e:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN5Print5printEli>
}
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	ff 90       	pop	r15
    19a8:	ef 90       	pop	r14
    19aa:	08 95       	ret

000019ac <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    19ac:	cf 92       	push	r12
    19ae:	df 92       	push	r13
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	6c 01       	movw	r12, r24
    19ba:	7b 01       	movw	r14, r22
    19bc:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    19be:	00 27       	eor	r16, r16
    19c0:	f7 fc       	sbrc	r15, 7
    19c2:	00 95       	com	r16
    19c4:	10 2f       	mov	r17, r16
    19c6:	b8 01       	movw	r22, r16
    19c8:	a7 01       	movw	r20, r14
    19ca:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN5Print5printEli>
    19ce:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    19d0:	c6 01       	movw	r24, r12
    19d2:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    19d6:	08 0f       	add	r16, r24
    19d8:	19 1f       	adc	r17, r25
  return n;
}
    19da:	c8 01       	movw	r24, r16
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	df 90       	pop	r13
    19e6:	cf 90       	pop	r12
    19e8:	08 95       	ret

000019ea <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    19ea:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN5Print5writeEPKc>
}
    19ee:	08 95       	ret

000019f0 <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    19f0:	7f 92       	push	r7
    19f2:	8f 92       	push	r8
    19f4:	9f 92       	push	r9
    19f6:	af 92       	push	r10
    19f8:	bf 92       	push	r11
    19fa:	cf 92       	push	r12
    19fc:	df 92       	push	r13
    19fe:	ef 92       	push	r14
    1a00:	ff 92       	push	r15
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	4c 01       	movw	r8, r24
    1a0c:	7a 01       	movw	r14, r20
    1a0e:	8b 01       	movw	r16, r22
    1a10:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1a12:	cb 01       	movw	r24, r22
    1a14:	ba 01       	movw	r22, r20
    1a16:	a8 01       	movw	r20, r16
    1a18:	97 01       	movw	r18, r14
    1a1a:	0e 94 23 05 	call	0xa46	; 0xa46 <__unordsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	21 f0       	breq	.+8      	; 0x1a2a <_ZN5Print10printFloatEdh+0x3a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1a22:	c4 01       	movw	r24, r8
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	72 e0       	ldi	r23, 0x02	; 2
    1a28:	21 c0       	rjmp	.+66     	; 0x1a6c <_ZN5Print10printFloatEdh+0x7c>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1a2a:	c0 e0       	ldi	r28, 0x00	; 0
    1a2c:	d0 e0       	ldi	r29, 0x00	; 0
    1a2e:	57 01       	movw	r10, r14
    1a30:	68 01       	movw	r12, r16
    1a32:	e8 94       	clt
    1a34:	d7 f8       	bld	r13, 7
    1a36:	c6 01       	movw	r24, r12
    1a38:	b5 01       	movw	r22, r10
    1a3a:	2f ef       	ldi	r18, 0xFF	; 255
    1a3c:	3f ef       	ldi	r19, 0xFF	; 255
    1a3e:	4f e7       	ldi	r20, 0x7F	; 127
    1a40:	5f e7       	ldi	r21, 0x7F	; 127
    1a42:	0e 94 23 05 	call	0xa46	; 0xa46 <__unordsf2>
    1a46:	88 23       	and	r24, r24
    1a48:	51 f4       	brne	.+20     	; 0x1a5e <_ZN5Print10printFloatEdh+0x6e>
    1a4a:	c6 01       	movw	r24, r12
    1a4c:	b5 01       	movw	r22, r10
    1a4e:	2f ef       	ldi	r18, 0xFF	; 255
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	5f e7       	ldi	r21, 0x7F	; 127
    1a56:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__lesf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	14 f0       	brlt	.+4      	; 0x1a62 <_ZN5Print10printFloatEdh+0x72>
    1a5e:	c1 e0       	ldi	r28, 0x01	; 1
    1a60:	d0 e0       	ldi	r29, 0x00	; 0
    1a62:	21 97       	sbiw	r28, 0x01	; 1
    1a64:	39 f0       	breq	.+14     	; 0x1a74 <_ZN5Print10printFloatEdh+0x84>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1a66:	c4 01       	movw	r24, r8
    1a68:	64 e0       	ldi	r22, 0x04	; 4
    1a6a:	72 e0       	ldi	r23, 0x02	; 2
    1a6c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN5Print5writeEPKc>
    1a70:	ec 01       	movw	r28, r24
    1a72:	93 c0       	rjmp	.+294    	; 0x1b9a <_ZN5Print10printFloatEdh+0x1aa>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1a74:	c8 01       	movw	r24, r16
    1a76:	b7 01       	movw	r22, r14
    1a78:	2f ef       	ldi	r18, 0xFF	; 255
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	5f e4       	ldi	r21, 0x4F	; 79
    1a80:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	54 f0       	brlt	.+20     	; 0x1a9c <_ZN5Print10printFloatEdh+0xac>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1a88:	c8 01       	movw	r24, r16
    1a8a:	b7 01       	movw	r22, r14
    1a8c:	2f ef       	ldi	r18, 0xFF	; 255
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	5f ec       	ldi	r21, 0xCF	; 207
    1a94:	0e 94 c3 04 	call	0x986	; 0x986 <__ltsf2>
    1a98:	88 23       	and	r24, r24
    1a9a:	24 f4       	brge	.+8      	; 0x1aa4 <_ZN5Print10printFloatEdh+0xb4>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1a9c:	c4 01       	movw	r24, r8
    1a9e:	68 e0       	ldi	r22, 0x08	; 8
    1aa0:	72 e0       	ldi	r23, 0x02	; 2
    1aa2:	e4 cf       	rjmp	.-56     	; 0x1a6c <_ZN5Print10printFloatEdh+0x7c>
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    1aa4:	c8 01       	movw	r24, r16
    1aa6:	b7 01       	movw	r22, r14
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	0e 94 c3 04 	call	0x986	; 0x986 <__ltsf2>
    1ab4:	87 fd       	sbrc	r24, 7
    1ab6:	03 c0       	rjmp	.+6      	; 0x1abe <_ZN5Print10printFloatEdh+0xce>
    1ab8:	c0 e0       	ldi	r28, 0x00	; 0
    1aba:	d0 e0       	ldi	r29, 0x00	; 0
    1abc:	0e c0       	rjmp	.+28     	; 0x1ada <_ZN5Print10printFloatEdh+0xea>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1abe:	d4 01       	movw	r26, r8
    1ac0:	ed 91       	ld	r30, X+
    1ac2:	fc 91       	ld	r31, X
    1ac4:	01 90       	ld	r0, Z+
    1ac6:	f0 81       	ld	r31, Z
    1ac8:	e0 2d       	mov	r30, r0
    1aca:	c4 01       	movw	r24, r8
    1acc:	6d e2       	ldi	r22, 0x2D	; 45
    1ace:	19 95       	eicall
    1ad0:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    1ad2:	17 fb       	bst	r17, 7
    1ad4:	10 95       	com	r17
    1ad6:	17 f9       	bld	r17, 7
    1ad8:	10 95       	com	r17
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	dd 24       	eor	r13, r13
    1ae4:	0b c0       	rjmp	.+22     	; 0x1afc <_ZN5Print10printFloatEdh+0x10c>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    1ae6:	ca 01       	movw	r24, r20
    1ae8:	b9 01       	movw	r22, r18
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 b7 03 	call	0x76e	; 0x76e <__divsf3>
    1af6:	9b 01       	movw	r18, r22
    1af8:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1afa:	d3 94       	inc	r13
    1afc:	d7 14       	cp	r13, r7
    1afe:	98 f3       	brcs	.-26     	; 0x1ae6 <_ZN5Print10printFloatEdh+0xf6>
    rounding /= 10.0;
  
  number += rounding;
    1b00:	c8 01       	movw	r24, r16
    1b02:	b7 01       	movw	r22, r14
    1b04:	0e 94 90 02 	call	0x520	; 0x520 <__addsf3>
    1b08:	5b 01       	movw	r10, r22
    1b0a:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1b0c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__fixunssfsi>
    1b10:	7b 01       	movw	r14, r22
    1b12:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    1b14:	c4 01       	movw	r24, r8
    1b16:	b8 01       	movw	r22, r16
    1b18:	a7 01       	movw	r20, r14
    1b1a:	2a e0       	ldi	r18, 0x0A	; 10
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN5Print5printEmi>
    1b22:	c8 0f       	add	r28, r24
    1b24:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1b26:	77 20       	and	r7, r7
    1b28:	39 f0       	breq	.+14     	; 0x1b38 <_ZN5Print10printFloatEdh+0x148>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1b2a:	c4 01       	movw	r24, r8
    1b2c:	6c e0       	ldi	r22, 0x0C	; 12
    1b2e:	72 e0       	ldi	r23, 0x02	; 2
    1b30:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1b34:	c8 0f       	add	r28, r24
    1b36:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1b38:	c8 01       	movw	r24, r16
    1b3a:	b7 01       	movw	r22, r14
    1b3c:	0e 94 00 06 	call	0xc00	; 0xc00 <__floatunsisf>
    1b40:	9b 01       	movw	r18, r22
    1b42:	ac 01       	movw	r20, r24
    1b44:	c6 01       	movw	r24, r12
    1b46:	b5 01       	movw	r22, r10
    1b48:	0e 94 5f 02 	call	0x4be	; 0x4be <__subsf3>
    1b4c:	24 c0       	rjmp	.+72     	; 0x1b96 <_ZN5Print10printFloatEdh+0x1a6>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e2       	ldi	r20, 0x20	; 32
    1b54:	51 e4       	ldi	r21, 0x41	; 65
    1b56:	0e 94 bd 02 	call	0x57a	; 0x57a <__mulsf3>
    1b5a:	7b 01       	movw	r14, r22
    1b5c:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    1b5e:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fixsfsi>
    1b62:	5b 01       	movw	r10, r22
    1b64:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1b66:	cc 24       	eor	r12, r12
    1b68:	b7 fc       	sbrc	r11, 7
    1b6a:	c0 94       	com	r12
    1b6c:	dc 2c       	mov	r13, r12
    1b6e:	c4 01       	movw	r24, r8
    1b70:	b6 01       	movw	r22, r12
    1b72:	a5 01       	movw	r20, r10
    1b74:	2a e0       	ldi	r18, 0x0A	; 10
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1b7c:	c8 0f       	add	r28, r24
    1b7e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1b80:	c6 01       	movw	r24, r12
    1b82:	b5 01       	movw	r22, r10
    1b84:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__floatsisf>
    1b88:	9b 01       	movw	r18, r22
    1b8a:	ac 01       	movw	r20, r24
    1b8c:	c8 01       	movw	r24, r16
    1b8e:	b7 01       	movw	r22, r14
    1b90:	0e 94 5f 02 	call	0x4be	; 0x4be <__subsf3>
    1b94:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1b96:	77 20       	and	r7, r7
    1b98:	d1 f6       	brne	.-76     	; 0x1b4e <_ZN5Print10printFloatEdh+0x15e>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
    1bac:	bf 90       	pop	r11
    1bae:	af 90       	pop	r10
    1bb0:	9f 90       	pop	r9
    1bb2:	8f 90       	pop	r8
    1bb4:	7f 90       	pop	r7
    1bb6:	08 95       	ret

00001bb8 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1bb8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_ZN5Print10printFloatEdh>
}
    1bbc:	08 95       	ret

00001bbe <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1bc8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_ZN5Print10printFloatEdh>
    1bcc:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1bce:	c7 01       	movw	r24, r14
    1bd0:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    1bd4:	08 0f       	add	r16, r24
    1bd6:	19 1f       	adc	r17, r25
  return n;
}
    1bd8:	c8 01       	movw	r24, r16
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	08 95       	ret

00001be4 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1bee:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN5Print5writeEPKc>
    1bf2:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1bf4:	c7 01       	movw	r24, r14
    1bf6:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    1bfa:	08 0f       	add	r16, r24
    1bfc:	19 1f       	adc	r17, r25
  return n;
}
    1bfe:	c8 01       	movw	r24, r16
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	08 95       	ret

00001c0a <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    1c0a:	af 92       	push	r10
    1c0c:	bf 92       	push	r11
    1c0e:	cf 92       	push	r12
    1c10:	df 92       	push	r13
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	5c 01       	movw	r10, r24
    1c20:	6b 01       	movw	r12, r22
    1c22:	ee 24       	eor	r14, r14
    1c24:	ff 24       	eor	r15, r15
    1c26:	c0 e0       	ldi	r28, 0x00	; 0
    1c28:	d0 e0       	ldi	r29, 0x00	; 0
    1c2a:	10 c0       	rjmp	.+32     	; 0x1c4c <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    1c2c:	d5 01       	movw	r26, r10
    1c2e:	ed 91       	ld	r30, X+
    1c30:	fc 91       	ld	r31, X
    1c32:	00 81       	ld	r16, Z
    1c34:	11 81       	ldd	r17, Z+1	; 0x01
    1c36:	c6 01       	movw	r24, r12
    1c38:	be 01       	movw	r22, r28
    1c3a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZNK6StringixEj>
    1c3e:	68 2f       	mov	r22, r24
    1c40:	c5 01       	movw	r24, r10
    1c42:	f8 01       	movw	r30, r16
    1c44:	19 95       	eicall
    1c46:	e8 0e       	add	r14, r24
    1c48:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    1c4a:	21 96       	adiw	r28, 0x01	; 1
    1c4c:	f6 01       	movw	r30, r12
    1c4e:	84 81       	ldd	r24, Z+4	; 0x04
    1c50:	95 81       	ldd	r25, Z+5	; 0x05
    1c52:	c8 17       	cp	r28, r24
    1c54:	d9 07       	cpc	r29, r25
    1c56:	50 f3       	brcs	.-44     	; 0x1c2c <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    1c58:	c7 01       	movw	r24, r14
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	bf 90       	pop	r11
    1c6c:	af 90       	pop	r10
    1c6e:	08 95       	ret

00001c70 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
    1c70:	ef 92       	push	r14
    1c72:	ff 92       	push	r15
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
    1c7a:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <_ZN5Print5printERK6String>
    1c7e:	8c 01       	movw	r16, r24
  n += println();
    1c80:	c7 01       	movw	r24, r14
    1c82:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN5Print7printlnEv>
    1c86:	9c 01       	movw	r18, r24
    1c88:	20 0f       	add	r18, r16
    1c8a:	31 1f       	adc	r19, r17
  return n;
}
    1c8c:	c9 01       	movw	r24, r18
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	08 95       	ret

00001c98 <_ZNK6String6charAtEj>:

/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
    1c98:	fc 01       	movw	r30, r24
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    1c9a:	84 81       	ldd	r24, Z+4	; 0x04
    1c9c:	95 81       	ldd	r25, Z+5	; 0x05
    1c9e:	68 17       	cp	r22, r24
    1ca0:	79 07       	cpc	r23, r25
    1ca2:	48 f4       	brcc	.+18     	; 0x1cb6 <_ZNK6String6charAtEj+0x1e>
    1ca4:	01 90       	ld	r0, Z+
    1ca6:	f0 81       	ld	r31, Z
    1ca8:	e0 2d       	mov	r30, r0
    1caa:	30 97       	sbiw	r30, 0x00	; 0
    1cac:	21 f0       	breq	.+8      	; 0x1cb6 <_ZNK6String6charAtEj+0x1e>
	return buffer[index];
    1cae:	e6 0f       	add	r30, r22
    1cb0:	f7 1f       	adc	r31, r23
    1cb2:	80 81       	ld	r24, Z
    1cb4:	08 95       	ret
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
}
    1cb8:	08 95       	ret

00001cba <_ZN6String9setCharAtEjc>:

void String::setCharAt(unsigned int loc, char c) 
    1cba:	fc 01       	movw	r30, r24
{
	if (loc < len) buffer[loc] = c;
    1cbc:	84 81       	ldd	r24, Z+4	; 0x04
    1cbe:	95 81       	ldd	r25, Z+5	; 0x05
    1cc0:	68 17       	cp	r22, r24
    1cc2:	79 07       	cpc	r23, r25
    1cc4:	30 f4       	brcc	.+12     	; 0x1cd2 <_ZN6String9setCharAtEjc+0x18>
    1cc6:	01 90       	ld	r0, Z+
    1cc8:	f0 81       	ld	r31, Z
    1cca:	e0 2d       	mov	r30, r0
    1ccc:	e6 0f       	add	r30, r22
    1cce:	f7 1f       	adc	r31, r23
    1cd0:	40 83       	st	Z, r20
    1cd2:	08 95       	ret

00001cd4 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	9b 01       	movw	r18, r22
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    1cd8:	84 81       	ldd	r24, Z+4	; 0x04
    1cda:	95 81       	ldd	r25, Z+5	; 0x05
    1cdc:	68 17       	cp	r22, r24
    1cde:	79 07       	cpc	r23, r25
    1ce0:	28 f4       	brcc	.+10     	; 0x1cec <_ZN6StringixEj+0x18>
    1ce2:	60 81       	ld	r22, Z
    1ce4:	71 81       	ldd	r23, Z+1	; 0x01
    1ce6:	61 15       	cp	r22, r1
    1ce8:	71 05       	cpc	r23, r1
    1cea:	29 f4       	brne	.+10     	; 0x1cf6 <_ZN6StringixEj+0x22>
		dummy_writable_char = 0;
    1cec:	10 92 47 03 	sts	0x0347, r1
    1cf0:	67 e4       	ldi	r22, 0x47	; 71
    1cf2:	73 e0       	ldi	r23, 0x03	; 3
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <_ZN6StringixEj+0x26>
		return dummy_writable_char;
	}
	return buffer[index];
    1cf6:	62 0f       	add	r22, r18
    1cf8:	73 1f       	adc	r23, r19
}
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	08 95       	ret

00001cfe <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    1cfe:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    1d00:	84 81       	ldd	r24, Z+4	; 0x04
    1d02:	95 81       	ldd	r25, Z+5	; 0x05
    1d04:	68 17       	cp	r22, r24
    1d06:	79 07       	cpc	r23, r25
    1d08:	48 f4       	brcc	.+18     	; 0x1d1c <_ZNK6StringixEj+0x1e>
    1d0a:	01 90       	ld	r0, Z+
    1d0c:	f0 81       	ld	r31, Z
    1d0e:	e0 2d       	mov	r30, r0
    1d10:	30 97       	sbiw	r30, 0x00	; 0
    1d12:	21 f0       	breq	.+8      	; 0x1d1c <_ZNK6StringixEj+0x1e>
	return buffer[index];
    1d14:	e6 0f       	add	r30, r22
    1d16:	f7 1f       	adc	r31, r23
    1d18:	80 81       	ld	r24, Z
    1d1a:	08 95       	ret
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
}
    1d1e:	08 95       	ret

00001d20 <_ZN6String7replaceEcc>:

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    1d20:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    1d22:	01 90       	ld	r0, Z+
    1d24:	f0 81       	ld	r31, Z
    1d26:	e0 2d       	mov	r30, r0
    1d28:	30 97       	sbiw	r30, 0x00	; 0
    1d2a:	29 f4       	brne	.+10     	; 0x1d36 <_ZN6String7replaceEcc+0x16>
    1d2c:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    1d2e:	86 17       	cp	r24, r22
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <_ZN6String7replaceEcc+0x14>
    1d32:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    1d34:	31 96       	adiw	r30, 0x01	; 1
    1d36:	80 81       	ld	r24, Z
    1d38:	88 23       	and	r24, r24
    1d3a:	c9 f7       	brne	.-14     	; 0x1d2e <_ZN6String7replaceEcc+0xe>
    1d3c:	08 95       	ret

00001d3e <_ZNK6String5toIntEv>:

/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
    1d3e:	fc 01       	movw	r30, r24
{
	if (buffer) return atol(buffer);
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	29 f4       	brne	.+10     	; 0x1d52 <_ZNK6String5toIntEv+0x14>
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	50 e0       	ldi	r21, 0x00	; 0
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <_ZNK6String5toIntEv+0x1c>
    1d52:	0e 94 40 1a 	call	0x3480	; 0x3480 <atol>
    1d56:	9b 01       	movw	r18, r22
    1d58:	ac 01       	movw	r20, r24
	return 0;
}
    1d5a:	b9 01       	movw	r22, r18
    1d5c:	ca 01       	movw	r24, r20
    1d5e:	08 95       	ret

00001d60 <_ZN6String4trimEv>:
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}

void String::trim(void)
    1d60:	cf 92       	push	r12
    1d62:	df 92       	push	r13
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	6c 01       	movw	r12, r24
{
	if (!buffer || len == 0) return;
    1d72:	dc 01       	movw	r26, r24
    1d74:	ed 90       	ld	r14, X+
    1d76:	fc 90       	ld	r15, X
    1d78:	11 97       	sbiw	r26, 0x01	; 1
    1d7a:	e1 14       	cp	r14, r1
    1d7c:	f1 04       	cpc	r15, r1
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <_ZN6String4trimEv+0x22>
    1d80:	41 c0       	rjmp	.+130    	; 0x1e04 <_ZN6String4trimEv+0xa4>
    1d82:	14 96       	adiw	r26, 0x04	; 4
    1d84:	cd 91       	ld	r28, X+
    1d86:	dc 91       	ld	r29, X
    1d88:	15 97       	sbiw	r26, 0x05	; 5
    1d8a:	20 97       	sbiw	r28, 0x00	; 0
    1d8c:	d9 f1       	breq	.+118    	; 0x1e04 <_ZN6String4trimEv+0xa4>
    1d8e:	87 01       	movw	r16, r14
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <_ZN6String4trimEv+0x36>
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    1d92:	0f 5f       	subi	r16, 0xFF	; 255
    1d94:	1f 4f       	sbci	r17, 0xFF	; 255
    1d96:	f8 01       	movw	r30, r16
    1d98:	80 81       	ld	r24, Z
    1d9a:	99 27       	eor	r25, r25
    1d9c:	87 fd       	sbrc	r24, 7
    1d9e:	90 95       	com	r25
    1da0:	0e 94 67 1a 	call	0x34ce	; 0x34ce <isspace>
    1da4:	89 2b       	or	r24, r25
    1da6:	a9 f7       	brne	.-22     	; 0x1d92 <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    1da8:	21 97       	sbiw	r28, 0x01	; 1
    1daa:	ce 0d       	add	r28, r14
    1dac:	df 1d       	adc	r29, r15
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <_ZN6String4trimEv+0x52>
	while (isspace(*end) && end >= begin) end--;
    1db0:	21 97       	sbiw	r28, 0x01	; 1
    1db2:	88 81       	ld	r24, Y
    1db4:	99 27       	eor	r25, r25
    1db6:	87 fd       	sbrc	r24, 7
    1db8:	90 95       	com	r25
    1dba:	0e 94 67 1a 	call	0x34ce	; 0x34ce <isspace>
    1dbe:	89 2b       	or	r24, r25
    1dc0:	19 f0       	breq	.+6      	; 0x1dc8 <_ZN6String4trimEv+0x68>
    1dc2:	c0 17       	cp	r28, r16
    1dc4:	d1 07       	cpc	r29, r17
    1dc6:	a0 f7       	brcc	.-24     	; 0x1db0 <_ZN6String4trimEv+0x50>
	len = end + 1 - begin;
    1dc8:	fe 01       	movw	r30, r28
    1dca:	31 96       	adiw	r30, 0x01	; 1
    1dcc:	e0 1b       	sub	r30, r16
    1dce:	f1 0b       	sbc	r31, r17
    1dd0:	d6 01       	movw	r26, r12
    1dd2:	15 96       	adiw	r26, 0x05	; 5
    1dd4:	fc 93       	st	X, r31
    1dd6:	ee 93       	st	-X, r30
    1dd8:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    1dda:	2d 91       	ld	r18, X+
    1ddc:	3c 91       	ld	r19, X
    1dde:	20 17       	cp	r18, r16
    1de0:	31 07       	cpc	r19, r17
    1de2:	28 f4       	brcc	.+10     	; 0x1dee <_ZN6String4trimEv+0x8e>
    1de4:	c9 01       	movw	r24, r18
    1de6:	b8 01       	movw	r22, r16
    1de8:	af 01       	movw	r20, r30
    1dea:	0e 94 8c 1a 	call	0x3518	; 0x3518 <memcpy>
	buffer[len] = 0;
    1dee:	d6 01       	movw	r26, r12
    1df0:	ed 91       	ld	r30, X+
    1df2:	fc 91       	ld	r31, X
    1df4:	11 97       	sbiw	r26, 0x01	; 1
    1df6:	14 96       	adiw	r26, 0x04	; 4
    1df8:	8d 91       	ld	r24, X+
    1dfa:	9c 91       	ld	r25, X
    1dfc:	15 97       	sbiw	r26, 0x05	; 5
    1dfe:	e8 0f       	add	r30, r24
    1e00:	f9 1f       	adc	r31, r25
    1e02:	10 82       	st	Z, r1
}
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	df 90       	pop	r13
    1e12:	cf 90       	pop	r12
    1e14:	08 95       	ret

00001e16 <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    1e1c:	c0 81       	ld	r28, Z
    1e1e:	d1 81       	ldd	r29, Z+1	; 0x01
    1e20:	20 97       	sbiw	r28, 0x00	; 0
    1e22:	39 f4       	brne	.+14     	; 0x1e32 <_ZN6String11toUpperCaseEv+0x1c>
    1e24:	09 c0       	rjmp	.+18     	; 0x1e38 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    1e26:	99 27       	eor	r25, r25
    1e28:	87 fd       	sbrc	r24, 7
    1e2a:	90 95       	com	r25
    1e2c:	0e 94 77 1a 	call	0x34ee	; 0x34ee <toupper>
    1e30:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    1e32:	88 81       	ld	r24, Y
    1e34:	88 23       	and	r24, r24
    1e36:	b9 f7       	brne	.-18     	; 0x1e26 <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <_ZN6String11toLowerCaseEv>:
			index--;
		}
	}
}

void String::toLowerCase(void)
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    1e44:	c0 81       	ld	r28, Z
    1e46:	d1 81       	ldd	r29, Z+1	; 0x01
    1e48:	20 97       	sbiw	r28, 0x00	; 0
    1e4a:	39 f4       	brne	.+14     	; 0x1e5a <_ZN6String11toLowerCaseEv+0x1c>
    1e4c:	09 c0       	rjmp	.+18     	; 0x1e60 <_ZN6String11toLowerCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    1e4e:	99 27       	eor	r25, r25
    1e50:	87 fd       	sbrc	r24, 7
    1e52:	90 95       	com	r25
    1e54:	0e 94 6f 1a 	call	0x34de	; 0x34de <tolower>
    1e58:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    1e5a:	88 81       	ld	r24, Y
    1e5c:	88 23       	and	r24, r24
    1e5e:	b9 f7       	brne	.-18     	; 0x1e4e <_ZN6String11toLowerCaseEv+0x10>
		*p = tolower(*p);
	}
}
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	08 95       	ret

00001e66 <_ZNK6String16equalsIgnoreCaseERKS_>:
unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
    1e66:	ef 92       	push	r14
    1e68:	ff 92       	push	r15
    1e6a:	0f 93       	push	r16
    1e6c:	1f 93       	push	r17
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	fc 01       	movw	r30, r24
    1e74:	db 01       	movw	r26, r22
{
	if (this == &s2) return 1;
    1e76:	86 17       	cp	r24, r22
    1e78:	97 07       	cpc	r25, r23
    1e7a:	39 f1       	breq	.+78     	; 0x1eca <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len != s2.len) return 0;
    1e7c:	24 81       	ldd	r18, Z+4	; 0x04
    1e7e:	35 81       	ldd	r19, Z+5	; 0x05
    1e80:	14 96       	adiw	r26, 0x04	; 4
    1e82:	8d 91       	ld	r24, X+
    1e84:	9c 91       	ld	r25, X
    1e86:	15 97       	sbiw	r26, 0x05	; 5
    1e88:	28 17       	cp	r18, r24
    1e8a:	39 07       	cpc	r19, r25
    1e8c:	01 f5       	brne	.+64     	; 0x1ece <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
	if (len == 0) return 1;
    1e8e:	23 2b       	or	r18, r19
    1e90:	e1 f0       	breq	.+56     	; 0x1eca <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	const char *p1 = buffer;
    1e92:	e0 80       	ld	r14, Z
    1e94:	f1 80       	ldd	r15, Z+1	; 0x01
	const char *p2 = s2.buffer;
    1e96:	cd 91       	ld	r28, X+
    1e98:	dc 91       	ld	r29, X
    1e9a:	13 c0       	rjmp	.+38     	; 0x1ec2 <_ZNK6String16equalsIgnoreCaseERKS_+0x5c>
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    1e9c:	99 27       	eor	r25, r25
    1e9e:	87 fd       	sbrc	r24, 7
    1ea0:	90 95       	com	r25
    1ea2:	0e 94 6f 1a 	call	0x34de	; 0x34de <tolower>
    1ea6:	8c 01       	movw	r16, r24
    1ea8:	88 81       	ld	r24, Y
    1eaa:	99 27       	eor	r25, r25
    1eac:	87 fd       	sbrc	r24, 7
    1eae:	90 95       	com	r25
    1eb0:	0e 94 6f 1a 	call	0x34de	; 0x34de <tolower>
    1eb4:	08 17       	cp	r16, r24
    1eb6:	19 07       	cpc	r17, r25
    1eb8:	51 f4       	brne	.+20     	; 0x1ece <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
    1eba:	08 94       	sec
    1ebc:	e1 1c       	adc	r14, r1
    1ebe:	f1 1c       	adc	r15, r1
    1ec0:	21 96       	adiw	r28, 0x01	; 1
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    1ec2:	f7 01       	movw	r30, r14
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 23       	and	r24, r24
    1ec8:	49 f7       	brne	.-46     	; 0x1e9c <_ZNK6String16equalsIgnoreCaseERKS_+0x36>
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <_ZNK6String16equalsIgnoreCaseERKS_+0x6a>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	08 95       	ret

00001ede <_ZNK6String11lastIndexOfERKS_j>:
int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
    1ede:	af 92       	push	r10
    1ee0:	bf 92       	push	r11
    1ee2:	cf 92       	push	r12
    1ee4:	df 92       	push	r13
    1ee6:	ef 92       	push	r14
    1ee8:	ff 92       	push	r15
    1eea:	0f 93       	push	r16
    1eec:	1f 93       	push	r17
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	5b 01       	movw	r10, r22
    1ef6:	7a 01       	movw	r14, r20
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    1ef8:	db 01       	movw	r26, r22
    1efa:	14 96       	adiw	r26, 0x04	; 4
    1efc:	2d 91       	ld	r18, X+
    1efe:	3c 91       	ld	r19, X
    1f00:	15 97       	sbiw	r26, 0x05	; 5
    1f02:	21 15       	cp	r18, r1
    1f04:	31 05       	cpc	r19, r1
    1f06:	59 f1       	breq	.+86     	; 0x1f5e <_ZNK6String11lastIndexOfERKS_j+0x80>
    1f08:	84 81       	ldd	r24, Z+4	; 0x04
    1f0a:	95 81       	ldd	r25, Z+5	; 0x05
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	39 f1       	breq	.+78     	; 0x1f5e <_ZNK6String11lastIndexOfERKS_j+0x80>
    1f10:	82 17       	cp	r24, r18
    1f12:	93 07       	cpc	r25, r19
    1f14:	20 f1       	brcs	.+72     	; 0x1f5e <_ZNK6String11lastIndexOfERKS_j+0x80>
	if (fromIndex >= len) fromIndex = len - 1;
    1f16:	48 17       	cp	r20, r24
    1f18:	59 07       	cpc	r21, r25
    1f1a:	20 f0       	brcs	.+8      	; 0x1f24 <_ZNK6String11lastIndexOfERKS_j+0x46>
    1f1c:	7c 01       	movw	r14, r24
    1f1e:	08 94       	sec
    1f20:	e1 08       	sbc	r14, r1
    1f22:	f1 08       	sbc	r15, r1
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    1f24:	00 81       	ld	r16, Z
    1f26:	11 81       	ldd	r17, Z+1	; 0x01
    1f28:	c8 01       	movw	r24, r16
    1f2a:	cf ef       	ldi	r28, 0xFF	; 255
    1f2c:	df ef       	ldi	r29, 0xFF	; 255
    1f2e:	68 01       	movw	r12, r16
    1f30:	ce 0c       	add	r12, r14
    1f32:	df 1c       	adc	r13, r15
    1f34:	10 c0       	rjmp	.+32     	; 0x1f56 <_ZNK6String11lastIndexOfERKS_j+0x78>
		p = strstr(p, s2.buffer);
    1f36:	f5 01       	movw	r30, r10
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <strstr>
    1f40:	9c 01       	movw	r18, r24
		if (!p) break;
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	71 f0       	breq	.+28     	; 0x1f62 <_ZNK6String11lastIndexOfERKS_j+0x84>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    1f46:	80 1b       	sub	r24, r16
    1f48:	91 0b       	sbc	r25, r17
    1f4a:	e8 16       	cp	r14, r24
    1f4c:	f9 06       	cpc	r15, r25
    1f4e:	08 f0       	brcs	.+2      	; 0x1f52 <_ZNK6String11lastIndexOfERKS_j+0x74>
    1f50:	ec 01       	movw	r28, r24
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    1f52:	c9 01       	movw	r24, r18
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	c8 16       	cp	r12, r24
    1f58:	d9 06       	cpc	r13, r25
    1f5a:	68 f7       	brcc	.-38     	; 0x1f36 <_ZNK6String11lastIndexOfERKS_j+0x58>
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <_ZNK6String11lastIndexOfERKS_j+0x84>
    1f5e:	cf ef       	ldi	r28, 0xFF	; 255
    1f60:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    1f62:	ce 01       	movw	r24, r28
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	cf 90       	pop	r12
    1f74:	bf 90       	pop	r11
    1f76:	af 90       	pop	r10
    1f78:	08 95       	ret

00001f7a <_ZNK6String11lastIndexOfERKS_>:
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	db 01       	movw	r26, r22
{
	return lastIndexOf(s2, len - s2.len);
    1f7e:	44 81       	ldd	r20, Z+4	; 0x04
    1f80:	55 81       	ldd	r21, Z+5	; 0x05
    1f82:	14 96       	adiw	r26, 0x04	; 4
    1f84:	8d 91       	ld	r24, X+
    1f86:	9c 91       	ld	r25, X
    1f88:	15 97       	sbiw	r26, 0x05	; 5
    1f8a:	48 1b       	sub	r20, r24
    1f8c:	59 0b       	sbc	r21, r25
    1f8e:	cf 01       	movw	r24, r30
    1f90:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <_ZNK6String11lastIndexOfERKS_j>
}
    1f94:	08 95       	ret

00001f96 <_ZNK6String7indexOfERKS_j>:
int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	db 01       	movw	r26, r22
{
	if (fromIndex >= len) return -1;
    1f9e:	84 81       	ldd	r24, Z+4	; 0x04
    1fa0:	95 81       	ldd	r25, Z+5	; 0x05
    1fa2:	48 17       	cp	r20, r24
    1fa4:	59 07       	cpc	r21, r25
    1fa6:	60 f4       	brcc	.+24     	; 0x1fc0 <_ZNK6String7indexOfERKS_j+0x2a>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    1fa8:	c0 81       	ld	r28, Z
    1faa:	d1 81       	ldd	r29, Z+1	; 0x01
    1fac:	6d 91       	ld	r22, X+
    1fae:	7c 91       	ld	r23, X
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	84 0f       	add	r24, r20
    1fb4:	95 1f       	adc	r25, r21
    1fb6:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <strstr>
    1fba:	9c 01       	movw	r18, r24
	if (found == NULL) return -1;
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <_ZNK6String7indexOfERKS_j+0x30>
    1fc0:	2f ef       	ldi	r18, 0xFF	; 255
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <_ZNK6String7indexOfERKS_j+0x34>
	return found - buffer;
    1fc6:	2c 1b       	sub	r18, r28
    1fc8:	3d 0b       	sbc	r19, r29
}
    1fca:	c9 01       	movw	r24, r18
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZNK6String7indexOfERKS_j>
}
    1fda:	08 95       	ret

00001fdc <_ZNK6String11lastIndexOfEcj>:
int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
    1fdc:	df 92       	push	r13
    1fde:	ef 92       	push	r14
    1fe0:	ff 92       	push	r15
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	ec 01       	movw	r28, r24
{
	if (fromIndex >= len) return -1;
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	48 17       	cp	r20, r24
    1ff2:	59 07       	cpc	r21, r25
    1ff4:	c8 f4       	brcc	.+50     	; 0x2028 <_ZNK6String11lastIndexOfEcj+0x4c>
	char tempchar = buffer[fromIndex + 1];
    1ff6:	7a 01       	movw	r14, r20
    1ff8:	08 94       	sec
    1ffa:	e1 1c       	adc	r14, r1
    1ffc:	f1 1c       	adc	r15, r1
    1ffe:	e8 81       	ld	r30, Y
    2000:	f9 81       	ldd	r31, Y+1	; 0x01
    2002:	ee 0d       	add	r30, r14
    2004:	ff 1d       	adc	r31, r15
    2006:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    2008:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    200a:	08 81       	ld	r16, Y
    200c:	19 81       	ldd	r17, Y+1	; 0x01
    200e:	77 27       	eor	r23, r23
    2010:	67 fd       	sbrc	r22, 7
    2012:	70 95       	com	r23
    2014:	c8 01       	movw	r24, r16
    2016:	0e 94 df 1a 	call	0x35be	; 0x35be <strrchr>
    201a:	9c 01       	movw	r18, r24
	buffer[fromIndex + 1] = tempchar;
    201c:	0e 0d       	add	r16, r14
    201e:	1f 1d       	adc	r17, r15
    2020:	f8 01       	movw	r30, r16
    2022:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	19 f4       	brne	.+6      	; 0x202e <_ZNK6String11lastIndexOfEcj+0x52>
    2028:	ef ef       	ldi	r30, 0xFF	; 255
    202a:	ff ef       	ldi	r31, 0xFF	; 255
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <_ZNK6String11lastIndexOfEcj+0x5c>
	return temp - buffer;
    202e:	88 81       	ld	r24, Y
    2030:	99 81       	ldd	r25, Y+1	; 0x01
    2032:	f9 01       	movw	r30, r18
    2034:	e8 1b       	sub	r30, r24
    2036:	f9 0b       	sbc	r31, r25
}
    2038:	cf 01       	movw	r24, r30
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	ff 90       	pop	r15
    2044:	ef 90       	pop	r14
    2046:	df 90       	pop	r13
    2048:	08 95       	ret

0000204a <_ZNK6String11lastIndexOfEc>:
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
    204a:	fc 01       	movw	r30, r24
{
	return lastIndexOf(theChar, len - 1);
    204c:	44 81       	ldd	r20, Z+4	; 0x04
    204e:	55 81       	ldd	r21, Z+5	; 0x05
    2050:	41 50       	subi	r20, 0x01	; 1
    2052:	50 40       	sbci	r21, 0x00	; 0
    2054:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZNK6String11lastIndexOfEcj>
}
    2058:	08 95       	ret

0000205a <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	fc 01       	movw	r30, r24
{
	if (fromIndex >= len) return -1;
    2060:	84 81       	ldd	r24, Z+4	; 0x04
    2062:	95 81       	ldd	r25, Z+5	; 0x05
    2064:	48 17       	cp	r20, r24
    2066:	59 07       	cpc	r21, r25
    2068:	68 f4       	brcc	.+26     	; 0x2084 <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    206a:	c0 81       	ld	r28, Z
    206c:	d1 81       	ldd	r29, Z+1	; 0x01
    206e:	77 27       	eor	r23, r23
    2070:	67 fd       	sbrc	r22, 7
    2072:	70 95       	com	r23
    2074:	ce 01       	movw	r24, r28
    2076:	84 0f       	add	r24, r20
    2078:	95 1f       	adc	r25, r21
    207a:	0e 94 a7 1a 	call	0x354e	; 0x354e <strchr>
    207e:	9c 01       	movw	r18, r24
	if (temp == NULL) return -1;
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	19 f4       	brne	.+6      	; 0x208a <_ZNK6String7indexOfEcj+0x30>
    2084:	2f ef       	ldi	r18, 0xFF	; 255
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	02 c0       	rjmp	.+4      	; 0x208e <_ZNK6String7indexOfEcj+0x34>
	return temp - buffer;
    208a:	2c 1b       	sub	r18, r28
    208c:	3d 0b       	sbc	r19, r29
}
    208e:	c9 01       	movw	r24, r18
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	08 95       	ret

00002096 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	0e 94 2d 10 	call	0x205a	; 0x205a <_ZNK6String7indexOfEcj>
}
    209e:	08 95       	ret

000020a0 <_ZNK6String8getBytesEPhjj>:
{
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	fc 01       	movw	r30, r24
    20aa:	8b 01       	movw	r16, r22
{
	if (!bufsize || !buf) return;
    20ac:	41 15       	cp	r20, r1
    20ae:	51 05       	cpc	r21, r1
    20b0:	f9 f0       	breq	.+62     	; 0x20f0 <_ZNK6String8getBytesEPhjj+0x50>
    20b2:	61 15       	cp	r22, r1
    20b4:	71 05       	cpc	r23, r1
    20b6:	e1 f0       	breq	.+56     	; 0x20f0 <_ZNK6String8getBytesEPhjj+0x50>
	if (index >= len) {
    20b8:	84 81       	ldd	r24, Z+4	; 0x04
    20ba:	95 81       	ldd	r25, Z+5	; 0x05
    20bc:	28 17       	cp	r18, r24
    20be:	39 07       	cpc	r19, r25
    20c0:	18 f0       	brcs	.+6      	; 0x20c8 <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    20c2:	fb 01       	movw	r30, r22
    20c4:	10 82       	st	Z, r1
    20c6:	14 c0       	rjmp	.+40     	; 0x20f0 <_ZNK6String8getBytesEPhjj+0x50>
		return;
	}
	unsigned int n = bufsize - 1;
    20c8:	41 50       	subi	r20, 0x01	; 1
    20ca:	50 40       	sbci	r21, 0x00	; 0
    20cc:	ec 01       	movw	r28, r24
    20ce:	c2 1b       	sub	r28, r18
    20d0:	d3 0b       	sbc	r29, r19
    20d2:	4c 17       	cp	r20, r28
    20d4:	5d 07       	cpc	r21, r29
    20d6:	08 f4       	brcc	.+2      	; 0x20da <_ZNK6String8getBytesEPhjj+0x3a>
    20d8:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	62 0f       	add	r22, r18
    20e0:	73 1f       	adc	r23, r19
    20e2:	c8 01       	movw	r24, r16
    20e4:	ae 01       	movw	r20, r28
    20e6:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <strncpy>
	buf[n] = 0;
    20ea:	c0 0f       	add	r28, r16
    20ec:	d1 1f       	adc	r29, r17
    20ee:	18 82       	st	Y, r1
}
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	1f 91       	pop	r17
    20f6:	0f 91       	pop	r16
    20f8:	08 95       	ret

000020fa <_ZNK6String8endsWithERKS_>:
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
    20fa:	fc 01       	movw	r30, r24
    20fc:	db 01       	movw	r26, r22
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    20fe:	24 81       	ldd	r18, Z+4	; 0x04
    2100:	35 81       	ldd	r19, Z+5	; 0x05
    2102:	14 96       	adiw	r26, 0x04	; 4
    2104:	4d 91       	ld	r20, X+
    2106:	5c 91       	ld	r21, X
    2108:	15 97       	sbiw	r26, 0x05	; 5
    210a:	24 17       	cp	r18, r20
    210c:	35 07       	cpc	r19, r21
    210e:	a8 f0       	brcs	.+42     	; 0x213a <_ZNK6String8endsWithERKS_+0x40>
    2110:	80 81       	ld	r24, Z
    2112:	91 81       	ldd	r25, Z+1	; 0x01
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	89 f0       	breq	.+34     	; 0x213a <_ZNK6String8endsWithERKS_+0x40>
    2118:	6d 91       	ld	r22, X+
    211a:	7c 91       	ld	r23, X
    211c:	61 15       	cp	r22, r1
    211e:	71 05       	cpc	r23, r1
    2120:	61 f0       	breq	.+24     	; 0x213a <_ZNK6String8endsWithERKS_+0x40>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    2122:	24 1b       	sub	r18, r20
    2124:	35 0b       	sbc	r19, r21
    2126:	82 0f       	add	r24, r18
    2128:	93 1f       	adc	r25, r19
    212a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <strcmp>
    212e:	9c 01       	movw	r18, r24
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	23 2b       	or	r18, r19
    2134:	19 f4       	brne	.+6      	; 0x213c <_ZNK6String8endsWithERKS_+0x42>
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	08 95       	ret
    213a:	80 e0       	ldi	r24, 0x00	; 0
}
    213c:	08 95       	ret

0000213e <_ZNK6String6equalsEPKc>:
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    213e:	dc 01       	movw	r26, r24
    2140:	fb 01       	movw	r30, r22
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2142:	14 96       	adiw	r26, 0x04	; 4
    2144:	8d 91       	ld	r24, X+
    2146:	9c 91       	ld	r25, X
    2148:	15 97       	sbiw	r26, 0x05	; 5
    214a:	89 2b       	or	r24, r25
    214c:	31 f4       	brne	.+12     	; 0x215a <_ZNK6String6equalsEPKc+0x1c>
    214e:	61 15       	cp	r22, r1
    2150:	71 05       	cpc	r23, r1
    2152:	a9 f0       	breq	.+42     	; 0x217e <_ZNK6String6equalsEPKc+0x40>
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	08 c0       	rjmp	.+16     	; 0x216a <_ZNK6String6equalsEPKc+0x2c>
    215a:	0d 90       	ld	r0, X+
    215c:	bc 91       	ld	r27, X
    215e:	a0 2d       	mov	r26, r0
	if (cstr == NULL) return buffer[0] == 0;
    2160:	61 15       	cp	r22, r1
    2162:	71 05       	cpc	r23, r1
    2164:	29 f4       	brne	.+10     	; 0x2170 <_ZNK6String6equalsEPKc+0x32>
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	8c 91       	ld	r24, X
    216a:	88 23       	and	r24, r24
    216c:	49 f4       	brne	.+18     	; 0x2180 <_ZNK6String6equalsEPKc+0x42>
    216e:	07 c0       	rjmp	.+14     	; 0x217e <_ZNK6String6equalsEPKc+0x40>
	return strcmp(buffer, cstr) == 0;
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 b2 1a 	call	0x3564	; 0x3564 <strcmp>
    2176:	9c 01       	movw	r18, r24
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	23 2b       	or	r18, r19
    217c:	09 f4       	brne	.+2      	; 0x2180 <_ZNK6String6equalsEPKc+0x42>
    217e:	91 e0       	ldi	r25, 0x01	; 1
}
    2180:	89 2f       	mov	r24, r25
    2182:	08 95       	ret

00002184 <_ZNK6String9compareToERKS_>:

/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	9c 01       	movw	r18, r24
    218a:	fb 01       	movw	r30, r22
{
	if (!buffer || !s.buffer) {
    218c:	ec 01       	movw	r28, r24
    218e:	a8 81       	ld	r26, Y
    2190:	b9 81       	ldd	r27, Y+1	; 0x01
    2192:	10 97       	sbiw	r26, 0x00	; 0
    2194:	29 f0       	breq	.+10     	; 0x21a0 <_ZNK6String9compareToERKS_+0x1c>
    2196:	60 81       	ld	r22, Z
    2198:	71 81       	ldd	r23, Z+1	; 0x01
    219a:	61 15       	cp	r22, r1
    219c:	71 05       	cpc	r23, r1
    219e:	d1 f4       	brne	.+52     	; 0x21d4 <_ZNK6String9compareToERKS_+0x50>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    21a0:	c0 81       	ld	r28, Z
    21a2:	d1 81       	ldd	r29, Z+1	; 0x01
    21a4:	20 97       	sbiw	r28, 0x00	; 0
    21a6:	59 f0       	breq	.+22     	; 0x21be <_ZNK6String9compareToERKS_+0x3a>
    21a8:	84 81       	ldd	r24, Z+4	; 0x04
    21aa:	95 81       	ldd	r25, Z+5	; 0x05
    21ac:	89 2b       	or	r24, r25
    21ae:	39 f0       	breq	.+14     	; 0x21be <_ZNK6String9compareToERKS_+0x3a>
    21b0:	88 81       	ld	r24, Y
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	22 27       	eor	r18, r18
    21b6:	33 27       	eor	r19, r19
    21b8:	28 1b       	sub	r18, r24
    21ba:	39 0b       	sbc	r19, r25
    21bc:	12 c0       	rjmp	.+36     	; 0x21e2 <_ZNK6String9compareToERKS_+0x5e>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    21be:	10 97       	sbiw	r26, 0x00	; 0
    21c0:	71 f0       	breq	.+28     	; 0x21de <_ZNK6String9compareToERKS_+0x5a>
    21c2:	f9 01       	movw	r30, r18
    21c4:	84 81       	ldd	r24, Z+4	; 0x04
    21c6:	95 81       	ldd	r25, Z+5	; 0x05
    21c8:	89 2b       	or	r24, r25
    21ca:	49 f0       	breq	.+18     	; 0x21de <_ZNK6String9compareToERKS_+0x5a>
    21cc:	8c 91       	ld	r24, X
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	07 c0       	rjmp	.+14     	; 0x21e2 <_ZNK6String9compareToERKS_+0x5e>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <strcmp>
    21da:	9c 01       	movw	r18, r24
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <_ZNK6String9compareToERKS_+0x5e>
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
}
    21e2:	c9 01       	movw	r24, r18
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

000021ea <_ZNK6StringgeERKS_>:
	return compareTo(rhs) <= 0;
}

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    21ea:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZNK6String9compareToERKS_>
    21ee:	89 2f       	mov	r24, r25
    21f0:	80 95       	com	r24
}
    21f2:	88 1f       	adc	r24, r24
    21f4:	88 27       	eor	r24, r24
    21f6:	88 1f       	adc	r24, r24
    21f8:	08 95       	ret

000021fa <_ZNK6StringleERKS_>:
	return compareTo(rhs) > 0;
}

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    21fa:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZNK6String9compareToERKS_>
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	18 16       	cp	r1, r24
    2202:	19 06       	cpc	r1, r25
    2204:	0c f0       	brlt	.+2      	; 0x2208 <__stack+0x9>
    2206:	21 e0       	ldi	r18, 0x01	; 1
}
    2208:	82 2f       	mov	r24, r18
    220a:	08 95       	ret

0000220c <_ZNK6StringgtERKS_>:
	return compareTo(rhs) < 0;
}

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    220c:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZNK6String9compareToERKS_>
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	18 16       	cp	r1, r24
    2214:	19 06       	cpc	r1, r25
    2216:	0c f4       	brge	.+2      	; 0x221a <_ZNK6StringgtERKS_+0xe>
    2218:	21 e0       	ldi	r18, 0x01	; 1
}
    221a:	82 2f       	mov	r24, r18
    221c:	08 95       	ret

0000221e <_ZNK6StringltERKS_>:
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    221e:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZNK6String9compareToERKS_>
}
    2222:	89 2f       	mov	r24, r25
    2224:	88 1f       	adc	r24, r24
    2226:	88 27       	eor	r24, r24
    2228:	88 1f       	adc	r24, r24
    222a:	08 95       	ret

0000222c <_ZNK6String6equalsERKS_>:
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    222c:	fc 01       	movw	r30, r24
    222e:	db 01       	movw	r26, r22
{
	return (len == s2.len && compareTo(s2) == 0);
    2230:	24 81       	ldd	r18, Z+4	; 0x04
    2232:	35 81       	ldd	r19, Z+5	; 0x05
    2234:	14 96       	adiw	r26, 0x04	; 4
    2236:	8d 91       	ld	r24, X+
    2238:	9c 91       	ld	r25, X
    223a:	15 97       	sbiw	r26, 0x05	; 5
    223c:	28 17       	cp	r18, r24
    223e:	39 07       	cpc	r19, r25
    2240:	11 f0       	breq	.+4      	; 0x2246 <_ZNK6String6equalsERKS_+0x1a>
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	07 c0       	rjmp	.+14     	; 0x2254 <_ZNK6String6equalsERKS_+0x28>
    2246:	cf 01       	movw	r24, r30
    2248:	0e 94 c2 10 	call	0x2184	; 0x2184 <_ZNK6String9compareToERKS_>
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	89 2b       	or	r24, r25
    2250:	09 f4       	brne	.+2      	; 0x2254 <_ZNK6String6equalsERKS_+0x28>
    2252:	21 e0       	ldi	r18, 0x01	; 1
}
    2254:	82 2f       	mov	r24, r18
    2256:	08 95       	ret

00002258 <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
    2258:	fc 01       	movw	r30, r24
    225a:	db 01       	movw	r26, r22
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    225c:	14 96       	adiw	r26, 0x04	; 4
    225e:	2d 91       	ld	r18, X+
    2260:	3c 91       	ld	r19, X
    2262:	15 97       	sbiw	r26, 0x05	; 5
    2264:	84 81       	ldd	r24, Z+4	; 0x04
    2266:	95 81       	ldd	r25, Z+5	; 0x05
    2268:	82 1b       	sub	r24, r18
    226a:	93 0b       	sbc	r25, r19
    226c:	84 17       	cp	r24, r20
    226e:	95 07       	cpc	r25, r21
    2270:	a0 f0       	brcs	.+40     	; 0x229a <_ZNK6String10startsWithERKS_j+0x42>
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	81 f0       	breq	.+32     	; 0x229a <_ZNK6String10startsWithERKS_j+0x42>
    227a:	6d 91       	ld	r22, X+
    227c:	7c 91       	ld	r23, X
    227e:	61 15       	cp	r22, r1
    2280:	71 05       	cpc	r23, r1
    2282:	59 f0       	breq	.+22     	; 0x229a <_ZNK6String10startsWithERKS_j+0x42>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    2284:	84 0f       	add	r24, r20
    2286:	95 1f       	adc	r25, r21
    2288:	a9 01       	movw	r20, r18
    228a:	0e 94 c2 1a 	call	0x3584	; 0x3584 <strncmp>
    228e:	9c 01       	movw	r18, r24
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	23 2b       	or	r18, r19
    2294:	19 f4       	brne	.+6      	; 0x229c <_ZNK6String10startsWithERKS_j+0x44>
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	08 95       	ret
    229a:	80 e0       	ldi	r24, 0x00	; 0
}
    229c:	08 95       	ret

0000229e <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
    229e:	fc 01       	movw	r30, r24
    22a0:	db 01       	movw	r26, r22
{
	if (len < s2.len) return 0;
    22a2:	24 81       	ldd	r18, Z+4	; 0x04
    22a4:	35 81       	ldd	r19, Z+5	; 0x05
    22a6:	14 96       	adiw	r26, 0x04	; 4
    22a8:	8d 91       	ld	r24, X+
    22aa:	9c 91       	ld	r25, X
    22ac:	15 97       	sbiw	r26, 0x05	; 5
    22ae:	28 17       	cp	r18, r24
    22b0:	39 07       	cpc	r19, r25
    22b2:	10 f4       	brcc	.+4      	; 0x22b8 <_ZNK6String10startsWithERKS_+0x1a>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	08 95       	ret
	return startsWith(s2, 0);
    22b8:	cf 01       	movw	r24, r30
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZNK6String10startsWithERKS_j>
}
    22c2:	08 95       	ret

000022c4 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    22cc:	ec 01       	movw	r28, r24
    22ce:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    22d0:	6f 5f       	subi	r22, 0xFF	; 255
    22d2:	7f 4f       	sbci	r23, 0xFF	; 255
    22d4:	88 81       	ld	r24, Y
    22d6:	99 81       	ldd	r25, Y+1	; 0x01
    22d8:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <realloc>
	if (newbuffer) {
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	11 f4       	brne	.+4      	; 0x22e4 <_ZN6String12changeBufferEj+0x20>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	05 c0       	rjmp	.+10     	; 0x22ee <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    22e4:	99 83       	std	Y+1, r25	; 0x01
    22e6:	88 83       	st	Y, r24
		capacity = maxStrLen;
    22e8:	1b 83       	std	Y+3, r17	; 0x03
    22ea:	0a 83       	std	Y+2, r16	; 0x02
    22ec:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	08 95       	ret

000022f8 <_ZN6String7replaceERKS_S1_>:
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
    22f8:	2f 92       	push	r2
    22fa:	3f 92       	push	r3
    22fc:	4f 92       	push	r4
    22fe:	5f 92       	push	r5
    2300:	6f 92       	push	r6
    2302:	7f 92       	push	r7
    2304:	8f 92       	push	r8
    2306:	9f 92       	push	r9
    2308:	af 92       	push	r10
    230a:	bf 92       	push	r11
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	5c 01       	movw	r10, r24
    231e:	2b 01       	movw	r4, r22
    2320:	4a 01       	movw	r8, r20
{
	if (len == 0 || find.len == 0) return;
    2322:	dc 01       	movw	r26, r24
    2324:	14 96       	adiw	r26, 0x04	; 4
    2326:	0d 91       	ld	r16, X+
    2328:	1c 91       	ld	r17, X
    232a:	15 97       	sbiw	r26, 0x05	; 5
    232c:	01 15       	cp	r16, r1
    232e:	11 05       	cpc	r17, r1
    2330:	09 f4       	brne	.+2      	; 0x2334 <_ZN6String7replaceERKS_S1_+0x3c>
    2332:	d4 c0       	rjmp	.+424    	; 0x24dc <_ZN6String7replaceERKS_S1_+0x1e4>
    2334:	fb 01       	movw	r30, r22
    2336:	c4 80       	ldd	r12, Z+4	; 0x04
    2338:	d5 80       	ldd	r13, Z+5	; 0x05
    233a:	c1 14       	cp	r12, r1
    233c:	d1 04       	cpc	r13, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <_ZN6String7replaceERKS_S1_+0x4a>
    2340:	cd c0       	rjmp	.+410    	; 0x24dc <_ZN6String7replaceERKS_S1_+0x1e4>
	int diff = replace.len - find.len;
    2342:	da 01       	movw	r26, r20
    2344:	14 96       	adiw	r26, 0x04	; 4
    2346:	6d 90       	ld	r6, X+
    2348:	7c 90       	ld	r7, X
    234a:	15 97       	sbiw	r26, 0x05	; 5
    234c:	6c 18       	sub	r6, r12
    234e:	7d 08       	sbc	r7, r13
	char *readFrom = buffer;
    2350:	fc 01       	movw	r30, r24
    2352:	e0 80       	ld	r14, Z
    2354:	f1 80       	ldd	r15, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    2356:	61 14       	cp	r6, r1
    2358:	71 04       	cpc	r7, r1
    235a:	91 f0       	breq	.+36     	; 0x2380 <_ZN6String7replaceERKS_S1_+0x88>
    235c:	1b c0       	rjmp	.+54     	; 0x2394 <_ZN6String7replaceERKS_S1_+0x9c>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    235e:	d4 01       	movw	r26, r8
    2360:	6c 91       	ld	r22, X
    2362:	11 96       	adiw	r26, 0x01	; 1
    2364:	7c 91       	ld	r23, X
    2366:	11 97       	sbiw	r26, 0x01	; 1
    2368:	14 96       	adiw	r26, 0x04	; 4
    236a:	4d 91       	ld	r20, X+
    236c:	5c 91       	ld	r21, X
    236e:	15 97       	sbiw	r26, 0x05	; 5
    2370:	8c 2f       	mov	r24, r28
    2372:	0e 94 8c 1a 	call	0x3518	; 0x3518 <memcpy>
			readFrom = foundAt + replace.len;
    2376:	f4 01       	movw	r30, r8
    2378:	e4 80       	ldd	r14, Z+4	; 0x04
    237a:	f5 80       	ldd	r15, Z+5	; 0x05
    237c:	ec 0e       	add	r14, r28
    237e:	fd 1e       	adc	r15, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    2380:	d2 01       	movw	r26, r4
    2382:	6d 91       	ld	r22, X+
    2384:	7c 91       	ld	r23, X
    2386:	c7 01       	movw	r24, r14
    2388:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <strstr>
    238c:	ec 01       	movw	r28, r24
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	31 f7       	brne	.-52     	; 0x235e <_ZN6String7replaceERKS_S1_+0x66>
    2392:	a4 c0       	rjmp	.+328    	; 0x24dc <_ZN6String7replaceERKS_S1_+0x1e4>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    2394:	77 fe       	sbrs	r7, 7
    2396:	02 c0       	rjmp	.+4      	; 0x239c <_ZN6String7replaceERKS_S1_+0xa4>
    2398:	67 01       	movw	r12, r14
    239a:	2e c0       	rjmp	.+92     	; 0x23f8 <_ZN6String7replaceERKS_S1_+0x100>
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    239c:	fb 01       	movw	r30, r22
    239e:	20 80       	ld	r2, Z
    23a0:	31 80       	ldd	r3, Z+1	; 0x01
    23a2:	e8 01       	movw	r28, r16
    23a4:	3c c0       	rjmp	.+120    	; 0x241e <_ZN6String7replaceERKS_S1_+0x126>
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    23a6:	8e 01       	movw	r16, r28
    23a8:	0e 19       	sub	r16, r14
    23aa:	1f 09       	sbc	r17, r15
			memcpy(writeTo, readFrom, n);
    23ac:	c6 01       	movw	r24, r12
    23ae:	b7 01       	movw	r22, r14
    23b0:	a8 01       	movw	r20, r16
    23b2:	0e 94 8c 1a 	call	0x3518	; 0x3518 <memcpy>
			writeTo += n;
    23b6:	0c 0d       	add	r16, r12
    23b8:	1d 1d       	adc	r17, r13
			memcpy(writeTo, replace.buffer, replace.len);
    23ba:	d4 01       	movw	r26, r8
    23bc:	6c 91       	ld	r22, X
    23be:	11 96       	adiw	r26, 0x01	; 1
    23c0:	7c 91       	ld	r23, X
    23c2:	11 97       	sbiw	r26, 0x01	; 1
    23c4:	14 96       	adiw	r26, 0x04	; 4
    23c6:	4d 91       	ld	r20, X+
    23c8:	5c 91       	ld	r21, X
    23ca:	15 97       	sbiw	r26, 0x05	; 5
    23cc:	c8 01       	movw	r24, r16
    23ce:	0e 94 8c 1a 	call	0x3518	; 0x3518 <memcpy>
			writeTo += replace.len;
    23d2:	f4 01       	movw	r30, r8
    23d4:	c4 80       	ldd	r12, Z+4	; 0x04
    23d6:	d5 80       	ldd	r13, Z+5	; 0x05
    23d8:	c0 0e       	add	r12, r16
    23da:	d1 1e       	adc	r13, r17
			readFrom = foundAt + find.len;
    23dc:	d2 01       	movw	r26, r4
    23de:	14 96       	adiw	r26, 0x04	; 4
    23e0:	ed 90       	ld	r14, X+
    23e2:	fc 90       	ld	r15, X
    23e4:	15 97       	sbiw	r26, 0x05	; 5
    23e6:	ec 0e       	add	r14, r28
    23e8:	fd 1e       	adc	r15, r29
			len += diff;
    23ea:	f5 01       	movw	r30, r10
    23ec:	84 81       	ldd	r24, Z+4	; 0x04
    23ee:	95 81       	ldd	r25, Z+5	; 0x05
    23f0:	86 0d       	add	r24, r6
    23f2:	97 1d       	adc	r25, r7
    23f4:	95 83       	std	Z+5, r25	; 0x05
    23f6:	84 83       	std	Z+4, r24	; 0x04
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    23f8:	d2 01       	movw	r26, r4
    23fa:	6d 91       	ld	r22, X+
    23fc:	7c 91       	ld	r23, X
    23fe:	c7 01       	movw	r24, r14
    2400:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <strstr>
    2404:	ec 01       	movw	r28, r24
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	71 f6       	brne	.-100    	; 0x23a6 <_ZN6String7replaceERKS_S1_+0xae>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    240a:	c6 01       	movw	r24, r12
    240c:	b7 01       	movw	r22, r14
    240e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <strcpy>
    2412:	64 c0       	rjmp	.+200    	; 0x24dc <_ZN6String7replaceERKS_S1_+0x1e4>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    2414:	7b 01       	movw	r14, r22
    2416:	ec 0c       	add	r14, r12
    2418:	fd 1c       	adc	r15, r13
			size += diff;
    241a:	c6 0d       	add	r28, r6
    241c:	d7 1d       	adc	r29, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    241e:	c7 01       	movw	r24, r14
    2420:	b1 01       	movw	r22, r2
    2422:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <strstr>
    2426:	bc 01       	movw	r22, r24
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	a1 f7       	brne	.-24     	; 0x2414 <_ZN6String7replaceERKS_S1_+0x11c>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    242c:	c0 17       	cp	r28, r16
    242e:	d1 07       	cpc	r29, r17
    2430:	09 f4       	brne	.+2      	; 0x2434 <_ZN6String7replaceERKS_S1_+0x13c>
    2432:	54 c0       	rjmp	.+168    	; 0x24dc <_ZN6String7replaceERKS_S1_+0x1e4>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    2434:	f5 01       	movw	r30, r10
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	8c 17       	cp	r24, r28
    243c:	9d 07       	cpc	r25, r29
    243e:	08 f0       	brcs	.+2      	; 0x2442 <_ZN6String7replaceERKS_S1_+0x14a>
    2440:	44 c0       	rjmp	.+136    	; 0x24ca <_ZN6String7replaceERKS_S1_+0x1d2>
    2442:	c5 01       	movw	r24, r10
    2444:	be 01       	movw	r22, r28
    2446:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN6String12changeBufferEj>
    244a:	88 23       	and	r24, r24
    244c:	f1 f5       	brne	.+124    	; 0x24ca <_ZN6String7replaceERKS_S1_+0x1d2>
    244e:	46 c0       	rjmp	.+140    	; 0x24dc <_ZN6String7replaceERKS_S1_+0x1e4>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    2450:	c5 01       	movw	r24, r10
    2452:	b2 01       	movw	r22, r4
    2454:	a9 01       	movw	r20, r18
    2456:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <_ZNK6String11lastIndexOfERKS_j>
    245a:	ec 01       	movw	r28, r24
    245c:	97 fd       	sbrc	r25, 7
    245e:	3e c0       	rjmp	.+124    	; 0x24dc <_ZN6String7replaceERKS_S1_+0x1e4>
			readFrom = buffer + index + find.len;
    2460:	d5 01       	movw	r26, r10
    2462:	6d 91       	ld	r22, X+
    2464:	7c 91       	ld	r23, X
    2466:	11 97       	sbiw	r26, 0x01	; 1
    2468:	f2 01       	movw	r30, r4
    246a:	84 81       	ldd	r24, Z+4	; 0x04
    246c:	95 81       	ldd	r25, Z+5	; 0x05
    246e:	8c 0f       	add	r24, r28
    2470:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    2472:	68 0f       	add	r22, r24
    2474:	79 1f       	adc	r23, r25
    2476:	14 96       	adiw	r26, 0x04	; 4
    2478:	4d 91       	ld	r20, X+
    247a:	5c 91       	ld	r21, X
    247c:	15 97       	sbiw	r26, 0x05	; 5
    247e:	48 1b       	sub	r20, r24
    2480:	59 0b       	sbc	r21, r25
    2482:	cb 01       	movw	r24, r22
    2484:	86 0d       	add	r24, r6
    2486:	97 1d       	adc	r25, r7
    2488:	0e 94 95 1a 	call	0x352a	; 0x352a <memmove>
			len += diff;
    248c:	d5 01       	movw	r26, r10
    248e:	14 96       	adiw	r26, 0x04	; 4
    2490:	8d 91       	ld	r24, X+
    2492:	9c 91       	ld	r25, X
    2494:	15 97       	sbiw	r26, 0x05	; 5
    2496:	86 0d       	add	r24, r6
    2498:	97 1d       	adc	r25, r7
    249a:	15 96       	adiw	r26, 0x05	; 5
    249c:	9c 93       	st	X, r25
    249e:	8e 93       	st	-X, r24
    24a0:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
    24a2:	ed 91       	ld	r30, X+
    24a4:	fc 91       	ld	r31, X
    24a6:	11 97       	sbiw	r26, 0x01	; 1
    24a8:	e8 0f       	add	r30, r24
    24aa:	f9 1f       	adc	r31, r25
    24ac:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    24ae:	2d 91       	ld	r18, X+
    24b0:	3c 91       	ld	r19, X
    24b2:	2c 0f       	add	r18, r28
    24b4:	3d 1f       	adc	r19, r29
    24b6:	f4 01       	movw	r30, r8
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	44 81       	ldd	r20, Z+4	; 0x04
    24be:	55 81       	ldd	r21, Z+5	; 0x05
    24c0:	c9 01       	movw	r24, r18
    24c2:	0e 94 8c 1a 	call	0x3518	; 0x3518 <memcpy>
			index--;
    24c6:	9e 01       	movw	r18, r28
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <_ZN6String7replaceERKS_S1_+0x1dc>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    24ca:	d5 01       	movw	r26, r10
    24cc:	14 96       	adiw	r26, 0x04	; 4
    24ce:	2d 91       	ld	r18, X+
    24d0:	3c 91       	ld	r19, X
    24d2:	15 97       	sbiw	r26, 0x05	; 5
    24d4:	21 50       	subi	r18, 0x01	; 1
    24d6:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    24d8:	37 ff       	sbrs	r19, 7
    24da:	ba cf       	rjmp	.-140    	; 0x2450 <_ZN6String7replaceERKS_S1_+0x158>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	bf 90       	pop	r11
    24ee:	af 90       	pop	r10
    24f0:	9f 90       	pop	r9
    24f2:	8f 90       	pop	r8
    24f4:	7f 90       	pop	r7
    24f6:	6f 90       	pop	r6
    24f8:	5f 90       	pop	r5
    24fa:	4f 90       	pop	r4
    24fc:	3f 90       	pop	r3
    24fe:	2f 90       	pop	r2
    2500:	08 95       	ret

00002502 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    2508:	88 81       	ld	r24, Y
    250a:	99 81       	ldd	r25, Y+1	; 0x01
    250c:	89 2b       	or	r24, r25
    250e:	29 f0       	breq	.+10     	; 0x251a <_ZN6String7reserveEj+0x18>
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	9b 81       	ldd	r25, Y+3	; 0x03
    2514:	86 17       	cp	r24, r22
    2516:	97 07       	cpc	r25, r23
    2518:	60 f4       	brcc	.+24     	; 0x2532 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    251a:	ce 01       	movw	r24, r28
    251c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <_ZN6String12changeBufferEj>
    2520:	88 23       	and	r24, r24
    2522:	41 f0       	breq	.+16     	; 0x2534 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    2524:	8c 81       	ldd	r24, Y+4	; 0x04
    2526:	9d 81       	ldd	r25, Y+5	; 0x05
    2528:	89 2b       	or	r24, r25
    252a:	19 f4       	brne	.+6      	; 0x2532 <_ZN6String7reserveEj+0x30>
    252c:	e8 81       	ld	r30, Y
    252e:	f9 81       	ldd	r31, Y+1	; 0x01
    2530:	10 82       	st	Z, r1
    2532:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret

0000253a <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    253a:	ef 92       	push	r14
    253c:	ff 92       	push	r15
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	ec 01       	movw	r28, r24
    2548:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    254a:	6c 81       	ldd	r22, Y+4	; 0x04
    254c:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    254e:	e1 14       	cp	r14, r1
    2550:	f1 04       	cpc	r15, r1
    2552:	c1 f0       	breq	.+48     	; 0x2584 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    2554:	41 15       	cp	r20, r1
    2556:	51 05       	cpc	r21, r1
    2558:	99 f0       	breq	.+38     	; 0x2580 <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    255a:	8a 01       	movw	r16, r20
    255c:	06 0f       	add	r16, r22
    255e:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    2560:	b8 01       	movw	r22, r16
    2562:	0e 94 81 12 	call	0x2502	; 0x2502 <_ZN6String7reserveEj>
    2566:	88 23       	and	r24, r24
    2568:	69 f0       	breq	.+26     	; 0x2584 <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    256a:	88 81       	ld	r24, Y
    256c:	99 81       	ldd	r25, Y+1	; 0x01
    256e:	2c 81       	ldd	r18, Y+4	; 0x04
    2570:	3d 81       	ldd	r19, Y+5	; 0x05
    2572:	82 0f       	add	r24, r18
    2574:	93 1f       	adc	r25, r19
    2576:	b7 01       	movw	r22, r14
    2578:	0e 94 bb 1a 	call	0x3576	; 0x3576 <strcpy>
	len = newlen;
    257c:	1d 83       	std	Y+5, r17	; 0x05
    257e:	0c 83       	std	Y+4, r16	; 0x04
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	01 c0       	rjmp	.+2      	; 0x2586 <_ZN6String6concatEPKcj+0x4c>
	return 1;
    2584:	80 e0       	ldi	r24, 0x00	; 0
}
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	ff 90       	pop	r15
    2590:	ef 90       	pop	r14
    2592:	08 95       	ret

00002594 <_ZN6String6concatEm>:
	char buf[12];
	ltoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned long num)
    2594:	ef 92       	push	r14
    2596:	ff 92       	push	r15
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	2b 97       	sbiw	r28, 0x0b	; 11
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	7c 01       	movw	r14, r24
{
	char buf[11];
	ultoa(num, buf, 10);
    25b2:	cb 01       	movw	r24, r22
    25b4:	ba 01       	movw	r22, r20
    25b6:	8e 01       	movw	r16, r28
    25b8:	0f 5f       	subi	r16, 0xFF	; 255
    25ba:	1f 4f       	sbci	r17, 0xFF	; 255
    25bc:	a8 01       	movw	r20, r16
    25be:	2a e0       	ldi	r18, 0x0A	; 10
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <ultoa>
	return concat(buf, strlen(buf));
    25c6:	f8 01       	movw	r30, r16
    25c8:	01 90       	ld	r0, Z+
    25ca:	00 20       	and	r0, r0
    25cc:	e9 f7       	brne	.-6      	; 0x25c8 <_ZN6String6concatEm+0x34>
    25ce:	31 97       	sbiw	r30, 0x01	; 1
    25d0:	e0 1b       	sub	r30, r16
    25d2:	f1 0b       	sbc	r31, r17
    25d4:	c7 01       	movw	r24, r14
    25d6:	b8 01       	movw	r22, r16
    25d8:	af 01       	movw	r20, r30
    25da:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6String6concatEPKcj>
}
    25de:	2b 96       	adiw	r28, 0x0b	; 11
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	1f 91       	pop	r17
    25f0:	0f 91       	pop	r16
    25f2:	ff 90       	pop	r15
    25f4:	ef 90       	pop	r14
    25f6:	08 95       	ret

000025f8 <_ZN6String6concatEl>:
	char buf[6];
	utoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(long num)
    25f8:	ef 92       	push	r14
    25fa:	ff 92       	push	r15
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	2c 97       	sbiw	r28, 0x0c	; 12
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	7c 01       	movw	r14, r24
{
	char buf[12];
	ltoa(num, buf, 10);
    2616:	cb 01       	movw	r24, r22
    2618:	ba 01       	movw	r22, r20
    261a:	8e 01       	movw	r16, r28
    261c:	0f 5f       	subi	r16, 0xFF	; 255
    261e:	1f 4f       	sbci	r17, 0xFF	; 255
    2620:	a8 01       	movw	r20, r16
    2622:	2a e0       	ldi	r18, 0x0A	; 10
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	0e 94 25 1b 	call	0x364a	; 0x364a <ltoa>
	return concat(buf, strlen(buf));
    262a:	f8 01       	movw	r30, r16
    262c:	01 90       	ld	r0, Z+
    262e:	00 20       	and	r0, r0
    2630:	e9 f7       	brne	.-6      	; 0x262c <_ZN6String6concatEl+0x34>
    2632:	31 97       	sbiw	r30, 0x01	; 1
    2634:	e0 1b       	sub	r30, r16
    2636:	f1 0b       	sbc	r31, r17
    2638:	c7 01       	movw	r24, r14
    263a:	b8 01       	movw	r22, r16
    263c:	af 01       	movw	r20, r30
    263e:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6String6concatEPKcj>
}
    2642:	2c 96       	adiw	r28, 0x0c	; 12
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	1f 91       	pop	r17
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	ef 90       	pop	r14
    265a:	08 95       	ret

0000265c <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	00 d0       	rcall	.+0      	; 0x266a <_ZN6String6concatEj+0xe>
    266a:	00 d0       	rcall	.+0      	; 0x266c <_ZN6String6concatEj+0x10>
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	7c 01       	movw	r14, r24
    2672:	cb 01       	movw	r24, r22
{
	char buf[6];
	utoa(num, buf, 10);
    2674:	8e 01       	movw	r16, r28
    2676:	0f 5f       	subi	r16, 0xFF	; 255
    2678:	1f 4f       	sbci	r17, 0xFF	; 255
    267a:	b8 01       	movw	r22, r16
    267c:	4a e0       	ldi	r20, 0x0A	; 10
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	0e 94 93 1b 	call	0x3726	; 0x3726 <utoa>
	return concat(buf, strlen(buf));
    2684:	f8 01       	movw	r30, r16
    2686:	01 90       	ld	r0, Z+
    2688:	00 20       	and	r0, r0
    268a:	e9 f7       	brne	.-6      	; 0x2686 <_ZN6String6concatEj+0x2a>
    268c:	31 97       	sbiw	r30, 0x01	; 1
    268e:	e0 1b       	sub	r30, r16
    2690:	f1 0b       	sbc	r31, r17
    2692:	c7 01       	movw	r24, r14
    2694:	b8 01       	movw	r22, r16
    2696:	af 01       	movw	r20, r30
    2698:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6String6concatEPKcj>
}
    269c:	26 96       	adiw	r28, 0x06	; 6
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	cd bf       	out	0x3d, r28	; 61
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	ff 90       	pop	r15
    26b2:	ef 90       	pop	r14
    26b4:	08 95       	ret

000026b6 <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    26b6:	ef 92       	push	r14
    26b8:	ff 92       	push	r15
    26ba:	0f 93       	push	r16
    26bc:	1f 93       	push	r17
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	27 97       	sbiw	r28, 0x07	; 7
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	7c 01       	movw	r14, r24
    26d4:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
    26d6:	8e 01       	movw	r16, r28
    26d8:	0f 5f       	subi	r16, 0xFF	; 255
    26da:	1f 4f       	sbci	r17, 0xFF	; 255
    26dc:	b8 01       	movw	r22, r16
    26de:	4a e0       	ldi	r20, 0x0A	; 10
    26e0:	50 e0       	ldi	r21, 0x00	; 0
    26e2:	0e 94 04 1b 	call	0x3608	; 0x3608 <itoa>
	return concat(buf, strlen(buf));
    26e6:	f8 01       	movw	r30, r16
    26e8:	01 90       	ld	r0, Z+
    26ea:	00 20       	and	r0, r0
    26ec:	e9 f7       	brne	.-6      	; 0x26e8 <_ZN6String6concatEi+0x32>
    26ee:	31 97       	sbiw	r30, 0x01	; 1
    26f0:	e0 1b       	sub	r30, r16
    26f2:	f1 0b       	sbc	r31, r17
    26f4:	c7 01       	movw	r24, r14
    26f6:	b8 01       	movw	r22, r16
    26f8:	af 01       	movw	r20, r30
    26fa:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6String6concatEPKcj>
}
    26fe:	27 96       	adiw	r28, 0x07	; 7
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	1f 91       	pop	r17
    2710:	0f 91       	pop	r16
    2712:	ff 90       	pop	r15
    2714:	ef 90       	pop	r14
    2716:	08 95       	ret

00002718 <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	00 d0       	rcall	.+0      	; 0x2726 <_ZN6String6concatEh+0xe>
    2726:	0f 92       	push	r0
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	7c 01       	movw	r14, r24
    272e:	86 2f       	mov	r24, r22
{
	char buf[4];
	itoa(num, buf, 10);
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	8e 01       	movw	r16, r28
    2734:	0f 5f       	subi	r16, 0xFF	; 255
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	b8 01       	movw	r22, r16
    273a:	4a e0       	ldi	r20, 0x0A	; 10
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	0e 94 04 1b 	call	0x3608	; 0x3608 <itoa>
	return concat(buf, strlen(buf));
    2742:	f8 01       	movw	r30, r16
    2744:	01 90       	ld	r0, Z+
    2746:	00 20       	and	r0, r0
    2748:	e9 f7       	brne	.-6      	; 0x2744 <_ZN6String6concatEh+0x2c>
    274a:	31 97       	sbiw	r30, 0x01	; 1
    274c:	e0 1b       	sub	r30, r16
    274e:	f1 0b       	sbc	r31, r17
    2750:	c7 01       	movw	r24, r14
    2752:	b8 01       	movw	r22, r16
    2754:	af 01       	movw	r20, r30
    2756:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6String6concatEPKcj>
}
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	ff 90       	pop	r15
    276c:	ef 90       	pop	r14
    276e:	08 95       	ret

00002770 <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	0f 92       	push	r0
    2776:	0f 92       	push	r0
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
    277c:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    277e:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    2780:	be 01       	movw	r22, r28
    2782:	6f 5f       	subi	r22, 0xFF	; 255
    2784:	7f 4f       	sbci	r23, 0xFF	; 255
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6String6concatEPKcj>
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    2798:	61 15       	cp	r22, r1
    279a:	71 05       	cpc	r23, r1
    279c:	11 f4       	brne	.+4      	; 0x27a2 <_ZN6String6concatEPKc+0xa>
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	08 95       	ret
	return concat(cstr, strlen(cstr));
    27a2:	db 01       	movw	r26, r22
    27a4:	0d 90       	ld	r0, X+
    27a6:	00 20       	and	r0, r0
    27a8:	e9 f7       	brne	.-6      	; 0x27a4 <_ZN6String6concatEPKc+0xc>
    27aa:	11 97       	sbiw	r26, 0x01	; 1
    27ac:	a6 1b       	sub	r26, r22
    27ae:	b7 0b       	sbc	r27, r23
    27b0:	ad 01       	movw	r20, r26
    27b2:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6String6concatEPKcj>
}
    27b6:	08 95       	ret

000027b8 <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
    27b8:	fb 01       	movw	r30, r22
{
	return concat(s.buffer, s.len);
    27ba:	60 81       	ld	r22, Z
    27bc:	71 81       	ldd	r23, Z+1	; 0x01
    27be:	44 81       	ldd	r20, Z+4	; 0x04
    27c0:	55 81       	ldd	r21, Z+5	; 0x05
    27c2:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6String6concatEPKcj>
}
    27c6:	08 95       	ret

000027c8 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    27ce:	88 81       	ld	r24, Y
    27d0:	99 81       	ldd	r25, Y+1	; 0x01
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	11 f0       	breq	.+4      	; 0x27da <_ZN6String10invalidateEv+0x12>
    27d6:	0e 94 49 18 	call	0x3092	; 0x3092 <free>
	buffer = NULL;
    27da:	19 82       	std	Y+1, r1	; 0x01
    27dc:	18 82       	st	Y, r1
	capacity = len = 0;
    27de:	1d 82       	std	Y+5, r1	; 0x05
    27e0:	1c 82       	std	Y+4, r1	; 0x04
    27e2:	1b 82       	std	Y+3, r1	; 0x03
    27e4:	1a 82       	std	Y+2, r1	; 0x02
}
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	08 95       	ret

000027ec <_ZplRK15StringSumHelperm>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
    27f0:	18 2f       	mov	r17, r24
    27f2:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    27f4:	0e 94 ca 12 	call	0x2594	; 0x2594 <_ZN6String6concatEm>
    27f8:	88 23       	and	r24, r24
    27fa:	21 f4       	brne	.+8      	; 0x2804 <_ZplRK15StringSumHelperm+0x18>
    27fc:	81 2f       	mov	r24, r17
    27fe:	90 2f       	mov	r25, r16
    2800:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
	return a;
}
    2804:	81 2f       	mov	r24, r17
    2806:	90 2f       	mov	r25, r16
    2808:	1f 91       	pop	r17
    280a:	0f 91       	pop	r16
    280c:	08 95       	ret

0000280e <_ZplRK15StringSumHelperl>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	18 2f       	mov	r17, r24
    2814:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    2816:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN6String6concatEl>
    281a:	88 23       	and	r24, r24
    281c:	21 f4       	brne	.+8      	; 0x2826 <_ZplRK15StringSumHelperl+0x18>
    281e:	81 2f       	mov	r24, r17
    2820:	90 2f       	mov	r25, r16
    2822:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
	return a;
}
    2826:	81 2f       	mov	r24, r17
    2828:	90 2f       	mov	r25, r16
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	08 95       	ret

00002830 <_ZplRK15StringSumHelperj>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
    2830:	0f 93       	push	r16
    2832:	1f 93       	push	r17
    2834:	18 2f       	mov	r17, r24
    2836:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    2838:	0e 94 2e 13 	call	0x265c	; 0x265c <_ZN6String6concatEj>
    283c:	88 23       	and	r24, r24
    283e:	21 f4       	brne	.+8      	; 0x2848 <_ZplRK15StringSumHelperj+0x18>
    2840:	81 2f       	mov	r24, r17
    2842:	90 2f       	mov	r25, r16
    2844:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
	return a;
}
    2848:	81 2f       	mov	r24, r17
    284a:	90 2f       	mov	r25, r16
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	08 95       	ret

00002852 <_ZplRK15StringSumHelperi>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	18 2f       	mov	r17, r24
    2858:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    285a:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <_ZN6String6concatEi>
    285e:	88 23       	and	r24, r24
    2860:	21 f4       	brne	.+8      	; 0x286a <_ZplRK15StringSumHelperi+0x18>
    2862:	81 2f       	mov	r24, r17
    2864:	90 2f       	mov	r25, r16
    2866:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
	return a;
}
    286a:	81 2f       	mov	r24, r17
    286c:	90 2f       	mov	r25, r16
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	08 95       	ret

00002874 <_ZplRK15StringSumHelperh>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
    2874:	0f 93       	push	r16
    2876:	1f 93       	push	r17
    2878:	18 2f       	mov	r17, r24
    287a:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    287c:	0e 94 8c 13 	call	0x2718	; 0x2718 <_ZN6String6concatEh>
    2880:	88 23       	and	r24, r24
    2882:	21 f4       	brne	.+8      	; 0x288c <_ZplRK15StringSumHelperh+0x18>
    2884:	81 2f       	mov	r24, r17
    2886:	90 2f       	mov	r25, r16
    2888:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
	return a;
}
    288c:	81 2f       	mov	r24, r17
    288e:	90 2f       	mov	r25, r16
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	08 95       	ret

00002896 <_ZplRK15StringSumHelperc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	18 2f       	mov	r17, r24
    289c:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    289e:	0e 94 b8 13 	call	0x2770	; 0x2770 <_ZN6String6concatEc>
    28a2:	88 23       	and	r24, r24
    28a4:	21 f4       	brne	.+8      	; 0x28ae <_ZplRK15StringSumHelperc+0x18>
    28a6:	81 2f       	mov	r24, r17
    28a8:	90 2f       	mov	r25, r16
    28aa:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
	return a;
}
    28ae:	81 2f       	mov	r24, r17
    28b0:	90 2f       	mov	r25, r16
    28b2:	1f 91       	pop	r17
    28b4:	0f 91       	pop	r16
    28b6:	08 95       	ret

000028b8 <_ZplRK15StringSumHelperPKc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	18 2f       	mov	r17, r24
    28be:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    28c0:	61 15       	cp	r22, r1
    28c2:	71 05       	cpc	r23, r1
    28c4:	61 f0       	breq	.+24     	; 0x28de <_ZplRK15StringSumHelperPKc+0x26>
    28c6:	db 01       	movw	r26, r22
    28c8:	0d 90       	ld	r0, X+
    28ca:	00 20       	and	r0, r0
    28cc:	e9 f7       	brne	.-6      	; 0x28c8 <_ZplRK15StringSumHelperPKc+0x10>
    28ce:	11 97       	sbiw	r26, 0x01	; 1
    28d0:	a6 1b       	sub	r26, r22
    28d2:	b7 0b       	sbc	r27, r23
    28d4:	ad 01       	movw	r20, r26
    28d6:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6String6concatEPKcj>
    28da:	88 23       	and	r24, r24
    28dc:	21 f4       	brne	.+8      	; 0x28e6 <_ZplRK15StringSumHelperPKc+0x2e>
    28de:	81 2f       	mov	r24, r17
    28e0:	90 2f       	mov	r25, r16
    28e2:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
	return a;
}
    28e6:	81 2f       	mov	r24, r17
    28e8:	90 2f       	mov	r25, r16
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	08 95       	ret

000028f0 <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	18 2f       	mov	r17, r24
    28f6:	09 2f       	mov	r16, r25
    28f8:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	44 81       	ldd	r20, Z+4	; 0x04
    2900:	55 81       	ldd	r21, Z+5	; 0x05
    2902:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6String6concatEPKcj>
    2906:	88 23       	and	r24, r24
    2908:	21 f4       	brne	.+8      	; 0x2912 <_ZplRK15StringSumHelperRK6String+0x22>
    290a:	81 2f       	mov	r24, r17
    290c:	90 2f       	mov	r25, r16
    290e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
	return a;
}
    2912:	81 2f       	mov	r24, r17
    2914:	90 2f       	mov	r25, r16
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	08 95       	ret

0000291c <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    291c:	ef 92       	push	r14
    291e:	ff 92       	push	r15
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	ec 01       	movw	r28, r24
    292a:	7b 01       	movw	r14, r22
    292c:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    292e:	ba 01       	movw	r22, r20
    2930:	0e 94 81 12 	call	0x2502	; 0x2502 <_ZN6String7reserveEj>
    2934:	88 23       	and	r24, r24
    2936:	21 f4       	brne	.+8      	; 0x2940 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    2938:	ce 01       	movw	r24, r28
    293a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
    293e:	07 c0       	rjmp	.+14     	; 0x294e <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    2940:	1d 83       	std	Y+5, r17	; 0x05
    2942:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2944:	88 81       	ld	r24, Y
    2946:	99 81       	ldd	r25, Y+1	; 0x01
    2948:	b7 01       	movw	r22, r14
    294a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <strcpy>
	return *this;
}
    294e:	ce 01       	movw	r24, r28
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	ff 90       	pop	r15
    295a:	ef 90       	pop	r14
    295c:	08 95       	ret

0000295e <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2964:	19 82       	std	Y+1, r1	; 0x01
    2966:	18 82       	st	Y, r1
	capacity = 0;
    2968:	1b 82       	std	Y+3, r1	; 0x03
    296a:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    296c:	1d 82       	std	Y+5, r1	; 0x05
    296e:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    2970:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2972:	61 15       	cp	r22, r1
    2974:	71 05       	cpc	r23, r1
    2976:	51 f0       	breq	.+20     	; 0x298c <_ZN6StringC1EPKc+0x2e>
    2978:	db 01       	movw	r26, r22
    297a:	0d 90       	ld	r0, X+
    297c:	00 20       	and	r0, r0
    297e:	e9 f7       	brne	.-6      	; 0x297a <_ZN6StringC1EPKc+0x1c>
    2980:	11 97       	sbiw	r26, 0x01	; 1
    2982:	a6 1b       	sub	r26, r22
    2984:	b7 0b       	sbc	r27, r23
    2986:	ad 01       	movw	r20, r26
    2988:	0e 94 8e 14 	call	0x291c	; 0x291c <_ZN6String4copyEPKcj>
}
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	08 95       	ret

00002992 <_ZN6StringC2EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2998:	19 82       	std	Y+1, r1	; 0x01
    299a:	18 82       	st	Y, r1
	capacity = 0;
    299c:	1b 82       	std	Y+3, r1	; 0x03
    299e:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    29a0:	1d 82       	std	Y+5, r1	; 0x05
    29a2:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    29a4:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    29a6:	61 15       	cp	r22, r1
    29a8:	71 05       	cpc	r23, r1
    29aa:	51 f0       	breq	.+20     	; 0x29c0 <_ZN6StringC2EPKc+0x2e>
    29ac:	db 01       	movw	r26, r22
    29ae:	0d 90       	ld	r0, X+
    29b0:	00 20       	and	r0, r0
    29b2:	e9 f7       	brne	.-6      	; 0x29ae <_ZN6StringC2EPKc+0x1c>
    29b4:	11 97       	sbiw	r26, 0x01	; 1
    29b6:	a6 1b       	sub	r26, r22
    29b8:	b7 0b       	sbc	r27, r23
    29ba:	ad 01       	movw	r20, r26
    29bc:	0e 94 8e 14 	call	0x291c	; 0x291c <_ZN6String4copyEPKcj>
}
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	08 95       	ret

000029c6 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	18 2f       	mov	r17, r24
    29cc:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    29ce:	61 15       	cp	r22, r1
    29d0:	71 05       	cpc	r23, r1
    29d2:	59 f0       	breq	.+22     	; 0x29ea <_ZN6StringaSEPKc+0x24>
    29d4:	db 01       	movw	r26, r22
    29d6:	0d 90       	ld	r0, X+
    29d8:	00 20       	and	r0, r0
    29da:	e9 f7       	brne	.-6      	; 0x29d6 <_ZN6StringaSEPKc+0x10>
    29dc:	11 97       	sbiw	r26, 0x01	; 1
    29de:	a6 1b       	sub	r26, r22
    29e0:	b7 0b       	sbc	r27, r23
    29e2:	ad 01       	movw	r20, r26
    29e4:	0e 94 8e 14 	call	0x291c	; 0x291c <_ZN6String4copyEPKcj>
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <_ZN6StringaSEPKc+0x28>
	else invalidate();
    29ea:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
	
	return *this;
}
    29ee:	81 2f       	mov	r24, r17
    29f0:	90 2f       	mov	r25, r16
    29f2:	1f 91       	pop	r17
    29f4:	0f 91       	pop	r16
    29f6:	08 95       	ret

000029f8 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    29f8:	ef 92       	push	r14
    29fa:	ff 92       	push	r15
    29fc:	0f 93       	push	r16
    29fe:	1f 93       	push	r17
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	a1 97       	sbiw	r28, 0x21	; 33
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2a16:	fc 01       	movw	r30, r24
    2a18:	11 82       	std	Z+1, r1	; 0x01
    2a1a:	10 82       	st	Z, r1
	capacity = 0;
    2a1c:	13 82       	std	Z+3, r1	; 0x03
    2a1e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2a20:	15 82       	std	Z+5, r1	; 0x05
    2a22:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2a24:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    2a26:	cb 01       	movw	r24, r22
    2a28:	ba 01       	movw	r22, r20
    2a2a:	7e 01       	movw	r14, r28
    2a2c:	08 94       	sec
    2a2e:	e1 1c       	adc	r14, r1
    2a30:	f1 1c       	adc	r15, r1
    2a32:	a7 01       	movw	r20, r14
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <ultoa>
	*this = buf;
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	b7 01       	movw	r22, r14
    2a3e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2a42:	a1 96       	adiw	r28, 0x21	; 33
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	1f 91       	pop	r17
    2a54:	0f 91       	pop	r16
    2a56:	ff 90       	pop	r15
    2a58:	ef 90       	pop	r14
    2a5a:	08 95       	ret

00002a5c <_ZN6StringC2Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    2a5c:	ef 92       	push	r14
    2a5e:	ff 92       	push	r15
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	a1 97       	sbiw	r28, 0x21	; 33
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	11 82       	std	Z+1, r1	; 0x01
    2a7e:	10 82       	st	Z, r1
	capacity = 0;
    2a80:	13 82       	std	Z+3, r1	; 0x03
    2a82:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2a84:	15 82       	std	Z+5, r1	; 0x05
    2a86:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2a88:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	ba 01       	movw	r22, r20
    2a8e:	7e 01       	movw	r14, r28
    2a90:	08 94       	sec
    2a92:	e1 1c       	adc	r14, r1
    2a94:	f1 1c       	adc	r15, r1
    2a96:	a7 01       	movw	r20, r14
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <ultoa>
	*this = buf;
    2a9e:	c8 01       	movw	r24, r16
    2aa0:	b7 01       	movw	r22, r14
    2aa2:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2aa6:	a1 96       	adiw	r28, 0x21	; 33
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	ff 90       	pop	r15
    2abc:	ef 90       	pop	r14
    2abe:	08 95       	ret

00002ac0 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    2ac0:	ef 92       	push	r14
    2ac2:	ff 92       	push	r15
    2ac4:	0f 93       	push	r16
    2ac6:	1f 93       	push	r17
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	a2 97       	sbiw	r28, 0x22	; 34
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2ade:	fc 01       	movw	r30, r24
    2ae0:	11 82       	std	Z+1, r1	; 0x01
    2ae2:	10 82       	st	Z, r1
	capacity = 0;
    2ae4:	13 82       	std	Z+3, r1	; 0x03
    2ae6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2ae8:	15 82       	std	Z+5, r1	; 0x05
    2aea:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2aec:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    2aee:	cb 01       	movw	r24, r22
    2af0:	ba 01       	movw	r22, r20
    2af2:	7e 01       	movw	r14, r28
    2af4:	08 94       	sec
    2af6:	e1 1c       	adc	r14, r1
    2af8:	f1 1c       	adc	r15, r1
    2afa:	a7 01       	movw	r20, r14
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	0e 94 25 1b 	call	0x364a	; 0x364a <ltoa>
	*this = buf;
    2b02:	c8 01       	movw	r24, r16
    2b04:	b7 01       	movw	r22, r14
    2b06:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2b0a:	a2 96       	adiw	r28, 0x22	; 34
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	ef 90       	pop	r14
    2b22:	08 95       	ret

00002b24 <_ZN6StringC2Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    2b24:	ef 92       	push	r14
    2b26:	ff 92       	push	r15
    2b28:	0f 93       	push	r16
    2b2a:	1f 93       	push	r17
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	a2 97       	sbiw	r28, 0x22	; 34
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	cd bf       	out	0x3d, r28	; 61
    2b40:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2b42:	fc 01       	movw	r30, r24
    2b44:	11 82       	std	Z+1, r1	; 0x01
    2b46:	10 82       	st	Z, r1
	capacity = 0;
    2b48:	13 82       	std	Z+3, r1	; 0x03
    2b4a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2b4c:	15 82       	std	Z+5, r1	; 0x05
    2b4e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2b50:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    2b52:	cb 01       	movw	r24, r22
    2b54:	ba 01       	movw	r22, r20
    2b56:	7e 01       	movw	r14, r28
    2b58:	08 94       	sec
    2b5a:	e1 1c       	adc	r14, r1
    2b5c:	f1 1c       	adc	r15, r1
    2b5e:	a7 01       	movw	r20, r14
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	0e 94 25 1b 	call	0x364a	; 0x364a <ltoa>
	*this = buf;
    2b66:	c8 01       	movw	r24, r16
    2b68:	b7 01       	movw	r22, r14
    2b6a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2b6e:	a2 96       	adiw	r28, 0x22	; 34
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	1f 91       	pop	r17
    2b80:	0f 91       	pop	r16
    2b82:	ff 90       	pop	r15
    2b84:	ef 90       	pop	r14
    2b86:	08 95       	ret

00002b88 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    2b88:	ef 92       	push	r14
    2b8a:	ff 92       	push	r15
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	61 97       	sbiw	r28, 0x11	; 17
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	8c 01       	movw	r16, r24
    2ba6:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2ba8:	f8 01       	movw	r30, r16
    2baa:	11 82       	std	Z+1, r1	; 0x01
    2bac:	10 82       	st	Z, r1
	capacity = 0;
    2bae:	13 82       	std	Z+3, r1	; 0x03
    2bb0:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2bb2:	15 82       	std	Z+5, r1	; 0x05
    2bb4:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2bb6:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    2bb8:	7e 01       	movw	r14, r28
    2bba:	08 94       	sec
    2bbc:	e1 1c       	adc	r14, r1
    2bbe:	f1 1c       	adc	r15, r1
    2bc0:	b7 01       	movw	r22, r14
    2bc2:	50 e0       	ldi	r21, 0x00	; 0
    2bc4:	0e 94 93 1b 	call	0x3726	; 0x3726 <utoa>
	*this = buf;
    2bc8:	c8 01       	movw	r24, r16
    2bca:	b7 01       	movw	r22, r14
    2bcc:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2bd0:	61 96       	adiw	r28, 0x11	; 17
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
    2be4:	ff 90       	pop	r15
    2be6:	ef 90       	pop	r14
    2be8:	08 95       	ret

00002bea <_ZN6StringC2Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    2bea:	ef 92       	push	r14
    2bec:	ff 92       	push	r15
    2bee:	0f 93       	push	r16
    2bf0:	1f 93       	push	r17
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	61 97       	sbiw	r28, 0x11	; 17
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	8c 01       	movw	r16, r24
    2c08:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	11 82       	std	Z+1, r1	; 0x01
    2c0e:	10 82       	st	Z, r1
	capacity = 0;
    2c10:	13 82       	std	Z+3, r1	; 0x03
    2c12:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2c14:	15 82       	std	Z+5, r1	; 0x05
    2c16:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2c18:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    2c1a:	7e 01       	movw	r14, r28
    2c1c:	08 94       	sec
    2c1e:	e1 1c       	adc	r14, r1
    2c20:	f1 1c       	adc	r15, r1
    2c22:	b7 01       	movw	r22, r14
    2c24:	50 e0       	ldi	r21, 0x00	; 0
    2c26:	0e 94 93 1b 	call	0x3726	; 0x3726 <utoa>
	*this = buf;
    2c2a:	c8 01       	movw	r24, r16
    2c2c:	b7 01       	movw	r22, r14
    2c2e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2c32:	61 96       	adiw	r28, 0x11	; 17
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	de bf       	out	0x3e, r29	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	cd bf       	out	0x3d, r28	; 61
    2c3e:	cf 91       	pop	r28
    2c40:	df 91       	pop	r29
    2c42:	1f 91       	pop	r17
    2c44:	0f 91       	pop	r16
    2c46:	ff 90       	pop	r15
    2c48:	ef 90       	pop	r14
    2c4a:	08 95       	ret

00002c4c <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    2c4c:	ef 92       	push	r14
    2c4e:	ff 92       	push	r15
    2c50:	0f 93       	push	r16
    2c52:	1f 93       	push	r17
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	62 97       	sbiw	r28, 0x12	; 18
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	8c 01       	movw	r16, r24
    2c6a:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	11 82       	std	Z+1, r1	; 0x01
    2c70:	10 82       	st	Z, r1
	capacity = 0;
    2c72:	13 82       	std	Z+3, r1	; 0x03
    2c74:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2c76:	15 82       	std	Z+5, r1	; 0x05
    2c78:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2c7a:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    2c7c:	7e 01       	movw	r14, r28
    2c7e:	08 94       	sec
    2c80:	e1 1c       	adc	r14, r1
    2c82:	f1 1c       	adc	r15, r1
    2c84:	b7 01       	movw	r22, r14
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	0e 94 04 1b 	call	0x3608	; 0x3608 <itoa>
	*this = buf;
    2c8c:	c8 01       	movw	r24, r16
    2c8e:	b7 01       	movw	r22, r14
    2c90:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2c94:	62 96       	adiw	r28, 0x12	; 18
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	08 95       	ret

00002cae <_ZN6StringC2Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    2cae:	ef 92       	push	r14
    2cb0:	ff 92       	push	r15
    2cb2:	0f 93       	push	r16
    2cb4:	1f 93       	push	r17
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	62 97       	sbiw	r28, 0x12	; 18
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	8c 01       	movw	r16, r24
    2ccc:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2cce:	f8 01       	movw	r30, r16
    2cd0:	11 82       	std	Z+1, r1	; 0x01
    2cd2:	10 82       	st	Z, r1
	capacity = 0;
    2cd4:	13 82       	std	Z+3, r1	; 0x03
    2cd6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2cd8:	15 82       	std	Z+5, r1	; 0x05
    2cda:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2cdc:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    2cde:	7e 01       	movw	r14, r28
    2ce0:	08 94       	sec
    2ce2:	e1 1c       	adc	r14, r1
    2ce4:	f1 1c       	adc	r15, r1
    2ce6:	b7 01       	movw	r22, r14
    2ce8:	50 e0       	ldi	r21, 0x00	; 0
    2cea:	0e 94 04 1b 	call	0x3608	; 0x3608 <itoa>
	*this = buf;
    2cee:	c8 01       	movw	r24, r16
    2cf0:	b7 01       	movw	r22, r14
    2cf2:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2cf6:	62 96       	adiw	r28, 0x12	; 18
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	ff 90       	pop	r15
    2d0c:	ef 90       	pop	r14
    2d0e:	08 95       	ret

00002d10 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    2d10:	ef 92       	push	r14
    2d12:	ff 92       	push	r15
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	29 97       	sbiw	r28, 0x09	; 9
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	8c 01       	movw	r16, r24
    2d2e:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2d30:	f8 01       	movw	r30, r16
    2d32:	11 82       	std	Z+1, r1	; 0x01
    2d34:	10 82       	st	Z, r1
	capacity = 0;
    2d36:	13 82       	std	Z+3, r1	; 0x03
    2d38:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2d3a:	15 82       	std	Z+5, r1	; 0x05
    2d3c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2d3e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	7e 01       	movw	r14, r28
    2d44:	08 94       	sec
    2d46:	e1 1c       	adc	r14, r1
    2d48:	f1 1c       	adc	r15, r1
    2d4a:	b7 01       	movw	r22, r14
    2d4c:	50 e0       	ldi	r21, 0x00	; 0
    2d4e:	0e 94 93 1b 	call	0x3726	; 0x3726 <utoa>
	*this = buf;
    2d52:	c8 01       	movw	r24, r16
    2d54:	b7 01       	movw	r22, r14
    2d56:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2d5a:	29 96       	adiw	r28, 0x09	; 9
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	ff 90       	pop	r15
    2d70:	ef 90       	pop	r14
    2d72:	08 95       	ret

00002d74 <_ZN6StringC2Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    2d74:	ef 92       	push	r14
    2d76:	ff 92       	push	r15
    2d78:	0f 93       	push	r16
    2d7a:	1f 93       	push	r17
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	29 97       	sbiw	r28, 0x09	; 9
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	8c 01       	movw	r16, r24
    2d92:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2d94:	f8 01       	movw	r30, r16
    2d96:	11 82       	std	Z+1, r1	; 0x01
    2d98:	10 82       	st	Z, r1
	capacity = 0;
    2d9a:	13 82       	std	Z+3, r1	; 0x03
    2d9c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2d9e:	15 82       	std	Z+5, r1	; 0x05
    2da0:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2da2:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	7e 01       	movw	r14, r28
    2da8:	08 94       	sec
    2daa:	e1 1c       	adc	r14, r1
    2dac:	f1 1c       	adc	r15, r1
    2dae:	b7 01       	movw	r22, r14
    2db0:	50 e0       	ldi	r21, 0x00	; 0
    2db2:	0e 94 93 1b 	call	0x3726	; 0x3726 <utoa>
	*this = buf;
    2db6:	c8 01       	movw	r24, r16
    2db8:	b7 01       	movw	r22, r14
    2dba:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2dbe:	29 96       	adiw	r28, 0x09	; 9
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	cd bf       	out	0x3d, r28	; 61
    2dca:	cf 91       	pop	r28
    2dcc:	df 91       	pop	r29
    2dce:	1f 91       	pop	r17
    2dd0:	0f 91       	pop	r16
    2dd2:	ff 90       	pop	r15
    2dd4:	ef 90       	pop	r14
    2dd6:	08 95       	ret

00002dd8 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	0f 92       	push	r0
    2dde:	0f 92       	push	r0
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2de6:	11 82       	std	Z+1, r1	; 0x01
    2de8:	10 82       	st	Z, r1
	capacity = 0;
    2dea:	13 82       	std	Z+3, r1	; 0x03
    2dec:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2dee:	15 82       	std	Z+5, r1	; 0x05
    2df0:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2df2:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    2df4:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    2df6:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    2df8:	be 01       	movw	r22, r28
    2dfa:	6f 5f       	subi	r22, 0xFF	; 255
    2dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfe:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	cf 91       	pop	r28
    2e08:	df 91       	pop	r29
    2e0a:	08 95       	ret

00002e0c <_ZN6StringC2Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	0f 92       	push	r0
    2e12:	0f 92       	push	r0
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2e1a:	11 82       	std	Z+1, r1	; 0x01
    2e1c:	10 82       	st	Z, r1
	capacity = 0;
    2e1e:	13 82       	std	Z+3, r1	; 0x03
    2e20:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2e22:	15 82       	std	Z+5, r1	; 0x05
    2e24:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2e26:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    2e28:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    2e2a:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    2e2c:	be 01       	movw	r22, r28
    2e2e:	6f 5f       	subi	r22, 0xFF	; 255
    2e30:	7f 4f       	sbci	r23, 0xFF	; 255
    2e32:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
}
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    2e40:	bf 92       	push	r11
    2e42:	cf 92       	push	r12
    2e44:	df 92       	push	r13
    2e46:	ef 92       	push	r14
    2e48:	ff 92       	push	r15
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	08 2f       	mov	r16, r24
    2e54:	b9 2e       	mov	r11, r25
    2e56:	6b 01       	movw	r12, r22
    2e58:	7a 01       	movw	r14, r20
    2e5a:	e9 01       	movw	r28, r18
{
	if (left > right) {
    2e5c:	24 17       	cp	r18, r20
    2e5e:	35 07       	cpc	r19, r21
    2e60:	10 f4       	brcc	.+4      	; 0x2e66 <_ZNK6String9substringEjj+0x26>
    2e62:	ea 01       	movw	r28, r20
    2e64:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    2e66:	80 2f       	mov	r24, r16
    2e68:	9b 2d       	mov	r25, r11
    2e6a:	6e e0       	ldi	r22, 0x0E	; 14
    2e6c:	72 e0       	ldi	r23, 0x02	; 2
    2e6e:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringC1EPKc>
	if (left > len) return out;
    2e72:	d6 01       	movw	r26, r12
    2e74:	14 96       	adiw	r26, 0x04	; 4
    2e76:	8d 91       	ld	r24, X+
    2e78:	9c 91       	ld	r25, X
    2e7a:	15 97       	sbiw	r26, 0x05	; 5
    2e7c:	8e 15       	cp	r24, r14
    2e7e:	9f 05       	cpc	r25, r15
    2e80:	d0 f0       	brcs	.+52     	; 0x2eb6 <_ZNK6String9substringEjj+0x76>
    2e82:	8c 17       	cp	r24, r28
    2e84:	9d 07       	cpc	r25, r29
    2e86:	08 f4       	brcc	.+2      	; 0x2e8a <_ZNK6String9substringEjj+0x4a>
    2e88:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    2e8a:	d6 01       	movw	r26, r12
    2e8c:	ed 91       	ld	r30, X+
    2e8e:	fc 91       	ld	r31, X
    2e90:	11 97       	sbiw	r26, 0x01	; 1
    2e92:	ec 0f       	add	r30, r28
    2e94:	fd 1f       	adc	r31, r29
    2e96:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
    2e98:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    2e9a:	6d 91       	ld	r22, X+
    2e9c:	7c 91       	ld	r23, X
    2e9e:	6e 0d       	add	r22, r14
    2ea0:	7f 1d       	adc	r23, r15
    2ea2:	80 2f       	mov	r24, r16
    2ea4:	9b 2d       	mov	r25, r11
    2ea6:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    2eaa:	d6 01       	movw	r26, r12
    2eac:	ed 91       	ld	r30, X+
    2eae:	fc 91       	ld	r31, X
    2eb0:	ec 0f       	add	r30, r28
    2eb2:	fd 1f       	adc	r31, r29
    2eb4:	10 83       	st	Z, r17
	return out;
}
    2eb6:	80 2f       	mov	r24, r16
    2eb8:	9b 2d       	mov	r25, r11
    2eba:	df 91       	pop	r29
    2ebc:	cf 91       	pop	r28
    2ebe:	1f 91       	pop	r17
    2ec0:	0f 91       	pop	r16
    2ec2:	ff 90       	pop	r15
    2ec4:	ef 90       	pop	r14
    2ec6:	df 90       	pop	r13
    2ec8:	cf 90       	pop	r12
    2eca:	bf 90       	pop	r11
    2ecc:	08 95       	ret

00002ece <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	8c 01       	movw	r16, r24
    2ed4:	fb 01       	movw	r30, r22
{
	return substring(left, len);
    2ed6:	24 81       	ldd	r18, Z+4	; 0x04
    2ed8:	35 81       	ldd	r19, Z+5	; 0x05
    2eda:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_ZNK6String9substringEjj>
}
    2ede:	c8 01       	movw	r24, r16
    2ee0:	1f 91       	pop	r17
    2ee2:	0f 91       	pop	r16
    2ee4:	08 95       	ret

00002ee6 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	ec 01       	movw	r28, r24
    2eec:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    2eee:	86 17       	cp	r24, r22
    2ef0:	97 07       	cpc	r25, r23
    2ef2:	61 f0       	breq	.+24     	; 0x2f0c <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	61 15       	cp	r22, r1
    2efa:	71 05       	cpc	r23, r1
    2efc:	29 f0       	breq	.+10     	; 0x2f08 <_ZN6StringaSERKS_+0x22>
    2efe:	44 81       	ldd	r20, Z+4	; 0x04
    2f00:	55 81       	ldd	r21, Z+5	; 0x05
    2f02:	0e 94 8e 14 	call	0x291c	; 0x291c <_ZN6String4copyEPKcj>
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <_ZN6StringaSERKS_+0x26>
	else invalidate();
    2f08:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN6String10invalidateEv>
	
	return *this;
}
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	08 95       	ret

00002f14 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    2f14:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2f16:	11 82       	std	Z+1, r1	; 0x01
    2f18:	10 82       	st	Z, r1
	capacity = 0;
    2f1a:	13 82       	std	Z+3, r1	; 0x03
    2f1c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2f1e:	15 82       	std	Z+5, r1	; 0x05
    2f20:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2f22:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    2f24:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <_ZN6StringaSERKS_>
}
    2f28:	08 95       	ret

00002f2a <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    2f2a:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2f2c:	11 82       	std	Z+1, r1	; 0x01
    2f2e:	10 82       	st	Z, r1
	capacity = 0;
    2f30:	13 82       	std	Z+3, r1	; 0x03
    2f32:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2f34:	15 82       	std	Z+5, r1	; 0x05
    2f36:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2f38:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    2f3a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <_ZN6StringaSERKS_>
}
    2f3e:	08 95       	ret

00002f40 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    2f40:	fc 01       	movw	r30, r24
{
	free(buffer);
    2f42:	80 81       	ld	r24, Z
    2f44:	91 81       	ldd	r25, Z+1	; 0x01
    2f46:	0e 94 49 18 	call	0x3092	; 0x3092 <free>
}
    2f4a:	08 95       	ret

00002f4c <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    2f4c:	fc 01       	movw	r30, r24
{
	free(buffer);
    2f4e:	80 81       	ld	r24, Z
    2f50:	91 81       	ldd	r25, Z+1	; 0x01
    2f52:	0e 94 49 18 	call	0x3092	; 0x3092 <free>
}
    2f56:	08 95       	ret

00002f58 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	bc 01       	movw	r22, r24
    2f62:	82 30       	cpi	r24, 0x02	; 2
    2f64:	91 05       	cpc	r25, r1
    2f66:	10 f4       	brcc	.+4      	; 0x2f6c <malloc+0x14>
    2f68:	62 e0       	ldi	r22, 0x02	; 2
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    2f6c:	e0 91 4a 03 	lds	r30, 0x034A
    2f70:	f0 91 4b 03 	lds	r31, 0x034B
    2f74:	40 e0       	ldi	r20, 0x00	; 0
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	a0 e0       	ldi	r26, 0x00	; 0
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	24 c0       	rjmp	.+72     	; 0x2fc6 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    2f7e:	80 81       	ld	r24, Z
    2f80:	91 81       	ldd	r25, Z+1	; 0x01
    2f82:	86 17       	cp	r24, r22
    2f84:	97 07       	cpc	r25, r23
    2f86:	d0 f0       	brcs	.+52     	; 0x2fbc <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    2f88:	86 17       	cp	r24, r22
    2f8a:	97 07       	cpc	r25, r23
    2f8c:	71 f4       	brne	.+28     	; 0x2faa <malloc+0x52>
    2f8e:	82 81       	ldd	r24, Z+2	; 0x02
    2f90:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    2f92:	10 97       	sbiw	r26, 0x00	; 0
    2f94:	29 f0       	breq	.+10     	; 0x2fa0 <malloc+0x48>
				fp2->nx = fp1->nx;
    2f96:	13 96       	adiw	r26, 0x03	; 3
    2f98:	9c 93       	st	X, r25
    2f9a:	8e 93       	st	-X, r24
    2f9c:	12 97       	sbiw	r26, 0x02	; 2
    2f9e:	2c c0       	rjmp	.+88     	; 0x2ff8 <malloc+0xa0>
			else
				__flp = fp1->nx;
    2fa0:	90 93 4b 03 	sts	0x034B, r25
    2fa4:	80 93 4a 03 	sts	0x034A, r24
    2fa8:	27 c0       	rjmp	.+78     	; 0x2ff8 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    2faa:	41 15       	cp	r20, r1
    2fac:	51 05       	cpc	r21, r1
    2fae:	19 f0       	breq	.+6      	; 0x2fb6 <malloc+0x5e>
    2fb0:	84 17       	cp	r24, r20
    2fb2:	95 07       	cpc	r25, r21
    2fb4:	18 f4       	brcc	.+6      	; 0x2fbc <malloc+0x64>
    2fb6:	8d 01       	movw	r16, r26
    2fb8:	ac 01       	movw	r20, r24
    2fba:	ef 01       	movw	r28, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    2fbc:	df 01       	movw	r26, r30
    2fbe:	82 81       	ldd	r24, Z+2	; 0x02
    2fc0:	93 81       	ldd	r25, Z+3	; 0x03
    2fc2:	9c 01       	movw	r18, r24
    2fc4:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    2fc6:	30 97       	sbiw	r30, 0x00	; 0
    2fc8:	d1 f6       	brne	.-76     	; 0x2f7e <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    2fca:	41 15       	cp	r20, r1
    2fcc:	51 05       	cpc	r21, r1
    2fce:	f9 f0       	breq	.+62     	; 0x300e <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    2fd0:	ca 01       	movw	r24, r20
    2fd2:	86 1b       	sub	r24, r22
    2fd4:	97 0b       	sbc	r25, r23
    2fd6:	84 30       	cpi	r24, 0x04	; 4
    2fd8:	91 05       	cpc	r25, r1
    2fda:	80 f4       	brcc	.+32     	; 0x2ffc <malloc+0xa4>
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    2fe0:	01 15       	cp	r16, r1
    2fe2:	11 05       	cpc	r17, r1
    2fe4:	21 f0       	breq	.+8      	; 0x2fee <malloc+0x96>
				sfp2->nx = sfp1->nx;
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	93 83       	std	Z+3, r25	; 0x03
    2fea:	82 83       	std	Z+2, r24	; 0x02
    2fec:	04 c0       	rjmp	.+8      	; 0x2ff6 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    2fee:	90 93 4b 03 	sts	0x034B, r25
    2ff2:	80 93 4a 03 	sts	0x034A, r24
			return &(sfp1->nx);
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	32 96       	adiw	r30, 0x02	; 2
    2ffa:	45 c0       	rjmp	.+138    	; 0x3086 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	e8 0f       	add	r30, r24
    3000:	f9 1f       	adc	r31, r25
    3002:	61 93       	st	Z+, r22
    3004:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    3006:	02 97       	sbiw	r24, 0x02	; 2
    3008:	99 83       	std	Y+1, r25	; 0x01
    300a:	88 83       	st	Y, r24
    300c:	3c c0       	rjmp	.+120    	; 0x3086 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    300e:	80 91 48 03 	lds	r24, 0x0348
    3012:	90 91 49 03 	lds	r25, 0x0349
    3016:	89 2b       	or	r24, r25
    3018:	41 f4       	brne	.+16     	; 0x302a <malloc+0xd2>
		__brkval = __malloc_heap_start;
    301a:	80 91 19 03 	lds	r24, 0x0319
    301e:	90 91 1a 03 	lds	r25, 0x031A
    3022:	90 93 49 03 	sts	0x0349, r25
    3026:	80 93 48 03 	sts	0x0348, r24
	cp = __malloc_heap_end;
    302a:	40 91 1b 03 	lds	r20, 0x031B
    302e:	50 91 1c 03 	lds	r21, 0x031C
	if (cp == 0)
    3032:	41 15       	cp	r20, r1
    3034:	51 05       	cpc	r21, r1
    3036:	41 f4       	brne	.+16     	; 0x3048 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    3038:	4d b7       	in	r20, 0x3d	; 61
    303a:	5e b7       	in	r21, 0x3e	; 62
    303c:	80 91 17 03 	lds	r24, 0x0317
    3040:	90 91 18 03 	lds	r25, 0x0318
    3044:	48 1b       	sub	r20, r24
    3046:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    3048:	20 91 48 03 	lds	r18, 0x0348
    304c:	30 91 49 03 	lds	r19, 0x0349
    3050:	24 17       	cp	r18, r20
    3052:	35 07       	cpc	r19, r21
    3054:	b0 f4       	brcc	.+44     	; 0x3082 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    3056:	ca 01       	movw	r24, r20
    3058:	82 1b       	sub	r24, r18
    305a:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    305c:	86 17       	cp	r24, r22
    305e:	97 07       	cpc	r25, r23
    3060:	80 f0       	brcs	.+32     	; 0x3082 <malloc+0x12a>
    3062:	ab 01       	movw	r20, r22
    3064:	4e 5f       	subi	r20, 0xFE	; 254
    3066:	5f 4f       	sbci	r21, 0xFF	; 255
    3068:	84 17       	cp	r24, r20
    306a:	95 07       	cpc	r25, r21
    306c:	50 f0       	brcs	.+20     	; 0x3082 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    306e:	42 0f       	add	r20, r18
    3070:	53 1f       	adc	r21, r19
    3072:	50 93 49 03 	sts	0x0349, r21
    3076:	40 93 48 03 	sts	0x0348, r20
		fp1->sz = len;
    307a:	f9 01       	movw	r30, r18
    307c:	61 93       	st	Z+, r22
    307e:	71 93       	st	Z+, r23
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <malloc+0x12e>
		return &(fp1->nx);
    3082:	e0 e0       	ldi	r30, 0x00	; 0
    3084:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    3086:	cf 01       	movw	r24, r30
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	08 95       	ret

00003092 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	9c 01       	movw	r18, r24
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	09 f4       	brne	.+2      	; 0x309e <free+0xc>
    309c:	8f c0       	rjmp	.+286    	; 0x31bc <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    309e:	ec 01       	movw	r28, r24
    30a0:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    30a2:	1b 82       	std	Y+3, r1	; 0x03
    30a4:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    30a6:	60 91 4a 03 	lds	r22, 0x034A
    30aa:	70 91 4b 03 	lds	r23, 0x034B
    30ae:	61 15       	cp	r22, r1
    30b0:	71 05       	cpc	r23, r1
    30b2:	81 f4       	brne	.+32     	; 0x30d4 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    30b4:	88 81       	ld	r24, Y
    30b6:	99 81       	ldd	r25, Y+1	; 0x01
    30b8:	82 0f       	add	r24, r18
    30ba:	93 1f       	adc	r25, r19
    30bc:	20 91 48 03 	lds	r18, 0x0348
    30c0:	30 91 49 03 	lds	r19, 0x0349
    30c4:	28 17       	cp	r18, r24
    30c6:	39 07       	cpc	r19, r25
    30c8:	39 f5       	brne	.+78     	; 0x3118 <free+0x86>
			__brkval = cpnew;
    30ca:	d0 93 49 03 	sts	0x0349, r29
    30ce:	c0 93 48 03 	sts	0x0348, r28
    30d2:	74 c0       	rjmp	.+232    	; 0x31bc <free+0x12a>
		else
			__flp = fpnew;
    30d4:	db 01       	movw	r26, r22
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    30da:	ac 17       	cp	r26, r28
    30dc:	bd 07       	cpc	r27, r29
    30de:	08 f1       	brcs	.+66     	; 0x3122 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    30e0:	bb 83       	std	Y+3, r27	; 0x03
    30e2:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    30e4:	fe 01       	movw	r30, r28
    30e6:	21 91       	ld	r18, Z+
    30e8:	31 91       	ld	r19, Z+
    30ea:	e2 0f       	add	r30, r18
    30ec:	f3 1f       	adc	r31, r19
    30ee:	ae 17       	cp	r26, r30
    30f0:	bf 07       	cpc	r27, r31
    30f2:	79 f4       	brne	.+30     	; 0x3112 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    30f4:	8d 91       	ld	r24, X+
    30f6:	9c 91       	ld	r25, X
    30f8:	11 97       	sbiw	r26, 0x01	; 1
    30fa:	28 0f       	add	r18, r24
    30fc:	39 1f       	adc	r19, r25
    30fe:	2e 5f       	subi	r18, 0xFE	; 254
    3100:	3f 4f       	sbci	r19, 0xFF	; 255
    3102:	39 83       	std	Y+1, r19	; 0x01
    3104:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    3106:	12 96       	adiw	r26, 0x02	; 2
    3108:	8d 91       	ld	r24, X+
    310a:	9c 91       	ld	r25, X
    310c:	13 97       	sbiw	r26, 0x03	; 3
    310e:	9b 83       	std	Y+3, r25	; 0x03
    3110:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    3112:	41 15       	cp	r20, r1
    3114:	51 05       	cpc	r21, r1
    3116:	71 f4       	brne	.+28     	; 0x3134 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    3118:	d0 93 4b 03 	sts	0x034B, r29
    311c:	c0 93 4a 03 	sts	0x034A, r28
    3120:	4d c0       	rjmp	.+154    	; 0x31bc <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    3122:	12 96       	adiw	r26, 0x02	; 2
    3124:	8d 91       	ld	r24, X+
    3126:	9c 91       	ld	r25, X
    3128:	13 97       	sbiw	r26, 0x03	; 3
    312a:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	11 f0       	breq	.+4      	; 0x3134 <free+0xa2>
    3130:	dc 01       	movw	r26, r24
    3132:	d3 cf       	rjmp	.-90     	; 0x30da <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    3134:	da 01       	movw	r26, r20
    3136:	13 96       	adiw	r26, 0x03	; 3
    3138:	dc 93       	st	X, r29
    313a:	ce 93       	st	-X, r28
    313c:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    313e:	fa 01       	movw	r30, r20
    3140:	21 91       	ld	r18, Z+
    3142:	31 91       	ld	r19, Z+
    3144:	e2 0f       	add	r30, r18
    3146:	f3 1f       	adc	r31, r19
    3148:	ce 17       	cp	r28, r30
    314a:	df 07       	cpc	r29, r31
    314c:	69 f4       	brne	.+26     	; 0x3168 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    314e:	88 81       	ld	r24, Y
    3150:	99 81       	ldd	r25, Y+1	; 0x01
    3152:	28 0f       	add	r18, r24
    3154:	39 1f       	adc	r19, r25
    3156:	2e 5f       	subi	r18, 0xFE	; 254
    3158:	3f 4f       	sbci	r19, 0xFF	; 255
    315a:	fa 01       	movw	r30, r20
    315c:	31 83       	std	Z+1, r19	; 0x01
    315e:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	9b 81       	ldd	r25, Y+3	; 0x03
    3164:	93 83       	std	Z+3, r25	; 0x03
    3166:	82 83       	std	Z+2, r24	; 0x02
    3168:	e0 e0       	ldi	r30, 0x00	; 0
    316a:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    316c:	db 01       	movw	r26, r22
    316e:	12 96       	adiw	r26, 0x02	; 2
    3170:	8d 91       	ld	r24, X+
    3172:	9c 91       	ld	r25, X
    3174:	13 97       	sbiw	r26, 0x03	; 3
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	19 f0       	breq	.+6      	; 0x3180 <free+0xee>
    317a:	bc 01       	movw	r22, r24
    317c:	fd 01       	movw	r30, r26
    317e:	f6 cf       	rjmp	.-20     	; 0x316c <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    3180:	ab 01       	movw	r20, r22
    3182:	4e 5f       	subi	r20, 0xFE	; 254
    3184:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    3186:	db 01       	movw	r26, r22
    3188:	8d 91       	ld	r24, X+
    318a:	9c 91       	ld	r25, X
    318c:	84 0f       	add	r24, r20
    318e:	95 1f       	adc	r25, r21
    3190:	20 91 48 03 	lds	r18, 0x0348
    3194:	30 91 49 03 	lds	r19, 0x0349
    3198:	28 17       	cp	r18, r24
    319a:	39 07       	cpc	r19, r25
    319c:	79 f4       	brne	.+30     	; 0x31bc <free+0x12a>
		if (fp2 == NULL)
    319e:	30 97       	sbiw	r30, 0x00	; 0
    31a0:	29 f4       	brne	.+10     	; 0x31ac <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    31a2:	10 92 4b 03 	sts	0x034B, r1
    31a6:	10 92 4a 03 	sts	0x034A, r1
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <free+0x11e>
		else
			fp2->nx = NULL;
    31ac:	13 82       	std	Z+3, r1	; 0x03
    31ae:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    31b0:	42 50       	subi	r20, 0x02	; 2
    31b2:	50 40       	sbci	r21, 0x00	; 0
    31b4:	50 93 49 03 	sts	0x0349, r21
    31b8:	40 93 48 03 	sts	0x0348, r20
	}
}
    31bc:	df 91       	pop	r29
    31be:	cf 91       	pop	r28
    31c0:	08 95       	ret

000031c2 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    31c2:	6f 92       	push	r6
    31c4:	7f 92       	push	r7
    31c6:	8f 92       	push	r8
    31c8:	9f 92       	push	r9
    31ca:	af 92       	push	r10
    31cc:	bf 92       	push	r11
    31ce:	cf 92       	push	r12
    31d0:	df 92       	push	r13
    31d2:	ef 92       	push	r14
    31d4:	ff 92       	push	r15
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	8c 01       	movw	r16, r24
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	29 f4       	brne	.+10     	; 0x31ee <realloc+0x2c>
		return malloc(len);
    31e4:	cb 01       	movw	r24, r22
    31e6:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <malloc>
    31ea:	8c 01       	movw	r16, r24
    31ec:	bb c0       	rjmp	.+374    	; 0x3364 <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    31ee:	8e ef       	ldi	r24, 0xFE	; 254
    31f0:	e8 2e       	mov	r14, r24
    31f2:	8f ef       	ldi	r24, 0xFF	; 255
    31f4:	f8 2e       	mov	r15, r24
    31f6:	e0 0e       	add	r14, r16
    31f8:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    31fa:	48 01       	movw	r8, r16
    31fc:	86 0e       	add	r8, r22
    31fe:	97 1e       	adc	r9, r23
	if (cp < cp1)
    3200:	8e 14       	cp	r8, r14
    3202:	9f 04       	cpc	r9, r15
    3204:	08 f4       	brcc	.+2      	; 0x3208 <realloc+0x46>
    3206:	ac c0       	rjmp	.+344    	; 0x3360 <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    3208:	d7 01       	movw	r26, r14
    320a:	4d 91       	ld	r20, X+
    320c:	5c 91       	ld	r21, X
    320e:	11 97       	sbiw	r26, 0x01	; 1
    3210:	46 17       	cp	r20, r22
    3212:	57 07       	cpc	r21, r23
    3214:	b8 f0       	brcs	.+46     	; 0x3244 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    3216:	45 30       	cpi	r20, 0x05	; 5
    3218:	51 05       	cpc	r21, r1
    321a:	08 f4       	brcc	.+2      	; 0x321e <realloc+0x5c>
    321c:	a3 c0       	rjmp	.+326    	; 0x3364 <realloc+0x1a2>
    321e:	ca 01       	movw	r24, r20
    3220:	04 97       	sbiw	r24, 0x04	; 4
    3222:	86 17       	cp	r24, r22
    3224:	97 07       	cpc	r25, r23
    3226:	08 f4       	brcc	.+2      	; 0x322a <realloc+0x68>
    3228:	9d c0       	rjmp	.+314    	; 0x3364 <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    322a:	42 50       	subi	r20, 0x02	; 2
    322c:	50 40       	sbci	r21, 0x00	; 0
    322e:	46 1b       	sub	r20, r22
    3230:	57 0b       	sbc	r21, r23
    3232:	f4 01       	movw	r30, r8
    3234:	41 93       	st	Z+, r20
    3236:	51 93       	st	Z+, r21
		fp1->sz = len;
    3238:	6d 93       	st	X+, r22
    323a:	7c 93       	st	X, r23
		free(&(fp2->nx));
    323c:	cf 01       	movw	r24, r30
    323e:	0e 94 49 18 	call	0x3092	; 0x3092 <free>
    3242:	90 c0       	rjmp	.+288    	; 0x3364 <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    3244:	5b 01       	movw	r10, r22
    3246:	a4 1a       	sub	r10, r20
    3248:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    324a:	38 01       	movw	r6, r16
    324c:	64 0e       	add	r6, r20
    324e:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    3250:	a0 91 4a 03 	lds	r26, 0x034A
    3254:	b0 91 4b 03 	lds	r27, 0x034B
    3258:	e0 e0       	ldi	r30, 0x00	; 0
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	cc 24       	eor	r12, r12
    325e:	dd 24       	eor	r13, r13
    3260:	47 c0       	rjmp	.+142    	; 0x32f0 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    3262:	a6 15       	cp	r26, r6
    3264:	b7 05       	cpc	r27, r7
    3266:	a9 f5       	brne	.+106    	; 0x32d2 <realloc+0x110>
    3268:	cd 91       	ld	r28, X+
    326a:	dc 91       	ld	r29, X
    326c:	11 97       	sbiw	r26, 0x01	; 1
    326e:	ce 01       	movw	r24, r28
    3270:	02 96       	adiw	r24, 0x02	; 2
    3272:	8a 15       	cp	r24, r10
    3274:	9b 05       	cpc	r25, r11
    3276:	68 f1       	brcs	.+90     	; 0x32d2 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    3278:	ce 01       	movw	r24, r28
    327a:	8a 19       	sub	r24, r10
    327c:	9b 09       	sbc	r25, r11
    327e:	02 96       	adiw	r24, 0x02	; 2
    3280:	12 96       	adiw	r26, 0x02	; 2
    3282:	2c 91       	ld	r18, X
    3284:	12 97       	sbiw	r26, 0x02	; 2
    3286:	13 96       	adiw	r26, 0x03	; 3
    3288:	3c 91       	ld	r19, X
    328a:	05 97       	sbiw	r24, 0x05	; 5
    328c:	58 f0       	brcs	.+22     	; 0x32a4 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    328e:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    3290:	22 83       	std	Z+2, r18	; 0x02
    3292:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    3294:	ca 19       	sub	r28, r10
    3296:	db 09       	sbc	r29, r11
    3298:	d1 83       	std	Z+1, r29	; 0x01
    329a:	c0 83       	st	Z, r28
				fp1->sz = len;
    329c:	d7 01       	movw	r26, r14
    329e:	6d 93       	st	X+, r22
    32a0:	7c 93       	st	X, r23
    32a2:	09 c0       	rjmp	.+18     	; 0x32b6 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    32a4:	4e 5f       	subi	r20, 0xFE	; 254
    32a6:	5f 4f       	sbci	r21, 0xFF	; 255
    32a8:	4c 0f       	add	r20, r28
    32aa:	5d 1f       	adc	r21, r29
    32ac:	f7 01       	movw	r30, r14
    32ae:	51 83       	std	Z+1, r21	; 0x01
    32b0:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    32b2:	c9 01       	movw	r24, r18
    32b4:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    32b6:	c1 14       	cp	r12, r1
    32b8:	d1 04       	cpc	r13, r1
    32ba:	31 f0       	breq	.+12     	; 0x32c8 <realloc+0x106>
				ofp3->nx = fp2;
    32bc:	d6 01       	movw	r26, r12
    32be:	13 96       	adiw	r26, 0x03	; 3
    32c0:	fc 93       	st	X, r31
    32c2:	ee 93       	st	-X, r30
    32c4:	12 97       	sbiw	r26, 0x02	; 2
    32c6:	4e c0       	rjmp	.+156    	; 0x3364 <realloc+0x1a2>
			else
				__flp = fp2;
    32c8:	f0 93 4b 03 	sts	0x034B, r31
    32cc:	e0 93 4a 03 	sts	0x034A, r30
    32d0:	49 c0       	rjmp	.+146    	; 0x3364 <realloc+0x1a2>
    32d2:	8d 91       	ld	r24, X+
    32d4:	9c 91       	ld	r25, X
    32d6:	11 97       	sbiw	r26, 0x01	; 1
    32d8:	e8 17       	cp	r30, r24
    32da:	f9 07       	cpc	r31, r25
    32dc:	08 f4       	brcc	.+2      	; 0x32e0 <realloc+0x11e>
    32de:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    32e0:	6d 01       	movw	r12, r26
    32e2:	12 96       	adiw	r26, 0x02	; 2
    32e4:	8c 91       	ld	r24, X
    32e6:	12 97       	sbiw	r26, 0x02	; 2
    32e8:	13 96       	adiw	r26, 0x03	; 3
    32ea:	9c 91       	ld	r25, X
    32ec:	9c 01       	movw	r18, r24
    32ee:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    32f0:	10 97       	sbiw	r26, 0x00	; 0
    32f2:	09 f0       	breq	.+2      	; 0x32f6 <realloc+0x134>
    32f4:	b6 cf       	rjmp	.-148    	; 0x3262 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    32f6:	80 91 48 03 	lds	r24, 0x0348
    32fa:	90 91 49 03 	lds	r25, 0x0349
    32fe:	86 15       	cp	r24, r6
    3300:	97 05       	cpc	r25, r7
    3302:	e9 f4       	brne	.+58     	; 0x333e <realloc+0x17c>
    3304:	e6 17       	cp	r30, r22
    3306:	f7 07       	cpc	r31, r23
    3308:	d0 f4       	brcc	.+52     	; 0x333e <realloc+0x17c>
		cp1 = __malloc_heap_end;
    330a:	20 91 1b 03 	lds	r18, 0x031B
    330e:	30 91 1c 03 	lds	r19, 0x031C
		cp = (char *)ptr + len;
		if (cp1 == 0)
    3312:	21 15       	cp	r18, r1
    3314:	31 05       	cpc	r19, r1
    3316:	41 f4       	brne	.+16     	; 0x3328 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    3318:	2d b7       	in	r18, 0x3d	; 61
    331a:	3e b7       	in	r19, 0x3e	; 62
    331c:	80 91 17 03 	lds	r24, 0x0317
    3320:	90 91 18 03 	lds	r25, 0x0318
    3324:	28 1b       	sub	r18, r24
    3326:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    3328:	82 16       	cp	r8, r18
    332a:	93 06       	cpc	r9, r19
    332c:	c8 f4       	brcc	.+50     	; 0x3360 <realloc+0x19e>
			__brkval = cp;
    332e:	90 92 49 03 	sts	0x0349, r9
    3332:	80 92 48 03 	sts	0x0348, r8
			fp1->sz = len;
    3336:	f7 01       	movw	r30, r14
    3338:	71 83       	std	Z+1, r23	; 0x01
    333a:	60 83       	st	Z, r22
    333c:	13 c0       	rjmp	.+38     	; 0x3364 <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    333e:	cb 01       	movw	r24, r22
    3340:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <malloc>
    3344:	ec 01       	movw	r28, r24
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	59 f0       	breq	.+22     	; 0x3360 <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    334a:	d7 01       	movw	r26, r14
    334c:	4d 91       	ld	r20, X+
    334e:	5c 91       	ld	r21, X
    3350:	b8 01       	movw	r22, r16
    3352:	0e 94 8c 1a 	call	0x3518	; 0x3518 <memcpy>
	free(ptr);
    3356:	c8 01       	movw	r24, r16
    3358:	0e 94 49 18 	call	0x3092	; 0x3092 <free>
    335c:	8e 01       	movw	r16, r28
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <realloc+0x1a2>
	return memp;
    3360:	00 e0       	ldi	r16, 0x00	; 0
    3362:	10 e0       	ldi	r17, 0x00	; 0
}
    3364:	c8 01       	movw	r24, r16
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	1f 91       	pop	r17
    336c:	0f 91       	pop	r16
    336e:	ff 90       	pop	r15
    3370:	ef 90       	pop	r14
    3372:	df 90       	pop	r13
    3374:	cf 90       	pop	r12
    3376:	bf 90       	pop	r11
    3378:	af 90       	pop	r10
    337a:	9f 90       	pop	r9
    337c:	8f 90       	pop	r8
    337e:	7f 90       	pop	r7
    3380:	6f 90       	pop	r6
    3382:	08 95       	ret

00003384 <__mulsi3>:
    3384:	62 9f       	mul	r22, r18
    3386:	d0 01       	movw	r26, r0
    3388:	73 9f       	mul	r23, r19
    338a:	f0 01       	movw	r30, r0
    338c:	82 9f       	mul	r24, r18
    338e:	e0 0d       	add	r30, r0
    3390:	f1 1d       	adc	r31, r1
    3392:	64 9f       	mul	r22, r20
    3394:	e0 0d       	add	r30, r0
    3396:	f1 1d       	adc	r31, r1
    3398:	92 9f       	mul	r25, r18
    339a:	f0 0d       	add	r31, r0
    339c:	83 9f       	mul	r24, r19
    339e:	f0 0d       	add	r31, r0
    33a0:	74 9f       	mul	r23, r20
    33a2:	f0 0d       	add	r31, r0
    33a4:	65 9f       	mul	r22, r21
    33a6:	f0 0d       	add	r31, r0
    33a8:	99 27       	eor	r25, r25
    33aa:	72 9f       	mul	r23, r18
    33ac:	b0 0d       	add	r27, r0
    33ae:	e1 1d       	adc	r30, r1
    33b0:	f9 1f       	adc	r31, r25
    33b2:	63 9f       	mul	r22, r19
    33b4:	b0 0d       	add	r27, r0
    33b6:	e1 1d       	adc	r30, r1
    33b8:	f9 1f       	adc	r31, r25
    33ba:	bd 01       	movw	r22, r26
    33bc:	cf 01       	movw	r24, r30
    33be:	11 24       	eor	r1, r1
    33c0:	08 95       	ret

000033c2 <__udivmodsi4>:
    33c2:	a1 e2       	ldi	r26, 0x21	; 33
    33c4:	1a 2e       	mov	r1, r26
    33c6:	aa 1b       	sub	r26, r26
    33c8:	bb 1b       	sub	r27, r27
    33ca:	fd 01       	movw	r30, r26
    33cc:	0d c0       	rjmp	.+26     	; 0x33e8 <__udivmodsi4_ep>

000033ce <__udivmodsi4_loop>:
    33ce:	aa 1f       	adc	r26, r26
    33d0:	bb 1f       	adc	r27, r27
    33d2:	ee 1f       	adc	r30, r30
    33d4:	ff 1f       	adc	r31, r31
    33d6:	a2 17       	cp	r26, r18
    33d8:	b3 07       	cpc	r27, r19
    33da:	e4 07       	cpc	r30, r20
    33dc:	f5 07       	cpc	r31, r21
    33de:	20 f0       	brcs	.+8      	; 0x33e8 <__udivmodsi4_ep>
    33e0:	a2 1b       	sub	r26, r18
    33e2:	b3 0b       	sbc	r27, r19
    33e4:	e4 0b       	sbc	r30, r20
    33e6:	f5 0b       	sbc	r31, r21

000033e8 <__udivmodsi4_ep>:
    33e8:	66 1f       	adc	r22, r22
    33ea:	77 1f       	adc	r23, r23
    33ec:	88 1f       	adc	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	1a 94       	dec	r1
    33f2:	69 f7       	brne	.-38     	; 0x33ce <__udivmodsi4_loop>
    33f4:	60 95       	com	r22
    33f6:	70 95       	com	r23
    33f8:	80 95       	com	r24
    33fa:	90 95       	com	r25
    33fc:	9b 01       	movw	r18, r22
    33fe:	ac 01       	movw	r20, r24
    3400:	bd 01       	movw	r22, r26
    3402:	cf 01       	movw	r24, r30
    3404:	08 95       	ret

00003406 <__prologue_saves__>:
    3406:	2f 92       	push	r2
    3408:	3f 92       	push	r3
    340a:	4f 92       	push	r4
    340c:	5f 92       	push	r5
    340e:	6f 92       	push	r6
    3410:	7f 92       	push	r7
    3412:	8f 92       	push	r8
    3414:	9f 92       	push	r9
    3416:	af 92       	push	r10
    3418:	bf 92       	push	r11
    341a:	cf 92       	push	r12
    341c:	df 92       	push	r13
    341e:	ef 92       	push	r14
    3420:	ff 92       	push	r15
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	ca 1b       	sub	r28, r26
    3430:	db 0b       	sbc	r29, r27
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
    343c:	19 94       	eijmp

0000343e <__epilogue_restores__>:
    343e:	2a 88       	ldd	r2, Y+18	; 0x12
    3440:	39 88       	ldd	r3, Y+17	; 0x11
    3442:	48 88       	ldd	r4, Y+16	; 0x10
    3444:	5f 84       	ldd	r5, Y+15	; 0x0f
    3446:	6e 84       	ldd	r6, Y+14	; 0x0e
    3448:	7d 84       	ldd	r7, Y+13	; 0x0d
    344a:	8c 84       	ldd	r8, Y+12	; 0x0c
    344c:	9b 84       	ldd	r9, Y+11	; 0x0b
    344e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3450:	b9 84       	ldd	r11, Y+9	; 0x09
    3452:	c8 84       	ldd	r12, Y+8	; 0x08
    3454:	df 80       	ldd	r13, Y+7	; 0x07
    3456:	ee 80       	ldd	r14, Y+6	; 0x06
    3458:	fd 80       	ldd	r15, Y+5	; 0x05
    345a:	0c 81       	ldd	r16, Y+4	; 0x04
    345c:	1b 81       	ldd	r17, Y+3	; 0x03
    345e:	aa 81       	ldd	r26, Y+2	; 0x02
    3460:	b9 81       	ldd	r27, Y+1	; 0x01
    3462:	ce 0f       	add	r28, r30
    3464:	d1 1d       	adc	r29, r1
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	ed 01       	movw	r28, r26
    3472:	08 95       	ret

00003474 <__tablejump2__>:
    3474:	ee 0f       	add	r30, r30
    3476:	ff 1f       	adc	r31, r31

00003478 <__tablejump__>:
    3478:	05 90       	lpm	r0, Z+
    347a:	f4 91       	lpm	r31, Z+
    347c:	e0 2d       	mov	r30, r0
    347e:	19 94       	eijmp

00003480 <atol>:
    3480:	1f 93       	push	r17
    3482:	fc 01       	movw	r30, r24
    3484:	99 27       	eor	r25, r25
    3486:	88 27       	eor	r24, r24
    3488:	bc 01       	movw	r22, r24
    348a:	e8 94       	clt
    348c:	11 91       	ld	r17, Z+
    348e:	10 32       	cpi	r17, 0x20	; 32
    3490:	e9 f3       	breq	.-6      	; 0x348c <atol+0xc>
    3492:	19 30       	cpi	r17, 0x09	; 9
    3494:	10 f0       	brcs	.+4      	; 0x349a <atol+0x1a>
    3496:	1e 30       	cpi	r17, 0x0E	; 14
    3498:	c8 f3       	brcs	.-14     	; 0x348c <atol+0xc>
    349a:	1b 32       	cpi	r17, 0x2B	; 43
    349c:	51 f0       	breq	.+20     	; 0x34b2 <atol+0x32>
    349e:	1d 32       	cpi	r17, 0x2D	; 45
    34a0:	49 f4       	brne	.+18     	; 0x34b4 <atol+0x34>
    34a2:	68 94       	set
    34a4:	06 c0       	rjmp	.+12     	; 0x34b2 <atol+0x32>
    34a6:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__mulsi_const_10>
    34aa:	61 0f       	add	r22, r17
    34ac:	71 1d       	adc	r23, r1
    34ae:	81 1d       	adc	r24, r1
    34b0:	91 1d       	adc	r25, r1
    34b2:	11 91       	ld	r17, Z+
    34b4:	10 53       	subi	r17, 0x30	; 48
    34b6:	1a 30       	cpi	r17, 0x0A	; 10
    34b8:	b0 f3       	brcs	.-20     	; 0x34a6 <atol+0x26>
    34ba:	3e f4       	brtc	.+14     	; 0x34ca <atol+0x4a>
    34bc:	90 95       	com	r25
    34be:	80 95       	com	r24
    34c0:	70 95       	com	r23
    34c2:	61 95       	neg	r22
    34c4:	7f 4f       	sbci	r23, 0xFF	; 255
    34c6:	8f 4f       	sbci	r24, 0xFF	; 255
    34c8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ca:	1f 91       	pop	r17
    34cc:	08 95       	ret

000034ce <isspace>:
    34ce:	91 11       	cpse	r25, r1
    34d0:	40 c1       	rjmp	.+640    	; 0x3752 <__ctype_isfalse>
    34d2:	80 32       	cpi	r24, 0x20	; 32
    34d4:	19 f0       	breq	.+6      	; 0x34dc <isspace+0xe>
    34d6:	89 50       	subi	r24, 0x09	; 9
    34d8:	85 50       	subi	r24, 0x05	; 5
    34da:	d0 f7       	brcc	.-12     	; 0x34d0 <isspace+0x2>
    34dc:	08 95       	ret

000034de <tolower>:
    34de:	91 11       	cpse	r25, r1
    34e0:	08 95       	ret
    34e2:	81 54       	subi	r24, 0x41	; 65
    34e4:	8a 51       	subi	r24, 0x1A	; 26
    34e6:	08 f4       	brcc	.+2      	; 0x34ea <tolower+0xc>
    34e8:	80 5e       	subi	r24, 0xE0	; 224
    34ea:	85 5a       	subi	r24, 0xA5	; 165
    34ec:	08 95       	ret

000034ee <toupper>:
    34ee:	91 11       	cpse	r25, r1
    34f0:	08 95       	ret
    34f2:	81 56       	subi	r24, 0x61	; 97
    34f4:	8a 51       	subi	r24, 0x1A	; 26
    34f6:	08 f4       	brcc	.+2      	; 0x34fa <toupper+0xc>
    34f8:	80 52       	subi	r24, 0x20	; 32
    34fa:	85 58       	subi	r24, 0x85	; 133
    34fc:	08 95       	ret

000034fe <memcmp>:
    34fe:	fb 01       	movw	r30, r22
    3500:	dc 01       	movw	r26, r24
    3502:	04 c0       	rjmp	.+8      	; 0x350c <memcmp+0xe>
    3504:	8d 91       	ld	r24, X+
    3506:	01 90       	ld	r0, Z+
    3508:	80 19       	sub	r24, r0
    350a:	21 f4       	brne	.+8      	; 0x3514 <memcmp+0x16>
    350c:	41 50       	subi	r20, 0x01	; 1
    350e:	50 40       	sbci	r21, 0x00	; 0
    3510:	c8 f7       	brcc	.-14     	; 0x3504 <memcmp+0x6>
    3512:	88 1b       	sub	r24, r24
    3514:	99 0b       	sbc	r25, r25
    3516:	08 95       	ret

00003518 <memcpy>:
    3518:	fb 01       	movw	r30, r22
    351a:	dc 01       	movw	r26, r24
    351c:	02 c0       	rjmp	.+4      	; 0x3522 <memcpy+0xa>
    351e:	01 90       	ld	r0, Z+
    3520:	0d 92       	st	X+, r0
    3522:	41 50       	subi	r20, 0x01	; 1
    3524:	50 40       	sbci	r21, 0x00	; 0
    3526:	d8 f7       	brcc	.-10     	; 0x351e <memcpy+0x6>
    3528:	08 95       	ret

0000352a <memmove>:
    352a:	68 17       	cp	r22, r24
    352c:	79 07       	cpc	r23, r25
    352e:	68 f4       	brcc	.+26     	; 0x354a <memmove+0x20>
    3530:	fb 01       	movw	r30, r22
    3532:	dc 01       	movw	r26, r24
    3534:	e4 0f       	add	r30, r20
    3536:	f5 1f       	adc	r31, r21
    3538:	a4 0f       	add	r26, r20
    353a:	b5 1f       	adc	r27, r21
    353c:	02 c0       	rjmp	.+4      	; 0x3542 <memmove+0x18>
    353e:	02 90       	ld	r0, -Z
    3540:	0e 92       	st	-X, r0
    3542:	41 50       	subi	r20, 0x01	; 1
    3544:	50 40       	sbci	r21, 0x00	; 0
    3546:	d8 f7       	brcc	.-10     	; 0x353e <memmove+0x14>
    3548:	08 95       	ret
    354a:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <memcpy>

0000354e <strchr>:
    354e:	fc 01       	movw	r30, r24
    3550:	81 91       	ld	r24, Z+
    3552:	86 17       	cp	r24, r22
    3554:	21 f0       	breq	.+8      	; 0x355e <strchr+0x10>
    3556:	88 23       	and	r24, r24
    3558:	d9 f7       	brne	.-10     	; 0x3550 <strchr+0x2>
    355a:	99 27       	eor	r25, r25
    355c:	08 95       	ret
    355e:	31 97       	sbiw	r30, 0x01	; 1
    3560:	cf 01       	movw	r24, r30
    3562:	08 95       	ret

00003564 <strcmp>:
    3564:	fb 01       	movw	r30, r22
    3566:	dc 01       	movw	r26, r24
    3568:	8d 91       	ld	r24, X+
    356a:	01 90       	ld	r0, Z+
    356c:	80 19       	sub	r24, r0
    356e:	01 10       	cpse	r0, r1
    3570:	d9 f3       	breq	.-10     	; 0x3568 <strcmp+0x4>
    3572:	99 0b       	sbc	r25, r25
    3574:	08 95       	ret

00003576 <strcpy>:
    3576:	fb 01       	movw	r30, r22
    3578:	dc 01       	movw	r26, r24
    357a:	01 90       	ld	r0, Z+
    357c:	0d 92       	st	X+, r0
    357e:	00 20       	and	r0, r0
    3580:	e1 f7       	brne	.-8      	; 0x357a <strcpy+0x4>
    3582:	08 95       	ret

00003584 <strncmp>:
    3584:	fb 01       	movw	r30, r22
    3586:	dc 01       	movw	r26, r24
    3588:	41 50       	subi	r20, 0x01	; 1
    358a:	50 40       	sbci	r21, 0x00	; 0
    358c:	30 f0       	brcs	.+12     	; 0x359a <strncmp+0x16>
    358e:	8d 91       	ld	r24, X+
    3590:	01 90       	ld	r0, Z+
    3592:	80 19       	sub	r24, r0
    3594:	19 f4       	brne	.+6      	; 0x359c <strncmp+0x18>
    3596:	00 20       	and	r0, r0
    3598:	b9 f7       	brne	.-18     	; 0x3588 <strncmp+0x4>
    359a:	88 1b       	sub	r24, r24
    359c:	99 0b       	sbc	r25, r25
    359e:	08 95       	ret

000035a0 <strncpy>:
    35a0:	fb 01       	movw	r30, r22
    35a2:	dc 01       	movw	r26, r24
    35a4:	41 50       	subi	r20, 0x01	; 1
    35a6:	50 40       	sbci	r21, 0x00	; 0
    35a8:	48 f0       	brcs	.+18     	; 0x35bc <strncpy+0x1c>
    35aa:	01 90       	ld	r0, Z+
    35ac:	0d 92       	st	X+, r0
    35ae:	00 20       	and	r0, r0
    35b0:	c9 f7       	brne	.-14     	; 0x35a4 <strncpy+0x4>
    35b2:	01 c0       	rjmp	.+2      	; 0x35b6 <strncpy+0x16>
    35b4:	1d 92       	st	X+, r1
    35b6:	41 50       	subi	r20, 0x01	; 1
    35b8:	50 40       	sbci	r21, 0x00	; 0
    35ba:	e0 f7       	brcc	.-8      	; 0x35b4 <strncpy+0x14>
    35bc:	08 95       	ret

000035be <strrchr>:
    35be:	fc 01       	movw	r30, r24
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	01 90       	ld	r0, Z+
    35c6:	06 16       	cp	r0, r22
    35c8:	09 f4       	brne	.+2      	; 0x35cc <strrchr+0xe>
    35ca:	cf 01       	movw	r24, r30
    35cc:	00 20       	and	r0, r0
    35ce:	d1 f7       	brne	.-12     	; 0x35c4 <strrchr+0x6>
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	08 95       	ret

000035d4 <strstr>:
    35d4:	fb 01       	movw	r30, r22
    35d6:	51 91       	ld	r21, Z+
    35d8:	55 23       	and	r21, r21
    35da:	a9 f0       	breq	.+42     	; 0x3606 <strstr+0x32>
    35dc:	bf 01       	movw	r22, r30
    35de:	dc 01       	movw	r26, r24
    35e0:	4d 91       	ld	r20, X+
    35e2:	45 17       	cp	r20, r21
    35e4:	41 11       	cpse	r20, r1
    35e6:	e1 f7       	brne	.-8      	; 0x35e0 <strstr+0xc>
    35e8:	59 f4       	brne	.+22     	; 0x3600 <strstr+0x2c>
    35ea:	cd 01       	movw	r24, r26
    35ec:	01 90       	ld	r0, Z+
    35ee:	00 20       	and	r0, r0
    35f0:	49 f0       	breq	.+18     	; 0x3604 <strstr+0x30>
    35f2:	4d 91       	ld	r20, X+
    35f4:	40 15       	cp	r20, r0
    35f6:	41 11       	cpse	r20, r1
    35f8:	c9 f3       	breq	.-14     	; 0x35ec <strstr+0x18>
    35fa:	fb 01       	movw	r30, r22
    35fc:	41 11       	cpse	r20, r1
    35fe:	ef cf       	rjmp	.-34     	; 0x35de <strstr+0xa>
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	08 95       	ret

00003608 <itoa>:
    3608:	fb 01       	movw	r30, r22
    360a:	9f 01       	movw	r18, r30
    360c:	e8 94       	clt
    360e:	42 30       	cpi	r20, 0x02	; 2
    3610:	c4 f0       	brlt	.+48     	; 0x3642 <itoa+0x3a>
    3612:	45 32       	cpi	r20, 0x25	; 37
    3614:	b4 f4       	brge	.+44     	; 0x3642 <itoa+0x3a>
    3616:	4a 30       	cpi	r20, 0x0A	; 10
    3618:	29 f4       	brne	.+10     	; 0x3624 <itoa+0x1c>
    361a:	97 fb       	bst	r25, 7
    361c:	1e f4       	brtc	.+6      	; 0x3624 <itoa+0x1c>
    361e:	90 95       	com	r25
    3620:	81 95       	neg	r24
    3622:	9f 4f       	sbci	r25, 0xFF	; 255
    3624:	64 2f       	mov	r22, r20
    3626:	77 27       	eor	r23, r23
    3628:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__udivmodhi4>
    362c:	80 5d       	subi	r24, 0xD0	; 208
    362e:	8a 33       	cpi	r24, 0x3A	; 58
    3630:	0c f0       	brlt	.+2      	; 0x3634 <itoa+0x2c>
    3632:	89 5d       	subi	r24, 0xD9	; 217
    3634:	81 93       	st	Z+, r24
    3636:	cb 01       	movw	r24, r22
    3638:	00 97       	sbiw	r24, 0x00	; 0
    363a:	a1 f7       	brne	.-24     	; 0x3624 <itoa+0x1c>
    363c:	16 f4       	brtc	.+4      	; 0x3642 <itoa+0x3a>
    363e:	5d e2       	ldi	r21, 0x2D	; 45
    3640:	51 93       	st	Z+, r21
    3642:	10 82       	st	Z, r1
    3644:	c9 01       	movw	r24, r18
    3646:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <strrev>

0000364a <ltoa>:
    364a:	fa 01       	movw	r30, r20
    364c:	cf 93       	push	r28
    364e:	ff 93       	push	r31
    3650:	ef 93       	push	r30
    3652:	22 30       	cpi	r18, 0x02	; 2
    3654:	44 f1       	brlt	.+80     	; 0x36a6 <ltoa+0x5c>
    3656:	25 32       	cpi	r18, 0x25	; 37
    3658:	34 f5       	brge	.+76     	; 0x36a6 <ltoa+0x5c>
    365a:	c2 2f       	mov	r28, r18
    365c:	e8 94       	clt
    365e:	ca 30       	cpi	r28, 0x0A	; 10
    3660:	49 f4       	brne	.+18     	; 0x3674 <ltoa+0x2a>
    3662:	97 fb       	bst	r25, 7
    3664:	3e f4       	brtc	.+14     	; 0x3674 <ltoa+0x2a>
    3666:	90 95       	com	r25
    3668:	80 95       	com	r24
    366a:	70 95       	com	r23
    366c:	61 95       	neg	r22
    366e:	7f 4f       	sbci	r23, 0xFF	; 255
    3670:	8f 4f       	sbci	r24, 0xFF	; 255
    3672:	9f 4f       	sbci	r25, 0xFF	; 255
    3674:	2c 2f       	mov	r18, r28
    3676:	33 27       	eor	r19, r19
    3678:	44 27       	eor	r20, r20
    367a:	55 27       	eor	r21, r21
    367c:	ff 93       	push	r31
    367e:	ef 93       	push	r30
    3680:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__udivmodsi4>
    3684:	ef 91       	pop	r30
    3686:	ff 91       	pop	r31
    3688:	60 5d       	subi	r22, 0xD0	; 208
    368a:	6a 33       	cpi	r22, 0x3A	; 58
    368c:	0c f0       	brlt	.+2      	; 0x3690 <ltoa+0x46>
    368e:	69 5d       	subi	r22, 0xD9	; 217
    3690:	61 93       	st	Z+, r22
    3692:	b9 01       	movw	r22, r18
    3694:	ca 01       	movw	r24, r20
    3696:	60 50       	subi	r22, 0x00	; 0
    3698:	70 40       	sbci	r23, 0x00	; 0
    369a:	80 40       	sbci	r24, 0x00	; 0
    369c:	90 40       	sbci	r25, 0x00	; 0
    369e:	51 f7       	brne	.-44     	; 0x3674 <ltoa+0x2a>
    36a0:	16 f4       	brtc	.+4      	; 0x36a6 <ltoa+0x5c>
    36a2:	cd e2       	ldi	r28, 0x2D	; 45
    36a4:	c1 93       	st	Z+, r28
    36a6:	10 82       	st	Z, r1
    36a8:	8f 91       	pop	r24
    36aa:	9f 91       	pop	r25
    36ac:	cf 91       	pop	r28
    36ae:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <strrev>

000036b2 <__mulsi_const_10>:
    36b2:	59 2f       	mov	r21, r25
    36b4:	48 2f       	mov	r20, r24
    36b6:	37 2f       	mov	r19, r23
    36b8:	26 2f       	mov	r18, r22
    36ba:	66 0f       	add	r22, r22
    36bc:	77 1f       	adc	r23, r23
    36be:	88 1f       	adc	r24, r24
    36c0:	99 1f       	adc	r25, r25
    36c2:	66 0f       	add	r22, r22
    36c4:	77 1f       	adc	r23, r23
    36c6:	88 1f       	adc	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	62 0f       	add	r22, r18
    36cc:	73 1f       	adc	r23, r19
    36ce:	84 1f       	adc	r24, r20
    36d0:	95 1f       	adc	r25, r21
    36d2:	66 0f       	add	r22, r22
    36d4:	77 1f       	adc	r23, r23
    36d6:	88 1f       	adc	r24, r24
    36d8:	99 1f       	adc	r25, r25
    36da:	08 95       	ret

000036dc <ultoa>:
    36dc:	fa 01       	movw	r30, r20
    36de:	cf 93       	push	r28
    36e0:	ff 93       	push	r31
    36e2:	ef 93       	push	r30
    36e4:	22 30       	cpi	r18, 0x02	; 2
    36e6:	cc f0       	brlt	.+50     	; 0x371a <ultoa+0x3e>
    36e8:	25 32       	cpi	r18, 0x25	; 37
    36ea:	bc f4       	brge	.+46     	; 0x371a <ultoa+0x3e>
    36ec:	c2 2f       	mov	r28, r18
    36ee:	2c 2f       	mov	r18, r28
    36f0:	33 27       	eor	r19, r19
    36f2:	44 27       	eor	r20, r20
    36f4:	55 27       	eor	r21, r21
    36f6:	ff 93       	push	r31
    36f8:	ef 93       	push	r30
    36fa:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__udivmodsi4>
    36fe:	ef 91       	pop	r30
    3700:	ff 91       	pop	r31
    3702:	60 5d       	subi	r22, 0xD0	; 208
    3704:	6a 33       	cpi	r22, 0x3A	; 58
    3706:	0c f0       	brlt	.+2      	; 0x370a <ultoa+0x2e>
    3708:	69 5d       	subi	r22, 0xD9	; 217
    370a:	61 93       	st	Z+, r22
    370c:	b9 01       	movw	r22, r18
    370e:	ca 01       	movw	r24, r20
    3710:	60 50       	subi	r22, 0x00	; 0
    3712:	70 40       	sbci	r23, 0x00	; 0
    3714:	80 40       	sbci	r24, 0x00	; 0
    3716:	90 40       	sbci	r25, 0x00	; 0
    3718:	51 f7       	brne	.-44     	; 0x36ee <ultoa+0x12>
    371a:	10 82       	st	Z, r1
    371c:	8f 91       	pop	r24
    371e:	9f 91       	pop	r25
    3720:	cf 91       	pop	r28
    3722:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <strrev>

00003726 <utoa>:
    3726:	fb 01       	movw	r30, r22
    3728:	9f 01       	movw	r18, r30
    372a:	42 30       	cpi	r20, 0x02	; 2
    372c:	74 f0       	brlt	.+28     	; 0x374a <utoa+0x24>
    372e:	45 32       	cpi	r20, 0x25	; 37
    3730:	64 f4       	brge	.+24     	; 0x374a <utoa+0x24>
    3732:	64 2f       	mov	r22, r20
    3734:	77 27       	eor	r23, r23
    3736:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__udivmodhi4>
    373a:	80 5d       	subi	r24, 0xD0	; 208
    373c:	8a 33       	cpi	r24, 0x3A	; 58
    373e:	0c f0       	brlt	.+2      	; 0x3742 <utoa+0x1c>
    3740:	89 5d       	subi	r24, 0xD9	; 217
    3742:	81 93       	st	Z+, r24
    3744:	cb 01       	movw	r24, r22
    3746:	00 97       	sbiw	r24, 0x00	; 0
    3748:	a1 f7       	brne	.-24     	; 0x3732 <utoa+0xc>
    374a:	10 82       	st	Z, r1
    374c:	c9 01       	movw	r24, r18
    374e:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <strrev>

00003752 <__ctype_isfalse>:
    3752:	99 27       	eor	r25, r25
    3754:	88 27       	eor	r24, r24

00003756 <__ctype_istrue>:
    3756:	08 95       	ret

00003758 <strrev>:
    3758:	dc 01       	movw	r26, r24
    375a:	fc 01       	movw	r30, r24
    375c:	67 2f       	mov	r22, r23
    375e:	71 91       	ld	r23, Z+
    3760:	77 23       	and	r23, r23
    3762:	e1 f7       	brne	.-8      	; 0x375c <strrev+0x4>
    3764:	32 97       	sbiw	r30, 0x02	; 2
    3766:	04 c0       	rjmp	.+8      	; 0x3770 <strrev+0x18>
    3768:	7c 91       	ld	r23, X
    376a:	6d 93       	st	X+, r22
    376c:	70 83       	st	Z, r23
    376e:	62 91       	ld	r22, -Z
    3770:	ae 17       	cp	r26, r30
    3772:	bf 07       	cpc	r27, r31
    3774:	c8 f3       	brcs	.-14     	; 0x3768 <strrev+0x10>
    3776:	08 95       	ret

00003778 <__udivmodhi4>:
    3778:	aa 1b       	sub	r26, r26
    377a:	bb 1b       	sub	r27, r27
    377c:	51 e1       	ldi	r21, 0x11	; 17
    377e:	07 c0       	rjmp	.+14     	; 0x378e <__udivmodhi4_ep>

00003780 <__udivmodhi4_loop>:
    3780:	aa 1f       	adc	r26, r26
    3782:	bb 1f       	adc	r27, r27
    3784:	a6 17       	cp	r26, r22
    3786:	b7 07       	cpc	r27, r23
    3788:	10 f0       	brcs	.+4      	; 0x378e <__udivmodhi4_ep>
    378a:	a6 1b       	sub	r26, r22
    378c:	b7 0b       	sbc	r27, r23

0000378e <__udivmodhi4_ep>:
    378e:	88 1f       	adc	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	5a 95       	dec	r21
    3794:	a9 f7       	brne	.-22     	; 0x3780 <__udivmodhi4_loop>
    3796:	80 95       	com	r24
    3798:	90 95       	com	r25
    379a:	bc 01       	movw	r22, r24
    379c:	cd 01       	movw	r24, r26
    379e:	08 95       	ret

000037a0 <_exit>:
    37a0:	f8 94       	cli

000037a2 <__stop_program>:
    37a2:	ff cf       	rjmp	.-2      	; 0x37a2 <__stop_program>

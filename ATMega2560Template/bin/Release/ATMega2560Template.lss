
bin\Release\ATMega2560Template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800200  0000373c  000037f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000373c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800332  00800332  00003922  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00003922  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000660  00000000  00000000  00003925  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000c79  00000000  00000000  00003f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000780a  00000000  00000000  00004bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023e4  00000000  00000000  0000c408  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b1b  00000000  00000000  0000e7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a20  00000000  00000000  00012308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001461  00000000  00000000  00012d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041ba  00000000  00000000  00014189  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00018343  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      54:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      5c:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__vector_23>
      60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      68:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      6c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      70:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      74:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      78:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      7c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      80:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      84:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      88:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      8c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      90:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      94:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      98:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      9c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      a0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      a4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      a8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      ac:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      b0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      b4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      b8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      bc:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      c0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      c4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      c8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      cc:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      d0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      d4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      d8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      dc:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      e0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>

000000e4 <__ctors_start>:
      e4:	a3 00       	.word	0x00a3	; ????
      e6:	93 09       	sbc	r25, r3

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf ef       	ldi	r28, 0xFF	; 255
      ee:	d1 e2       	ldi	r29, 0x21	; 33
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61
      f4:	00 e0       	ldi	r16, 0x00	; 0
      f6:	0c bf       	out	0x3c, r16	; 60

000000f8 <__do_copy_data>:
      f8:	13 e0       	ldi	r17, 0x03	; 3
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b2 e0       	ldi	r27, 0x02	; 2
      fe:	ec e3       	ldi	r30, 0x3C	; 60
     100:	f7 e3       	ldi	r31, 0x37	; 55
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0b bf       	out	0x3b, r16	; 59
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x14>
     108:	07 90       	elpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a2 33       	cpi	r26, 0x32	; 50
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0x10>

00000112 <__do_clear_bss>:
     112:	13 e0       	ldi	r17, 0x03	; 3
     114:	a2 e3       	ldi	r26, 0x32	; 50
     116:	b3 e0       	ldi	r27, 0x03	; 3
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	ac 34       	cpi	r26, 0x4C	; 76
     11e:	b1 07       	cpc	r27, r17
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>

00000122 <__do_global_ctors>:
     122:	10 e0       	ldi	r17, 0x00	; 0
     124:	c8 ee       	ldi	r28, 0xE8	; 232
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	04 c0       	rjmp	.+8      	; 0x132 <.do_global_ctors_start>

0000012a <.do_global_ctors_loop>:
     12a:	22 97       	sbiw	r28, 0x02	; 2
     12c:	fe 01       	movw	r30, r28
     12e:	0e 94 08 1a 	call	0x3410	; 0x3410 <__tablejump__>

00000132 <.do_global_ctors_start>:
     132:	c4 3e       	cpi	r28, 0xE4	; 228
     134:	d1 07       	cpc	r29, r17
     136:	c9 f7       	brne	.-14     	; 0x12a <.do_global_ctors_loop>
     138:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
     13c:	0c 94 9c 1b 	jmp	0x3738	; 0x3738 <_exit>

00000140 <__bad_interrupt>:
     140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <__cxa_pure_virtual>:
     144:	08 95       	ret

00000146 <_GLOBAL__I___cxa_pure_virtual>:
     146:	0f 93       	push	r16
     148:	82 e3       	ldi	r24, 0x32	; 50
     14a:	93 e0       	ldi	r25, 0x03	; 3
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	00 e0       	ldi	r16, 0x00	; 0
     154:	0e 94 87 09 	call	0x130e	; 0x130e <_ZN9IPAddressC1Ehhhh>
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <main>:
     15c:	0e 94 19 09 	call	0x1232	; 0x1232 <init>
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	08 95       	ret

00000166 <__fixunssfsi>:
     166:	ef 92       	push	r14
     168:	ff 92       	push	r15
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	7b 01       	movw	r14, r22
     170:	8c 01       	movw	r16, r24
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	5f e4       	ldi	r21, 0x4F	; 79
     17a:	0e 94 5f 04 	call	0x8be	; 0x8be <__gesf2>
     17e:	88 23       	and	r24, r24
     180:	8c f0       	brlt	.+34     	; 0x1a4 <__fixunssfsi+0x3e>
     182:	c8 01       	movw	r24, r16
     184:	b7 01       	movw	r22, r14
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	5f e4       	ldi	r21, 0x4F	; 79
     18e:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
     192:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fixsfsi>
     196:	9b 01       	movw	r18, r22
     198:	ac 01       	movw	r20, r24
     19a:	20 50       	subi	r18, 0x00	; 0
     19c:	30 40       	sbci	r19, 0x00	; 0
     19e:	40 40       	sbci	r20, 0x00	; 0
     1a0:	50 48       	sbci	r21, 0x80	; 128
     1a2:	06 c0       	rjmp	.+12     	; 0x1b0 <__fixunssfsi+0x4a>
     1a4:	c8 01       	movw	r24, r16
     1a6:	b7 01       	movw	r22, r14
     1a8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fixsfsi>
     1ac:	9b 01       	movw	r18, r22
     1ae:	ac 01       	movw	r20, r24
     1b0:	b9 01       	movw	r22, r18
     1b2:	ca 01       	movw	r24, r20
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	ff 90       	pop	r15
     1ba:	ef 90       	pop	r14
     1bc:	08 95       	ret

000001be <_fpadd_parts>:
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	e5 ee       	ldi	r30, 0xE5	; 229
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__prologue_saves__>
     1ca:	dc 01       	movw	r26, r24
     1cc:	2b 01       	movw	r4, r22
     1ce:	fa 01       	movw	r30, r20
     1d0:	9c 91       	ld	r25, X
     1d2:	92 30       	cpi	r25, 0x02	; 2
     1d4:	08 f4       	brcc	.+2      	; 0x1d8 <_fpadd_parts+0x1a>
     1d6:	39 c1       	rjmp	.+626    	; 0x44a <_fpadd_parts+0x28c>
     1d8:	eb 01       	movw	r28, r22
     1da:	88 81       	ld	r24, Y
     1dc:	82 30       	cpi	r24, 0x02	; 2
     1de:	08 f4       	brcc	.+2      	; 0x1e2 <_fpadd_parts+0x24>
     1e0:	33 c1       	rjmp	.+614    	; 0x448 <_fpadd_parts+0x28a>
     1e2:	94 30       	cpi	r25, 0x04	; 4
     1e4:	69 f4       	brne	.+26     	; 0x200 <_fpadd_parts+0x42>
     1e6:	84 30       	cpi	r24, 0x04	; 4
     1e8:	09 f0       	breq	.+2      	; 0x1ec <_fpadd_parts+0x2e>
     1ea:	2f c1       	rjmp	.+606    	; 0x44a <_fpadd_parts+0x28c>
     1ec:	11 96       	adiw	r26, 0x01	; 1
     1ee:	9c 91       	ld	r25, X
     1f0:	11 97       	sbiw	r26, 0x01	; 1
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	98 17       	cp	r25, r24
     1f6:	09 f4       	brne	.+2      	; 0x1fa <_fpadd_parts+0x3c>
     1f8:	28 c1       	rjmp	.+592    	; 0x44a <_fpadd_parts+0x28c>
     1fa:	af e0       	ldi	r26, 0x0F	; 15
     1fc:	b2 e0       	ldi	r27, 0x02	; 2
     1fe:	25 c1       	rjmp	.+586    	; 0x44a <_fpadd_parts+0x28c>
     200:	84 30       	cpi	r24, 0x04	; 4
     202:	09 f4       	brne	.+2      	; 0x206 <_fpadd_parts+0x48>
     204:	21 c1       	rjmp	.+578    	; 0x448 <_fpadd_parts+0x28a>
     206:	82 30       	cpi	r24, 0x02	; 2
     208:	a9 f4       	brne	.+42     	; 0x234 <_fpadd_parts+0x76>
     20a:	92 30       	cpi	r25, 0x02	; 2
     20c:	09 f0       	breq	.+2      	; 0x210 <_fpadd_parts+0x52>
     20e:	1d c1       	rjmp	.+570    	; 0x44a <_fpadd_parts+0x28c>
     210:	9a 01       	movw	r18, r20
     212:	ad 01       	movw	r20, r26
     214:	88 e0       	ldi	r24, 0x08	; 8
     216:	ea 01       	movw	r28, r20
     218:	09 90       	ld	r0, Y+
     21a:	ae 01       	movw	r20, r28
     21c:	e9 01       	movw	r28, r18
     21e:	09 92       	st	Y+, r0
     220:	9e 01       	movw	r18, r28
     222:	81 50       	subi	r24, 0x01	; 1
     224:	c1 f7       	brne	.-16     	; 0x216 <_fpadd_parts+0x58>
     226:	e2 01       	movw	r28, r4
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	11 96       	adiw	r26, 0x01	; 1
     22c:	9c 91       	ld	r25, X
     22e:	89 23       	and	r24, r25
     230:	81 83       	std	Z+1, r24	; 0x01
     232:	08 c1       	rjmp	.+528    	; 0x444 <_fpadd_parts+0x286>
     234:	92 30       	cpi	r25, 0x02	; 2
     236:	09 f4       	brne	.+2      	; 0x23a <_fpadd_parts+0x7c>
     238:	07 c1       	rjmp	.+526    	; 0x448 <_fpadd_parts+0x28a>
     23a:	12 96       	adiw	r26, 0x02	; 2
     23c:	2d 90       	ld	r2, X+
     23e:	3c 90       	ld	r3, X
     240:	13 97       	sbiw	r26, 0x03	; 3
     242:	eb 01       	movw	r28, r22
     244:	8a 81       	ldd	r24, Y+2	; 0x02
     246:	9b 81       	ldd	r25, Y+3	; 0x03
     248:	14 96       	adiw	r26, 0x04	; 4
     24a:	ad 90       	ld	r10, X+
     24c:	bd 90       	ld	r11, X+
     24e:	cd 90       	ld	r12, X+
     250:	dc 90       	ld	r13, X
     252:	17 97       	sbiw	r26, 0x07	; 7
     254:	ec 80       	ldd	r14, Y+4	; 0x04
     256:	fd 80       	ldd	r15, Y+5	; 0x05
     258:	0e 81       	ldd	r16, Y+6	; 0x06
     25a:	1f 81       	ldd	r17, Y+7	; 0x07
     25c:	91 01       	movw	r18, r2
     25e:	28 1b       	sub	r18, r24
     260:	39 0b       	sbc	r19, r25
     262:	b9 01       	movw	r22, r18
     264:	37 ff       	sbrs	r19, 7
     266:	04 c0       	rjmp	.+8      	; 0x270 <_fpadd_parts+0xb2>
     268:	66 27       	eor	r22, r22
     26a:	77 27       	eor	r23, r23
     26c:	62 1b       	sub	r22, r18
     26e:	73 0b       	sbc	r23, r19
     270:	60 32       	cpi	r22, 0x20	; 32
     272:	71 05       	cpc	r23, r1
     274:	0c f0       	brlt	.+2      	; 0x278 <_fpadd_parts+0xba>
     276:	61 c0       	rjmp	.+194    	; 0x33a <_fpadd_parts+0x17c>
     278:	12 16       	cp	r1, r18
     27a:	13 06       	cpc	r1, r19
     27c:	6c f5       	brge	.+90     	; 0x2d8 <_fpadd_parts+0x11a>
     27e:	37 01       	movw	r6, r14
     280:	48 01       	movw	r8, r16
     282:	06 2e       	mov	r0, r22
     284:	04 c0       	rjmp	.+8      	; 0x28e <_fpadd_parts+0xd0>
     286:	96 94       	lsr	r9
     288:	87 94       	ror	r8
     28a:	77 94       	ror	r7
     28c:	67 94       	ror	r6
     28e:	0a 94       	dec	r0
     290:	d2 f7       	brpl	.-12     	; 0x286 <_fpadd_parts+0xc8>
     292:	21 e0       	ldi	r18, 0x01	; 1
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <_fpadd_parts+0xe6>
     29c:	22 0f       	add	r18, r18
     29e:	33 1f       	adc	r19, r19
     2a0:	44 1f       	adc	r20, r20
     2a2:	55 1f       	adc	r21, r21
     2a4:	6a 95       	dec	r22
     2a6:	d2 f7       	brpl	.-12     	; 0x29c <_fpadd_parts+0xde>
     2a8:	21 50       	subi	r18, 0x01	; 1
     2aa:	30 40       	sbci	r19, 0x00	; 0
     2ac:	40 40       	sbci	r20, 0x00	; 0
     2ae:	50 40       	sbci	r21, 0x00	; 0
     2b0:	2e 21       	and	r18, r14
     2b2:	3f 21       	and	r19, r15
     2b4:	40 23       	and	r20, r16
     2b6:	51 23       	and	r21, r17
     2b8:	21 15       	cp	r18, r1
     2ba:	31 05       	cpc	r19, r1
     2bc:	41 05       	cpc	r20, r1
     2be:	51 05       	cpc	r21, r1
     2c0:	21 f0       	breq	.+8      	; 0x2ca <_fpadd_parts+0x10c>
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	79 01       	movw	r14, r18
     2cc:	8a 01       	movw	r16, r20
     2ce:	e6 28       	or	r14, r6
     2d0:	f7 28       	or	r15, r7
     2d2:	08 29       	or	r16, r8
     2d4:	19 29       	or	r17, r9
     2d6:	3c c0       	rjmp	.+120    	; 0x350 <_fpadd_parts+0x192>
     2d8:	23 2b       	or	r18, r19
     2da:	d1 f1       	breq	.+116    	; 0x350 <_fpadd_parts+0x192>
     2dc:	26 0e       	add	r2, r22
     2de:	37 1e       	adc	r3, r23
     2e0:	35 01       	movw	r6, r10
     2e2:	46 01       	movw	r8, r12
     2e4:	06 2e       	mov	r0, r22
     2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <_fpadd_parts+0x132>
     2e8:	96 94       	lsr	r9
     2ea:	87 94       	ror	r8
     2ec:	77 94       	ror	r7
     2ee:	67 94       	ror	r6
     2f0:	0a 94       	dec	r0
     2f2:	d2 f7       	brpl	.-12     	; 0x2e8 <_fpadd_parts+0x12a>
     2f4:	21 e0       	ldi	r18, 0x01	; 1
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <_fpadd_parts+0x148>
     2fe:	22 0f       	add	r18, r18
     300:	33 1f       	adc	r19, r19
     302:	44 1f       	adc	r20, r20
     304:	55 1f       	adc	r21, r21
     306:	6a 95       	dec	r22
     308:	d2 f7       	brpl	.-12     	; 0x2fe <_fpadd_parts+0x140>
     30a:	21 50       	subi	r18, 0x01	; 1
     30c:	30 40       	sbci	r19, 0x00	; 0
     30e:	40 40       	sbci	r20, 0x00	; 0
     310:	50 40       	sbci	r21, 0x00	; 0
     312:	2a 21       	and	r18, r10
     314:	3b 21       	and	r19, r11
     316:	4c 21       	and	r20, r12
     318:	5d 21       	and	r21, r13
     31a:	21 15       	cp	r18, r1
     31c:	31 05       	cpc	r19, r1
     31e:	41 05       	cpc	r20, r1
     320:	51 05       	cpc	r21, r1
     322:	21 f0       	breq	.+8      	; 0x32c <_fpadd_parts+0x16e>
     324:	21 e0       	ldi	r18, 0x01	; 1
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	59 01       	movw	r10, r18
     32e:	6a 01       	movw	r12, r20
     330:	a6 28       	or	r10, r6
     332:	b7 28       	or	r11, r7
     334:	c8 28       	or	r12, r8
     336:	d9 28       	or	r13, r9
     338:	0b c0       	rjmp	.+22     	; 0x350 <_fpadd_parts+0x192>
     33a:	82 15       	cp	r24, r2
     33c:	93 05       	cpc	r25, r3
     33e:	2c f0       	brlt	.+10     	; 0x34a <_fpadd_parts+0x18c>
     340:	1c 01       	movw	r2, r24
     342:	aa 24       	eor	r10, r10
     344:	bb 24       	eor	r11, r11
     346:	65 01       	movw	r12, r10
     348:	03 c0       	rjmp	.+6      	; 0x350 <_fpadd_parts+0x192>
     34a:	ee 24       	eor	r14, r14
     34c:	ff 24       	eor	r15, r15
     34e:	87 01       	movw	r16, r14
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	d2 01       	movw	r26, r4
     356:	11 96       	adiw	r26, 0x01	; 1
     358:	8c 91       	ld	r24, X
     35a:	98 17       	cp	r25, r24
     35c:	09 f4       	brne	.+2      	; 0x360 <_fpadd_parts+0x1a2>
     35e:	45 c0       	rjmp	.+138    	; 0x3ea <_fpadd_parts+0x22c>
     360:	99 23       	and	r25, r25
     362:	39 f0       	breq	.+14     	; 0x372 <_fpadd_parts+0x1b4>
     364:	a8 01       	movw	r20, r16
     366:	97 01       	movw	r18, r14
     368:	2a 19       	sub	r18, r10
     36a:	3b 09       	sbc	r19, r11
     36c:	4c 09       	sbc	r20, r12
     36e:	5d 09       	sbc	r21, r13
     370:	06 c0       	rjmp	.+12     	; 0x37e <_fpadd_parts+0x1c0>
     372:	a6 01       	movw	r20, r12
     374:	95 01       	movw	r18, r10
     376:	2e 19       	sub	r18, r14
     378:	3f 09       	sbc	r19, r15
     37a:	40 0b       	sbc	r20, r16
     37c:	51 0b       	sbc	r21, r17
     37e:	57 fd       	sbrc	r21, 7
     380:	08 c0       	rjmp	.+16     	; 0x392 <_fpadd_parts+0x1d4>
     382:	11 82       	std	Z+1, r1	; 0x01
     384:	33 82       	std	Z+3, r3	; 0x03
     386:	22 82       	std	Z+2, r2	; 0x02
     388:	24 83       	std	Z+4, r18	; 0x04
     38a:	35 83       	std	Z+5, r19	; 0x05
     38c:	46 83       	std	Z+6, r20	; 0x06
     38e:	57 83       	std	Z+7, r21	; 0x07
     390:	1d c0       	rjmp	.+58     	; 0x3cc <_fpadd_parts+0x20e>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	33 82       	std	Z+3, r3	; 0x03
     398:	22 82       	std	Z+2, r2	; 0x02
     39a:	88 27       	eor	r24, r24
     39c:	99 27       	eor	r25, r25
     39e:	dc 01       	movw	r26, r24
     3a0:	82 1b       	sub	r24, r18
     3a2:	93 0b       	sbc	r25, r19
     3a4:	a4 0b       	sbc	r26, r20
     3a6:	b5 0b       	sbc	r27, r21
     3a8:	84 83       	std	Z+4, r24	; 0x04
     3aa:	95 83       	std	Z+5, r25	; 0x05
     3ac:	a6 83       	std	Z+6, r26	; 0x06
     3ae:	b7 83       	std	Z+7, r27	; 0x07
     3b0:	0d c0       	rjmp	.+26     	; 0x3cc <_fpadd_parts+0x20e>
     3b2:	22 0f       	add	r18, r18
     3b4:	33 1f       	adc	r19, r19
     3b6:	44 1f       	adc	r20, r20
     3b8:	55 1f       	adc	r21, r21
     3ba:	24 83       	std	Z+4, r18	; 0x04
     3bc:	35 83       	std	Z+5, r19	; 0x05
     3be:	46 83       	std	Z+6, r20	; 0x06
     3c0:	57 83       	std	Z+7, r21	; 0x07
     3c2:	82 81       	ldd	r24, Z+2	; 0x02
     3c4:	93 81       	ldd	r25, Z+3	; 0x03
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	93 83       	std	Z+3, r25	; 0x03
     3ca:	82 83       	std	Z+2, r24	; 0x02
     3cc:	24 81       	ldd	r18, Z+4	; 0x04
     3ce:	35 81       	ldd	r19, Z+5	; 0x05
     3d0:	46 81       	ldd	r20, Z+6	; 0x06
     3d2:	57 81       	ldd	r21, Z+7	; 0x07
     3d4:	da 01       	movw	r26, r20
     3d6:	c9 01       	movw	r24, r18
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	a1 09       	sbc	r26, r1
     3dc:	b1 09       	sbc	r27, r1
     3de:	8f 5f       	subi	r24, 0xFF	; 255
     3e0:	9f 4f       	sbci	r25, 0xFF	; 255
     3e2:	af 4f       	sbci	r26, 0xFF	; 255
     3e4:	bf 43       	sbci	r27, 0x3F	; 63
     3e6:	28 f3       	brcs	.-54     	; 0x3b2 <_fpadd_parts+0x1f4>
     3e8:	0b c0       	rjmp	.+22     	; 0x400 <_fpadd_parts+0x242>
     3ea:	91 83       	std	Z+1, r25	; 0x01
     3ec:	33 82       	std	Z+3, r3	; 0x03
     3ee:	22 82       	std	Z+2, r2	; 0x02
     3f0:	ea 0c       	add	r14, r10
     3f2:	fb 1c       	adc	r15, r11
     3f4:	0c 1d       	adc	r16, r12
     3f6:	1d 1d       	adc	r17, r13
     3f8:	e4 82       	std	Z+4, r14	; 0x04
     3fa:	f5 82       	std	Z+5, r15	; 0x05
     3fc:	06 83       	std	Z+6, r16	; 0x06
     3fe:	17 83       	std	Z+7, r17	; 0x07
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	80 83       	st	Z, r24
     404:	24 81       	ldd	r18, Z+4	; 0x04
     406:	35 81       	ldd	r19, Z+5	; 0x05
     408:	46 81       	ldd	r20, Z+6	; 0x06
     40a:	57 81       	ldd	r21, Z+7	; 0x07
     40c:	57 ff       	sbrs	r21, 7
     40e:	1a c0       	rjmp	.+52     	; 0x444 <_fpadd_parts+0x286>
     410:	c9 01       	movw	r24, r18
     412:	aa 27       	eor	r26, r26
     414:	97 fd       	sbrc	r25, 7
     416:	a0 95       	com	r26
     418:	ba 2f       	mov	r27, r26
     41a:	81 70       	andi	r24, 0x01	; 1
     41c:	90 70       	andi	r25, 0x00	; 0
     41e:	a0 70       	andi	r26, 0x00	; 0
     420:	b0 70       	andi	r27, 0x00	; 0
     422:	56 95       	lsr	r21
     424:	47 95       	ror	r20
     426:	37 95       	ror	r19
     428:	27 95       	ror	r18
     42a:	82 2b       	or	r24, r18
     42c:	93 2b       	or	r25, r19
     42e:	a4 2b       	or	r26, r20
     430:	b5 2b       	or	r27, r21
     432:	84 83       	std	Z+4, r24	; 0x04
     434:	95 83       	std	Z+5, r25	; 0x05
     436:	a6 83       	std	Z+6, r26	; 0x06
     438:	b7 83       	std	Z+7, r27	; 0x07
     43a:	82 81       	ldd	r24, Z+2	; 0x02
     43c:	93 81       	ldd	r25, Z+3	; 0x03
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	93 83       	std	Z+3, r25	; 0x03
     442:	82 83       	std	Z+2, r24	; 0x02
     444:	df 01       	movw	r26, r30
     446:	01 c0       	rjmp	.+2      	; 0x44a <_fpadd_parts+0x28c>
     448:	d2 01       	movw	r26, r4
     44a:	cd 01       	movw	r24, r26
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	e2 e1       	ldi	r30, 0x12	; 18
     452:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__epilogue_restores__>

00000456 <__subsf3>:
     456:	a0 e2       	ldi	r26, 0x20	; 32
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	e1 e3       	ldi	r30, 0x31	; 49
     45c:	f2 e0       	ldi	r31, 0x02	; 2
     45e:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     462:	69 83       	std	Y+1, r22	; 0x01
     464:	7a 83       	std	Y+2, r23	; 0x02
     466:	8b 83       	std	Y+3, r24	; 0x03
     468:	9c 83       	std	Y+4, r25	; 0x04
     46a:	2d 83       	std	Y+5, r18	; 0x05
     46c:	3e 83       	std	Y+6, r19	; 0x06
     46e:	4f 83       	std	Y+7, r20	; 0x07
     470:	58 87       	std	Y+8, r21	; 0x08
     472:	e9 e0       	ldi	r30, 0x09	; 9
     474:	ee 2e       	mov	r14, r30
     476:	f1 2c       	mov	r15, r1
     478:	ec 0e       	add	r14, r28
     47a:	fd 1e       	adc	r15, r29
     47c:	ce 01       	movw	r24, r28
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	b7 01       	movw	r22, r14
     482:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     486:	8e 01       	movw	r16, r28
     488:	0f 5e       	subi	r16, 0xEF	; 239
     48a:	1f 4f       	sbci	r17, 0xFF	; 255
     48c:	ce 01       	movw	r24, r28
     48e:	05 96       	adiw	r24, 0x05	; 5
     490:	b8 01       	movw	r22, r16
     492:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     496:	8a 89       	ldd	r24, Y+18	; 0x12
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	89 27       	eor	r24, r25
     49c:	8a 8b       	std	Y+18, r24	; 0x12
     49e:	c7 01       	movw	r24, r14
     4a0:	b8 01       	movw	r22, r16
     4a2:	ae 01       	movw	r20, r28
     4a4:	47 5e       	subi	r20, 0xE7	; 231
     4a6:	5f 4f       	sbci	r21, 0xFF	; 255
     4a8:	0e 94 df 00 	call	0x1be	; 0x1be <_fpadd_parts>
     4ac:	0e 94 94 06 	call	0xd28	; 0xd28 <__pack_f>
     4b0:	a0 96       	adiw	r28, 0x20	; 32
     4b2:	e6 e0       	ldi	r30, 0x06	; 6
     4b4:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

000004b8 <__addsf3>:
     4b8:	a0 e2       	ldi	r26, 0x20	; 32
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	e2 e6       	ldi	r30, 0x62	; 98
     4be:	f2 e0       	ldi	r31, 0x02	; 2
     4c0:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     4c4:	69 83       	std	Y+1, r22	; 0x01
     4c6:	7a 83       	std	Y+2, r23	; 0x02
     4c8:	8b 83       	std	Y+3, r24	; 0x03
     4ca:	9c 83       	std	Y+4, r25	; 0x04
     4cc:	2d 83       	std	Y+5, r18	; 0x05
     4ce:	3e 83       	std	Y+6, r19	; 0x06
     4d0:	4f 83       	std	Y+7, r20	; 0x07
     4d2:	58 87       	std	Y+8, r21	; 0x08
     4d4:	f9 e0       	ldi	r31, 0x09	; 9
     4d6:	ef 2e       	mov	r14, r31
     4d8:	f1 2c       	mov	r15, r1
     4da:	ec 0e       	add	r14, r28
     4dc:	fd 1e       	adc	r15, r29
     4de:	ce 01       	movw	r24, r28
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	b7 01       	movw	r22, r14
     4e4:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     4e8:	8e 01       	movw	r16, r28
     4ea:	0f 5e       	subi	r16, 0xEF	; 239
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
     4ee:	ce 01       	movw	r24, r28
     4f0:	05 96       	adiw	r24, 0x05	; 5
     4f2:	b8 01       	movw	r22, r16
     4f4:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     4f8:	c7 01       	movw	r24, r14
     4fa:	b8 01       	movw	r22, r16
     4fc:	ae 01       	movw	r20, r28
     4fe:	47 5e       	subi	r20, 0xE7	; 231
     500:	5f 4f       	sbci	r21, 0xFF	; 255
     502:	0e 94 df 00 	call	0x1be	; 0x1be <_fpadd_parts>
     506:	0e 94 94 06 	call	0xd28	; 0xd28 <__pack_f>
     50a:	a0 96       	adiw	r28, 0x20	; 32
     50c:	e6 e0       	ldi	r30, 0x06	; 6
     50e:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

00000512 <__mulsf3>:
     512:	a0 e2       	ldi	r26, 0x20	; 32
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ef e8       	ldi	r30, 0x8F	; 143
     518:	f2 e0       	ldi	r31, 0x02	; 2
     51a:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__prologue_saves__>
     51e:	69 83       	std	Y+1, r22	; 0x01
     520:	7a 83       	std	Y+2, r23	; 0x02
     522:	8b 83       	std	Y+3, r24	; 0x03
     524:	9c 83       	std	Y+4, r25	; 0x04
     526:	2d 83       	std	Y+5, r18	; 0x05
     528:	3e 83       	std	Y+6, r19	; 0x06
     52a:	4f 83       	std	Y+7, r20	; 0x07
     52c:	58 87       	std	Y+8, r21	; 0x08
     52e:	ce 01       	movw	r24, r28
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	be 01       	movw	r22, r28
     534:	67 5f       	subi	r22, 0xF7	; 247
     536:	7f 4f       	sbci	r23, 0xFF	; 255
     538:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     53c:	ce 01       	movw	r24, r28
     53e:	05 96       	adiw	r24, 0x05	; 5
     540:	be 01       	movw	r22, r28
     542:	6f 5e       	subi	r22, 0xEF	; 239
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     54a:	99 85       	ldd	r25, Y+9	; 0x09
     54c:	92 30       	cpi	r25, 0x02	; 2
     54e:	88 f0       	brcs	.+34     	; 0x572 <__mulsf3+0x60>
     550:	89 89       	ldd	r24, Y+17	; 0x11
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	c8 f0       	brcs	.+50     	; 0x588 <__mulsf3+0x76>
     556:	94 30       	cpi	r25, 0x04	; 4
     558:	19 f4       	brne	.+6      	; 0x560 <__mulsf3+0x4e>
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	51 f4       	brne	.+20     	; 0x572 <__mulsf3+0x60>
     55e:	04 c0       	rjmp	.+8      	; 0x568 <__mulsf3+0x56>
     560:	84 30       	cpi	r24, 0x04	; 4
     562:	29 f4       	brne	.+10     	; 0x56e <__mulsf3+0x5c>
     564:	92 30       	cpi	r25, 0x02	; 2
     566:	81 f4       	brne	.+32     	; 0x588 <__mulsf3+0x76>
     568:	8f e0       	ldi	r24, 0x0F	; 15
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	c6 c0       	rjmp	.+396    	; 0x6fa <__mulsf3+0x1e8>
     56e:	92 30       	cpi	r25, 0x02	; 2
     570:	49 f4       	brne	.+18     	; 0x584 <__mulsf3+0x72>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	9a 85       	ldd	r25, Y+10	; 0x0a
     576:	8a 89       	ldd	r24, Y+18	; 0x12
     578:	98 13       	cpse	r25, r24
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	2a 87       	std	Y+10, r18	; 0x0a
     57e:	ce 01       	movw	r24, r28
     580:	09 96       	adiw	r24, 0x09	; 9
     582:	bb c0       	rjmp	.+374    	; 0x6fa <__mulsf3+0x1e8>
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	49 f4       	brne	.+18     	; 0x59a <__mulsf3+0x88>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	9a 85       	ldd	r25, Y+10	; 0x0a
     58c:	8a 89       	ldd	r24, Y+18	; 0x12
     58e:	98 13       	cpse	r25, r24
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	2a 8b       	std	Y+18, r18	; 0x12
     594:	ce 01       	movw	r24, r28
     596:	41 96       	adiw	r24, 0x11	; 17
     598:	b0 c0       	rjmp	.+352    	; 0x6fa <__mulsf3+0x1e8>
     59a:	2d 84       	ldd	r2, Y+13	; 0x0d
     59c:	3e 84       	ldd	r3, Y+14	; 0x0e
     59e:	4f 84       	ldd	r4, Y+15	; 0x0f
     5a0:	58 88       	ldd	r5, Y+16	; 0x10
     5a2:	6d 88       	ldd	r6, Y+21	; 0x15
     5a4:	7e 88       	ldd	r7, Y+22	; 0x16
     5a6:	8f 88       	ldd	r8, Y+23	; 0x17
     5a8:	98 8c       	ldd	r9, Y+24	; 0x18
     5aa:	ee 24       	eor	r14, r14
     5ac:	ff 24       	eor	r15, r15
     5ae:	87 01       	movw	r16, r14
     5b0:	aa 24       	eor	r10, r10
     5b2:	bb 24       	eor	r11, r11
     5b4:	65 01       	movw	r12, r10
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	e0 e0       	ldi	r30, 0x00	; 0
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	c1 01       	movw	r24, r2
     5c4:	81 70       	andi	r24, 0x01	; 1
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	89 2b       	or	r24, r25
     5ca:	e9 f0       	breq	.+58     	; 0x606 <__mulsf3+0xf4>
     5cc:	e6 0c       	add	r14, r6
     5ce:	f7 1c       	adc	r15, r7
     5d0:	08 1d       	adc	r16, r8
     5d2:	19 1d       	adc	r17, r9
     5d4:	9a 01       	movw	r18, r20
     5d6:	ab 01       	movw	r20, r22
     5d8:	2a 0d       	add	r18, r10
     5da:	3b 1d       	adc	r19, r11
     5dc:	4c 1d       	adc	r20, r12
     5de:	5d 1d       	adc	r21, r13
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	a0 e0       	ldi	r26, 0x00	; 0
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	e6 14       	cp	r14, r6
     5ea:	f7 04       	cpc	r15, r7
     5ec:	08 05       	cpc	r16, r8
     5ee:	19 05       	cpc	r17, r9
     5f0:	20 f4       	brcc	.+8      	; 0x5fa <__mulsf3+0xe8>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	ba 01       	movw	r22, r20
     5fc:	a9 01       	movw	r20, r18
     5fe:	48 0f       	add	r20, r24
     600:	59 1f       	adc	r21, r25
     602:	6a 1f       	adc	r22, r26
     604:	7b 1f       	adc	r23, r27
     606:	aa 0c       	add	r10, r10
     608:	bb 1c       	adc	r11, r11
     60a:	cc 1c       	adc	r12, r12
     60c:	dd 1c       	adc	r13, r13
     60e:	97 fe       	sbrs	r9, 7
     610:	08 c0       	rjmp	.+16     	; 0x622 <__mulsf3+0x110>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	a0 e0       	ldi	r26, 0x00	; 0
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	a8 2a       	or	r10, r24
     61c:	b9 2a       	or	r11, r25
     61e:	ca 2a       	or	r12, r26
     620:	db 2a       	or	r13, r27
     622:	31 96       	adiw	r30, 0x01	; 1
     624:	e0 32       	cpi	r30, 0x20	; 32
     626:	f1 05       	cpc	r31, r1
     628:	49 f0       	breq	.+18     	; 0x63c <__mulsf3+0x12a>
     62a:	66 0c       	add	r6, r6
     62c:	77 1c       	adc	r7, r7
     62e:	88 1c       	adc	r8, r8
     630:	99 1c       	adc	r9, r9
     632:	56 94       	lsr	r5
     634:	47 94       	ror	r4
     636:	37 94       	ror	r3
     638:	27 94       	ror	r2
     63a:	c3 cf       	rjmp	.-122    	; 0x5c2 <__mulsf3+0xb0>
     63c:	fa 85       	ldd	r31, Y+10	; 0x0a
     63e:	ea 89       	ldd	r30, Y+18	; 0x12
     640:	2b 89       	ldd	r18, Y+19	; 0x13
     642:	3c 89       	ldd	r19, Y+20	; 0x14
     644:	8b 85       	ldd	r24, Y+11	; 0x0b
     646:	9c 85       	ldd	r25, Y+12	; 0x0c
     648:	28 0f       	add	r18, r24
     64a:	39 1f       	adc	r19, r25
     64c:	2e 5f       	subi	r18, 0xFE	; 254
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	17 c0       	rjmp	.+46     	; 0x680 <__mulsf3+0x16e>
     652:	ca 01       	movw	r24, r20
     654:	81 70       	andi	r24, 0x01	; 1
     656:	90 70       	andi	r25, 0x00	; 0
     658:	89 2b       	or	r24, r25
     65a:	61 f0       	breq	.+24     	; 0x674 <__mulsf3+0x162>
     65c:	16 95       	lsr	r17
     65e:	07 95       	ror	r16
     660:	f7 94       	ror	r15
     662:	e7 94       	ror	r14
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	a0 e0       	ldi	r26, 0x00	; 0
     66a:	b0 e8       	ldi	r27, 0x80	; 128
     66c:	e8 2a       	or	r14, r24
     66e:	f9 2a       	or	r15, r25
     670:	0a 2b       	or	r16, r26
     672:	1b 2b       	or	r17, r27
     674:	76 95       	lsr	r23
     676:	67 95       	ror	r22
     678:	57 95       	ror	r21
     67a:	47 95       	ror	r20
     67c:	2f 5f       	subi	r18, 0xFF	; 255
     67e:	3f 4f       	sbci	r19, 0xFF	; 255
     680:	77 fd       	sbrc	r23, 7
     682:	e7 cf       	rjmp	.-50     	; 0x652 <__mulsf3+0x140>
     684:	0c c0       	rjmp	.+24     	; 0x69e <__mulsf3+0x18c>
     686:	44 0f       	add	r20, r20
     688:	55 1f       	adc	r21, r21
     68a:	66 1f       	adc	r22, r22
     68c:	77 1f       	adc	r23, r23
     68e:	17 fd       	sbrc	r17, 7
     690:	41 60       	ori	r20, 0x01	; 1
     692:	ee 0c       	add	r14, r14
     694:	ff 1c       	adc	r15, r15
     696:	00 1f       	adc	r16, r16
     698:	11 1f       	adc	r17, r17
     69a:	21 50       	subi	r18, 0x01	; 1
     69c:	30 40       	sbci	r19, 0x00	; 0
     69e:	40 30       	cpi	r20, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	59 07       	cpc	r21, r25
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	69 07       	cpc	r22, r25
     6a8:	90 e4       	ldi	r25, 0x40	; 64
     6aa:	79 07       	cpc	r23, r25
     6ac:	60 f3       	brcs	.-40     	; 0x686 <__mulsf3+0x174>
     6ae:	2b 8f       	std	Y+27, r18	; 0x1b
     6b0:	3c 8f       	std	Y+28, r19	; 0x1c
     6b2:	db 01       	movw	r26, r22
     6b4:	ca 01       	movw	r24, r20
     6b6:	8f 77       	andi	r24, 0x7F	; 127
     6b8:	90 70       	andi	r25, 0x00	; 0
     6ba:	a0 70       	andi	r26, 0x00	; 0
     6bc:	b0 70       	andi	r27, 0x00	; 0
     6be:	80 34       	cpi	r24, 0x40	; 64
     6c0:	91 05       	cpc	r25, r1
     6c2:	a1 05       	cpc	r26, r1
     6c4:	b1 05       	cpc	r27, r1
     6c6:	61 f4       	brne	.+24     	; 0x6e0 <__mulsf3+0x1ce>
     6c8:	47 fd       	sbrc	r20, 7
     6ca:	0a c0       	rjmp	.+20     	; 0x6e0 <__mulsf3+0x1ce>
     6cc:	e1 14       	cp	r14, r1
     6ce:	f1 04       	cpc	r15, r1
     6d0:	01 05       	cpc	r16, r1
     6d2:	11 05       	cpc	r17, r1
     6d4:	29 f0       	breq	.+10     	; 0x6e0 <__mulsf3+0x1ce>
     6d6:	40 5c       	subi	r20, 0xC0	; 192
     6d8:	5f 4f       	sbci	r21, 0xFF	; 255
     6da:	6f 4f       	sbci	r22, 0xFF	; 255
     6dc:	7f 4f       	sbci	r23, 0xFF	; 255
     6de:	40 78       	andi	r20, 0x80	; 128
     6e0:	1a 8e       	std	Y+26, r1	; 0x1a
     6e2:	fe 17       	cp	r31, r30
     6e4:	11 f0       	breq	.+4      	; 0x6ea <__mulsf3+0x1d8>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	8a 8f       	std	Y+26, r24	; 0x1a
     6ea:	4d 8f       	std	Y+29, r20	; 0x1d
     6ec:	5e 8f       	std	Y+30, r21	; 0x1e
     6ee:	6f 8f       	std	Y+31, r22	; 0x1f
     6f0:	78 a3       	std	Y+32, r23	; 0x20
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	89 8f       	std	Y+25, r24	; 0x19
     6f6:	ce 01       	movw	r24, r28
     6f8:	49 96       	adiw	r24, 0x19	; 25
     6fa:	0e 94 94 06 	call	0xd28	; 0xd28 <__pack_f>
     6fe:	a0 96       	adiw	r28, 0x20	; 32
     700:	e2 e1       	ldi	r30, 0x12	; 18
     702:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__epilogue_restores__>

00000706 <__divsf3>:
     706:	a8 e1       	ldi	r26, 0x18	; 24
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	e9 e8       	ldi	r30, 0x89	; 137
     70c:	f3 e0       	ldi	r31, 0x03	; 3
     70e:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x10>
     712:	69 83       	std	Y+1, r22	; 0x01
     714:	7a 83       	std	Y+2, r23	; 0x02
     716:	8b 83       	std	Y+3, r24	; 0x03
     718:	9c 83       	std	Y+4, r25	; 0x04
     71a:	2d 83       	std	Y+5, r18	; 0x05
     71c:	3e 83       	std	Y+6, r19	; 0x06
     71e:	4f 83       	std	Y+7, r20	; 0x07
     720:	58 87       	std	Y+8, r21	; 0x08
     722:	b9 e0       	ldi	r27, 0x09	; 9
     724:	eb 2e       	mov	r14, r27
     726:	f1 2c       	mov	r15, r1
     728:	ec 0e       	add	r14, r28
     72a:	fd 1e       	adc	r15, r29
     72c:	ce 01       	movw	r24, r28
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	b7 01       	movw	r22, r14
     732:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     736:	8e 01       	movw	r16, r28
     738:	0f 5e       	subi	r16, 0xEF	; 239
     73a:	1f 4f       	sbci	r17, 0xFF	; 255
     73c:	ce 01       	movw	r24, r28
     73e:	05 96       	adiw	r24, 0x05	; 5
     740:	b8 01       	movw	r22, r16
     742:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     746:	29 85       	ldd	r18, Y+9	; 0x09
     748:	22 30       	cpi	r18, 0x02	; 2
     74a:	08 f4       	brcc	.+2      	; 0x74e <__divsf3+0x48>
     74c:	7e c0       	rjmp	.+252    	; 0x84a <__divsf3+0x144>
     74e:	39 89       	ldd	r19, Y+17	; 0x11
     750:	32 30       	cpi	r19, 0x02	; 2
     752:	10 f4       	brcc	.+4      	; 0x758 <__divsf3+0x52>
     754:	b8 01       	movw	r22, r16
     756:	7c c0       	rjmp	.+248    	; 0x850 <__divsf3+0x14a>
     758:	8a 85       	ldd	r24, Y+10	; 0x0a
     75a:	9a 89       	ldd	r25, Y+18	; 0x12
     75c:	89 27       	eor	r24, r25
     75e:	8a 87       	std	Y+10, r24	; 0x0a
     760:	24 30       	cpi	r18, 0x04	; 4
     762:	11 f0       	breq	.+4      	; 0x768 <__divsf3+0x62>
     764:	22 30       	cpi	r18, 0x02	; 2
     766:	31 f4       	brne	.+12     	; 0x774 <__divsf3+0x6e>
     768:	23 17       	cp	r18, r19
     76a:	09 f0       	breq	.+2      	; 0x76e <__divsf3+0x68>
     76c:	6e c0       	rjmp	.+220    	; 0x84a <__divsf3+0x144>
     76e:	6f e0       	ldi	r22, 0x0F	; 15
     770:	72 e0       	ldi	r23, 0x02	; 2
     772:	6e c0       	rjmp	.+220    	; 0x850 <__divsf3+0x14a>
     774:	34 30       	cpi	r19, 0x04	; 4
     776:	39 f4       	brne	.+14     	; 0x786 <__divsf3+0x80>
     778:	1d 86       	std	Y+13, r1	; 0x0d
     77a:	1e 86       	std	Y+14, r1	; 0x0e
     77c:	1f 86       	std	Y+15, r1	; 0x0f
     77e:	18 8a       	std	Y+16, r1	; 0x10
     780:	1c 86       	std	Y+12, r1	; 0x0c
     782:	1b 86       	std	Y+11, r1	; 0x0b
     784:	04 c0       	rjmp	.+8      	; 0x78e <__divsf3+0x88>
     786:	32 30       	cpi	r19, 0x02	; 2
     788:	21 f4       	brne	.+8      	; 0x792 <__divsf3+0x8c>
     78a:	84 e0       	ldi	r24, 0x04	; 4
     78c:	89 87       	std	Y+9, r24	; 0x09
     78e:	b7 01       	movw	r22, r14
     790:	5f c0       	rjmp	.+190    	; 0x850 <__divsf3+0x14a>
     792:	2b 85       	ldd	r18, Y+11	; 0x0b
     794:	3c 85       	ldd	r19, Y+12	; 0x0c
     796:	8b 89       	ldd	r24, Y+19	; 0x13
     798:	9c 89       	ldd	r25, Y+20	; 0x14
     79a:	28 1b       	sub	r18, r24
     79c:	39 0b       	sbc	r19, r25
     79e:	3c 87       	std	Y+12, r19	; 0x0c
     7a0:	2b 87       	std	Y+11, r18	; 0x0b
     7a2:	ed 84       	ldd	r14, Y+13	; 0x0d
     7a4:	fe 84       	ldd	r15, Y+14	; 0x0e
     7a6:	0f 85       	ldd	r16, Y+15	; 0x0f
     7a8:	18 89       	ldd	r17, Y+16	; 0x10
     7aa:	ad 88       	ldd	r10, Y+21	; 0x15
     7ac:	be 88       	ldd	r11, Y+22	; 0x16
     7ae:	cf 88       	ldd	r12, Y+23	; 0x17
     7b0:	d8 8c       	ldd	r13, Y+24	; 0x18
     7b2:	ea 14       	cp	r14, r10
     7b4:	fb 04       	cpc	r15, r11
     7b6:	0c 05       	cpc	r16, r12
     7b8:	1d 05       	cpc	r17, r13
     7ba:	40 f4       	brcc	.+16     	; 0x7cc <__divsf3+0xc6>
     7bc:	ee 0c       	add	r14, r14
     7be:	ff 1c       	adc	r15, r15
     7c0:	00 1f       	adc	r16, r16
     7c2:	11 1f       	adc	r17, r17
     7c4:	21 50       	subi	r18, 0x01	; 1
     7c6:	30 40       	sbci	r19, 0x00	; 0
     7c8:	3c 87       	std	Y+12, r19	; 0x0c
     7ca:	2b 87       	std	Y+11, r18	; 0x0b
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e0       	ldi	r26, 0x00	; 0
     7da:	b0 e4       	ldi	r27, 0x40	; 64
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	ea 14       	cp	r14, r10
     7e2:	fb 04       	cpc	r15, r11
     7e4:	0c 05       	cpc	r16, r12
     7e6:	1d 05       	cpc	r17, r13
     7e8:	40 f0       	brcs	.+16     	; 0x7fa <__divsf3+0xf4>
     7ea:	28 2b       	or	r18, r24
     7ec:	39 2b       	or	r19, r25
     7ee:	4a 2b       	or	r20, r26
     7f0:	5b 2b       	or	r21, r27
     7f2:	ea 18       	sub	r14, r10
     7f4:	fb 08       	sbc	r15, r11
     7f6:	0c 09       	sbc	r16, r12
     7f8:	1d 09       	sbc	r17, r13
     7fa:	b6 95       	lsr	r27
     7fc:	a7 95       	ror	r26
     7fe:	97 95       	ror	r25
     800:	87 95       	ror	r24
     802:	ee 0c       	add	r14, r14
     804:	ff 1c       	adc	r15, r15
     806:	00 1f       	adc	r16, r16
     808:	11 1f       	adc	r17, r17
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	6f 31       	cpi	r22, 0x1F	; 31
     810:	71 05       	cpc	r23, r1
     812:	31 f7       	brne	.-52     	; 0x7e0 <__divsf3+0xda>
     814:	da 01       	movw	r26, r20
     816:	c9 01       	movw	r24, r18
     818:	8f 77       	andi	r24, 0x7F	; 127
     81a:	90 70       	andi	r25, 0x00	; 0
     81c:	a0 70       	andi	r26, 0x00	; 0
     81e:	b0 70       	andi	r27, 0x00	; 0
     820:	80 34       	cpi	r24, 0x40	; 64
     822:	91 05       	cpc	r25, r1
     824:	a1 05       	cpc	r26, r1
     826:	b1 05       	cpc	r27, r1
     828:	61 f4       	brne	.+24     	; 0x842 <__divsf3+0x13c>
     82a:	27 fd       	sbrc	r18, 7
     82c:	0a c0       	rjmp	.+20     	; 0x842 <__divsf3+0x13c>
     82e:	e1 14       	cp	r14, r1
     830:	f1 04       	cpc	r15, r1
     832:	01 05       	cpc	r16, r1
     834:	11 05       	cpc	r17, r1
     836:	29 f0       	breq	.+10     	; 0x842 <__divsf3+0x13c>
     838:	20 5c       	subi	r18, 0xC0	; 192
     83a:	3f 4f       	sbci	r19, 0xFF	; 255
     83c:	4f 4f       	sbci	r20, 0xFF	; 255
     83e:	5f 4f       	sbci	r21, 0xFF	; 255
     840:	20 78       	andi	r18, 0x80	; 128
     842:	2d 87       	std	Y+13, r18	; 0x0d
     844:	3e 87       	std	Y+14, r19	; 0x0e
     846:	4f 87       	std	Y+15, r20	; 0x0f
     848:	58 8b       	std	Y+16, r21	; 0x10
     84a:	be 01       	movw	r22, r28
     84c:	67 5f       	subi	r22, 0xF7	; 247
     84e:	7f 4f       	sbci	r23, 0xFF	; 255
     850:	cb 01       	movw	r24, r22
     852:	0e 94 94 06 	call	0xd28	; 0xd28 <__pack_f>
     856:	68 96       	adiw	r28, 0x18	; 24
     858:	ea e0       	ldi	r30, 0x0A	; 10
     85a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x10>

0000085e <__gtsf2>:
     85e:	a8 e1       	ldi	r26, 0x18	; 24
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     86a:	69 83       	std	Y+1, r22	; 0x01
     86c:	7a 83       	std	Y+2, r23	; 0x02
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	2d 83       	std	Y+5, r18	; 0x05
     874:	3e 83       	std	Y+6, r19	; 0x06
     876:	4f 83       	std	Y+7, r20	; 0x07
     878:	58 87       	std	Y+8, r21	; 0x08
     87a:	89 e0       	ldi	r24, 0x09	; 9
     87c:	e8 2e       	mov	r14, r24
     87e:	f1 2c       	mov	r15, r1
     880:	ec 0e       	add	r14, r28
     882:	fd 1e       	adc	r15, r29
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	b7 01       	movw	r22, r14
     88a:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     88e:	8e 01       	movw	r16, r28
     890:	0f 5e       	subi	r16, 0xEF	; 239
     892:	1f 4f       	sbci	r17, 0xFF	; 255
     894:	ce 01       	movw	r24, r28
     896:	05 96       	adiw	r24, 0x05	; 5
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     89e:	89 85       	ldd	r24, Y+9	; 0x09
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	40 f0       	brcs	.+16     	; 0x8b4 <__gtsf2+0x56>
     8a4:	89 89       	ldd	r24, Y+17	; 0x11
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	28 f0       	brcs	.+10     	; 0x8b4 <__gtsf2+0x56>
     8aa:	c7 01       	movw	r24, r14
     8ac:	b8 01       	movw	r22, r16
     8ae:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fpcmp_parts_f>
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <__gtsf2+0x58>
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	68 96       	adiw	r28, 0x18	; 24
     8b8:	e6 e0       	ldi	r30, 0x06	; 6
     8ba:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

000008be <__gesf2>:
     8be:	a8 e1       	ldi	r26, 0x18	; 24
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	e5 e6       	ldi	r30, 0x65	; 101
     8c4:	f4 e0       	ldi	r31, 0x04	; 4
     8c6:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     8ca:	69 83       	std	Y+1, r22	; 0x01
     8cc:	7a 83       	std	Y+2, r23	; 0x02
     8ce:	8b 83       	std	Y+3, r24	; 0x03
     8d0:	9c 83       	std	Y+4, r25	; 0x04
     8d2:	2d 83       	std	Y+5, r18	; 0x05
     8d4:	3e 83       	std	Y+6, r19	; 0x06
     8d6:	4f 83       	std	Y+7, r20	; 0x07
     8d8:	58 87       	std	Y+8, r21	; 0x08
     8da:	89 e0       	ldi	r24, 0x09	; 9
     8dc:	e8 2e       	mov	r14, r24
     8de:	f1 2c       	mov	r15, r1
     8e0:	ec 0e       	add	r14, r28
     8e2:	fd 1e       	adc	r15, r29
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	b7 01       	movw	r22, r14
     8ea:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     8ee:	8e 01       	movw	r16, r28
     8f0:	0f 5e       	subi	r16, 0xEF	; 239
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	ce 01       	movw	r24, r28
     8f6:	05 96       	adiw	r24, 0x05	; 5
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     8fe:	89 85       	ldd	r24, Y+9	; 0x09
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	40 f0       	brcs	.+16     	; 0x914 <__gesf2+0x56>
     904:	89 89       	ldd	r24, Y+17	; 0x11
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	28 f0       	brcs	.+10     	; 0x914 <__gesf2+0x56>
     90a:	c7 01       	movw	r24, r14
     90c:	b8 01       	movw	r22, r16
     90e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fpcmp_parts_f>
     912:	01 c0       	rjmp	.+2      	; 0x916 <__gesf2+0x58>
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	68 96       	adiw	r28, 0x18	; 24
     918:	e6 e0       	ldi	r30, 0x06	; 6
     91a:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

0000091e <__ltsf2>:
     91e:	a8 e1       	ldi	r26, 0x18	; 24
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	e5 e9       	ldi	r30, 0x95	; 149
     924:	f4 e0       	ldi	r31, 0x04	; 4
     926:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     92a:	69 83       	std	Y+1, r22	; 0x01
     92c:	7a 83       	std	Y+2, r23	; 0x02
     92e:	8b 83       	std	Y+3, r24	; 0x03
     930:	9c 83       	std	Y+4, r25	; 0x04
     932:	2d 83       	std	Y+5, r18	; 0x05
     934:	3e 83       	std	Y+6, r19	; 0x06
     936:	4f 83       	std	Y+7, r20	; 0x07
     938:	58 87       	std	Y+8, r21	; 0x08
     93a:	89 e0       	ldi	r24, 0x09	; 9
     93c:	e8 2e       	mov	r14, r24
     93e:	f1 2c       	mov	r15, r1
     940:	ec 0e       	add	r14, r28
     942:	fd 1e       	adc	r15, r29
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	b7 01       	movw	r22, r14
     94a:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     94e:	8e 01       	movw	r16, r28
     950:	0f 5e       	subi	r16, 0xEF	; 239
     952:	1f 4f       	sbci	r17, 0xFF	; 255
     954:	ce 01       	movw	r24, r28
     956:	05 96       	adiw	r24, 0x05	; 5
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     95e:	89 85       	ldd	r24, Y+9	; 0x09
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	40 f0       	brcs	.+16     	; 0x974 <__ltsf2+0x56>
     964:	89 89       	ldd	r24, Y+17	; 0x11
     966:	82 30       	cpi	r24, 0x02	; 2
     968:	28 f0       	brcs	.+10     	; 0x974 <__ltsf2+0x56>
     96a:	c7 01       	movw	r24, r14
     96c:	b8 01       	movw	r22, r16
     96e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fpcmp_parts_f>
     972:	01 c0       	rjmp	.+2      	; 0x976 <__ltsf2+0x58>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	68 96       	adiw	r28, 0x18	; 24
     978:	e6 e0       	ldi	r30, 0x06	; 6
     97a:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

0000097e <__lesf2>:
     97e:	a8 e1       	ldi	r26, 0x18	; 24
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	e5 ec       	ldi	r30, 0xC5	; 197
     984:	f4 e0       	ldi	r31, 0x04	; 4
     986:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     98a:	69 83       	std	Y+1, r22	; 0x01
     98c:	7a 83       	std	Y+2, r23	; 0x02
     98e:	8b 83       	std	Y+3, r24	; 0x03
     990:	9c 83       	std	Y+4, r25	; 0x04
     992:	2d 83       	std	Y+5, r18	; 0x05
     994:	3e 83       	std	Y+6, r19	; 0x06
     996:	4f 83       	std	Y+7, r20	; 0x07
     998:	58 87       	std	Y+8, r21	; 0x08
     99a:	89 e0       	ldi	r24, 0x09	; 9
     99c:	e8 2e       	mov	r14, r24
     99e:	f1 2c       	mov	r15, r1
     9a0:	ec 0e       	add	r14, r28
     9a2:	fd 1e       	adc	r15, r29
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	b7 01       	movw	r22, r14
     9aa:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     9ae:	8e 01       	movw	r16, r28
     9b0:	0f 5e       	subi	r16, 0xEF	; 239
     9b2:	1f 4f       	sbci	r17, 0xFF	; 255
     9b4:	ce 01       	movw	r24, r28
     9b6:	05 96       	adiw	r24, 0x05	; 5
     9b8:	b8 01       	movw	r22, r16
     9ba:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     9be:	89 85       	ldd	r24, Y+9	; 0x09
     9c0:	82 30       	cpi	r24, 0x02	; 2
     9c2:	40 f0       	brcs	.+16     	; 0x9d4 <__lesf2+0x56>
     9c4:	89 89       	ldd	r24, Y+17	; 0x11
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	28 f0       	brcs	.+10     	; 0x9d4 <__lesf2+0x56>
     9ca:	c7 01       	movw	r24, r14
     9cc:	b8 01       	movw	r22, r16
     9ce:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fpcmp_parts_f>
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <__lesf2+0x58>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	68 96       	adiw	r28, 0x18	; 24
     9d8:	e6 e0       	ldi	r30, 0x06	; 6
     9da:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

000009de <__unordsf2>:
     9de:	a8 e1       	ldi	r26, 0x18	; 24
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e5 ef       	ldi	r30, 0xF5	; 245
     9e4:	f4 e0       	ldi	r31, 0x04	; 4
     9e6:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x20>
     9ea:	69 83       	std	Y+1, r22	; 0x01
     9ec:	7a 83       	std	Y+2, r23	; 0x02
     9ee:	8b 83       	std	Y+3, r24	; 0x03
     9f0:	9c 83       	std	Y+4, r25	; 0x04
     9f2:	2d 83       	std	Y+5, r18	; 0x05
     9f4:	3e 83       	std	Y+6, r19	; 0x06
     9f6:	4f 83       	std	Y+7, r20	; 0x07
     9f8:	58 87       	std	Y+8, r21	; 0x08
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	be 01       	movw	r22, r28
     a00:	67 5f       	subi	r22, 0xF7	; 247
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     a08:	ce 01       	movw	r24, r28
     a0a:	05 96       	adiw	r24, 0x05	; 5
     a0c:	be 01       	movw	r22, r28
     a0e:	6f 5e       	subi	r22, 0xEF	; 239
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     a16:	89 85       	ldd	r24, Y+9	; 0x09
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	28 f0       	brcs	.+10     	; 0xa26 <__unordsf2+0x48>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	89 89       	ldd	r24, Y+17	; 0x11
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	10 f4       	brcc	.+4      	; 0xa2a <__unordsf2+0x4c>
     a26:	21 e0       	ldi	r18, 0x01	; 1
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	82 2f       	mov	r24, r18
     a2c:	68 96       	adiw	r28, 0x18	; 24
     a2e:	e2 e0       	ldi	r30, 0x02	; 2
     a30:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x20>

00000a34 <__floatsisf>:
     a34:	a8 e0       	ldi	r26, 0x08	; 8
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	e0 e2       	ldi	r30, 0x20	; 32
     a3a:	f5 e0       	ldi	r31, 0x05	; 5
     a3c:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__+0x12>
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	da 01       	movw	r26, r20
     a4a:	c9 01       	movw	r24, r18
     a4c:	88 27       	eor	r24, r24
     a4e:	b7 fd       	sbrc	r27, 7
     a50:	83 95       	inc	r24
     a52:	99 27       	eor	r25, r25
     a54:	aa 27       	eor	r26, r26
     a56:	bb 27       	eor	r27, r27
     a58:	b8 2e       	mov	r11, r24
     a5a:	21 15       	cp	r18, r1
     a5c:	31 05       	cpc	r19, r1
     a5e:	41 05       	cpc	r20, r1
     a60:	51 05       	cpc	r21, r1
     a62:	19 f4       	brne	.+6      	; 0xa6a <__floatsisf+0x36>
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	89 83       	std	Y+1, r24	; 0x01
     a68:	3a c0       	rjmp	.+116    	; 0xade <__floatsisf+0xaa>
     a6a:	88 23       	and	r24, r24
     a6c:	a9 f0       	breq	.+42     	; 0xa98 <__floatsisf+0x64>
     a6e:	20 30       	cpi	r18, 0x00	; 0
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	38 07       	cpc	r19, r24
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	48 07       	cpc	r20, r24
     a78:	80 e8       	ldi	r24, 0x80	; 128
     a7a:	58 07       	cpc	r21, r24
     a7c:	29 f4       	brne	.+10     	; 0xa88 <__floatsisf+0x54>
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	9f ec       	ldi	r25, 0xCF	; 207
     a86:	30 c0       	rjmp	.+96     	; 0xae8 <__floatsisf+0xb4>
     a88:	ee 24       	eor	r14, r14
     a8a:	ff 24       	eor	r15, r15
     a8c:	87 01       	movw	r16, r14
     a8e:	e2 1a       	sub	r14, r18
     a90:	f3 0a       	sbc	r15, r19
     a92:	04 0b       	sbc	r16, r20
     a94:	15 0b       	sbc	r17, r21
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <__floatsisf+0x68>
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	8e e1       	ldi	r24, 0x1E	; 30
     a9e:	c8 2e       	mov	r12, r24
     aa0:	d1 2c       	mov	r13, r1
     aa2:	dc 82       	std	Y+4, r13	; 0x04
     aa4:	cb 82       	std	Y+3, r12	; 0x03
     aa6:	ed 82       	std	Y+5, r14	; 0x05
     aa8:	fe 82       	std	Y+6, r15	; 0x06
     aaa:	0f 83       	std	Y+7, r16	; 0x07
     aac:	18 87       	std	Y+8, r17	; 0x08
     aae:	c8 01       	movw	r24, r16
     ab0:	b7 01       	movw	r22, r14
     ab2:	0e 94 45 06 	call	0xc8a	; 0xc8a <__clzsi2>
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	18 16       	cp	r1, r24
     aba:	19 06       	cpc	r1, r25
     abc:	84 f4       	brge	.+32     	; 0xade <__floatsisf+0xaa>
     abe:	08 2e       	mov	r0, r24
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatsisf+0x96>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatsisf+0x8e>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	c8 1a       	sub	r12, r24
     ad8:	d9 0a       	sbc	r13, r25
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	ba 82       	std	Y+2, r11	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 94 06 	call	0xd28	; 0xd28 <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	e9 e0       	ldi	r30, 0x09	; 9
     aec:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__+0x12>

00000af0 <__fixsfsi>:
     af0:	ac e0       	ldi	r26, 0x0C	; 12
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	ee e7       	ldi	r30, 0x7E	; 126
     af6:	f5 e0       	ldi	r31, 0x05	; 5
     af8:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x20>
     afc:	69 83       	std	Y+1, r22	; 0x01
     afe:	7a 83       	std	Y+2, r23	; 0x02
     b00:	8b 83       	std	Y+3, r24	; 0x03
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	be 01       	movw	r22, r28
     b0a:	6b 5f       	subi	r22, 0xFB	; 251
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	0e 94 69 07 	call	0xed2	; 0xed2 <__unpack_f>
     b12:	8d 81       	ldd	r24, Y+5	; 0x05
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	61 f1       	breq	.+88     	; 0xb70 <__fixsfsi+0x80>
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	50 f1       	brcs	.+84     	; 0xb70 <__fixsfsi+0x80>
     b1c:	84 30       	cpi	r24, 0x04	; 4
     b1e:	21 f4       	brne	.+8      	; 0xb28 <__fixsfsi+0x38>
     b20:	8e 81       	ldd	r24, Y+6	; 0x06
     b22:	88 23       	and	r24, r24
     b24:	51 f1       	breq	.+84     	; 0xb7a <__fixsfsi+0x8a>
     b26:	2e c0       	rjmp	.+92     	; 0xb84 <__fixsfsi+0x94>
     b28:	2f 81       	ldd	r18, Y+7	; 0x07
     b2a:	38 85       	ldd	r19, Y+8	; 0x08
     b2c:	37 fd       	sbrc	r19, 7
     b2e:	20 c0       	rjmp	.+64     	; 0xb70 <__fixsfsi+0x80>
     b30:	6e 81       	ldd	r22, Y+6	; 0x06
     b32:	2f 31       	cpi	r18, 0x1F	; 31
     b34:	31 05       	cpc	r19, r1
     b36:	1c f0       	brlt	.+6      	; 0xb3e <__fixsfsi+0x4e>
     b38:	66 23       	and	r22, r22
     b3a:	f9 f0       	breq	.+62     	; 0xb7a <__fixsfsi+0x8a>
     b3c:	23 c0       	rjmp	.+70     	; 0xb84 <__fixsfsi+0x94>
     b3e:	8e e1       	ldi	r24, 0x1E	; 30
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	82 1b       	sub	r24, r18
     b44:	93 0b       	sbc	r25, r19
     b46:	29 85       	ldd	r18, Y+9	; 0x09
     b48:	3a 85       	ldd	r19, Y+10	; 0x0a
     b4a:	4b 85       	ldd	r20, Y+11	; 0x0b
     b4c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__fixsfsi+0x68>
     b50:	56 95       	lsr	r21
     b52:	47 95       	ror	r20
     b54:	37 95       	ror	r19
     b56:	27 95       	ror	r18
     b58:	8a 95       	dec	r24
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__fixsfsi+0x60>
     b5c:	66 23       	and	r22, r22
     b5e:	b1 f0       	breq	.+44     	; 0xb8c <__fixsfsi+0x9c>
     b60:	50 95       	com	r21
     b62:	40 95       	com	r20
     b64:	30 95       	com	r19
     b66:	21 95       	neg	r18
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	0e c0       	rjmp	.+28     	; 0xb8c <__fixsfsi+0x9c>
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	09 c0       	rjmp	.+18     	; 0xb8c <__fixsfsi+0x9c>
     b7a:	2f ef       	ldi	r18, 0xFF	; 255
     b7c:	3f ef       	ldi	r19, 0xFF	; 255
     b7e:	4f ef       	ldi	r20, 0xFF	; 255
     b80:	5f e7       	ldi	r21, 0x7F	; 127
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <__fixsfsi+0x9c>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	50 e8       	ldi	r21, 0x80	; 128
     b8c:	b9 01       	movw	r22, r18
     b8e:	ca 01       	movw	r24, r20
     b90:	2c 96       	adiw	r28, 0x0c	; 12
     b92:	e2 e0       	ldi	r30, 0x02	; 2
     b94:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x20>

00000b98 <__floatunsisf>:
     b98:	a8 e0       	ldi	r26, 0x08	; 8
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	e2 ed       	ldi	r30, 0xD2	; 210
     b9e:	f5 e0       	ldi	r31, 0x05	; 5
     ba0:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x10>
     ba4:	7b 01       	movw	r14, r22
     ba6:	8c 01       	movw	r16, r24
     ba8:	61 15       	cp	r22, r1
     baa:	71 05       	cpc	r23, r1
     bac:	81 05       	cpc	r24, r1
     bae:	91 05       	cpc	r25, r1
     bb0:	19 f4       	brne	.+6      	; 0xbb8 <__floatunsisf+0x20>
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	60 c0       	rjmp	.+192    	; 0xc78 <__floatunsisf+0xe0>
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	89 83       	std	Y+1, r24	; 0x01
     bbc:	8e e1       	ldi	r24, 0x1E	; 30
     bbe:	c8 2e       	mov	r12, r24
     bc0:	d1 2c       	mov	r13, r1
     bc2:	dc 82       	std	Y+4, r13	; 0x04
     bc4:	cb 82       	std	Y+3, r12	; 0x03
     bc6:	ed 82       	std	Y+5, r14	; 0x05
     bc8:	fe 82       	std	Y+6, r15	; 0x06
     bca:	0f 83       	std	Y+7, r16	; 0x07
     bcc:	18 87       	std	Y+8, r17	; 0x08
     bce:	c8 01       	movw	r24, r16
     bd0:	b7 01       	movw	r22, r14
     bd2:	0e 94 45 06 	call	0xc8a	; 0xc8a <__clzsi2>
     bd6:	fc 01       	movw	r30, r24
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	f7 ff       	sbrs	r31, 7
     bdc:	3b c0       	rjmp	.+118    	; 0xc54 <__floatunsisf+0xbc>
     bde:	22 27       	eor	r18, r18
     be0:	33 27       	eor	r19, r19
     be2:	2e 1b       	sub	r18, r30
     be4:	3f 0b       	sbc	r19, r31
     be6:	57 01       	movw	r10, r14
     be8:	68 01       	movw	r12, r16
     bea:	02 2e       	mov	r0, r18
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <__floatunsisf+0x5e>
     bee:	d6 94       	lsr	r13
     bf0:	c7 94       	ror	r12
     bf2:	b7 94       	ror	r11
     bf4:	a7 94       	ror	r10
     bf6:	0a 94       	dec	r0
     bf8:	d2 f7       	brpl	.-12     	; 0xbee <__floatunsisf+0x56>
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__floatunsisf+0x7c>
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	aa 1f       	adc	r26, r26
     c12:	bb 1f       	adc	r27, r27
     c14:	2a 95       	dec	r18
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__floatunsisf+0x74>
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	a1 09       	sbc	r26, r1
     c1c:	b1 09       	sbc	r27, r1
     c1e:	8e 21       	and	r24, r14
     c20:	9f 21       	and	r25, r15
     c22:	a0 23       	and	r26, r16
     c24:	b1 23       	and	r27, r17
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	a1 05       	cpc	r26, r1
     c2a:	b1 05       	cpc	r27, r1
     c2c:	21 f0       	breq	.+8      	; 0xc36 <__floatunsisf+0x9e>
     c2e:	41 e0       	ldi	r20, 0x01	; 1
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	4a 29       	or	r20, r10
     c38:	5b 29       	or	r21, r11
     c3a:	6c 29       	or	r22, r12
     c3c:	7d 29       	or	r23, r13
     c3e:	4d 83       	std	Y+5, r20	; 0x05
     c40:	5e 83       	std	Y+6, r21	; 0x06
     c42:	6f 83       	std	Y+7, r22	; 0x07
     c44:	78 87       	std	Y+8, r23	; 0x08
     c46:	8e e1       	ldi	r24, 0x1E	; 30
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	8e 1b       	sub	r24, r30
     c4c:	9f 0b       	sbc	r25, r31
     c4e:	9c 83       	std	Y+4, r25	; 0x04
     c50:	8b 83       	std	Y+3, r24	; 0x03
     c52:	12 c0       	rjmp	.+36     	; 0xc78 <__floatunsisf+0xe0>
     c54:	30 97       	sbiw	r30, 0x00	; 0
     c56:	81 f0       	breq	.+32     	; 0xc78 <__floatunsisf+0xe0>
     c58:	0e 2e       	mov	r0, r30
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <__floatunsisf+0xcc>
     c5c:	ee 0c       	add	r14, r14
     c5e:	ff 1c       	adc	r15, r15
     c60:	00 1f       	adc	r16, r16
     c62:	11 1f       	adc	r17, r17
     c64:	0a 94       	dec	r0
     c66:	d2 f7       	brpl	.-12     	; 0xc5c <__floatunsisf+0xc4>
     c68:	ed 82       	std	Y+5, r14	; 0x05
     c6a:	fe 82       	std	Y+6, r15	; 0x06
     c6c:	0f 83       	std	Y+7, r16	; 0x07
     c6e:	18 87       	std	Y+8, r17	; 0x08
     c70:	ce 1a       	sub	r12, r30
     c72:	df 0a       	sbc	r13, r31
     c74:	dc 82       	std	Y+4, r13	; 0x04
     c76:	cb 82       	std	Y+3, r12	; 0x03
     c78:	1a 82       	std	Y+2, r1	; 0x02
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	0e 94 94 06 	call	0xd28	; 0xd28 <__pack_f>
     c82:	28 96       	adiw	r28, 0x08	; 8
     c84:	ea e0       	ldi	r30, 0x0A	; 10
     c86:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x10>

00000c8a <__clzsi2>:
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	7b 01       	movw	r14, r22
     c94:	8c 01       	movw	r16, r24
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	e8 16       	cp	r14, r24
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	f8 06       	cpc	r15, r24
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	08 07       	cpc	r16, r24
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	18 07       	cpc	r17, r24
     ca6:	88 f4       	brcc	.+34     	; 0xcca <__clzsi2+0x40>
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	e8 16       	cp	r14, r24
     cac:	f1 04       	cpc	r15, r1
     cae:	01 05       	cpc	r16, r1
     cb0:	11 05       	cpc	r17, r1
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <__clzsi2+0x36>
     cb4:	28 f0       	brcs	.+10     	; 0xcc0 <__clzsi2+0x36>
     cb6:	88 e0       	ldi	r24, 0x08	; 8
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	17 c0       	rjmp	.+46     	; 0xcee <__clzsi2+0x64>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	a0 e0       	ldi	r26, 0x00	; 0
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	12 c0       	rjmp	.+36     	; 0xcee <__clzsi2+0x64>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	e8 16       	cp	r14, r24
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	f8 06       	cpc	r15, r24
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	08 07       	cpc	r16, r24
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	18 07       	cpc	r17, r24
     cda:	28 f0       	brcs	.+10     	; 0xce6 <__clzsi2+0x5c>
     cdc:	88 e1       	ldi	r24, 0x18	; 24
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__clzsi2+0x64>
     ce6:	80 e1       	ldi	r24, 0x10	; 16
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	20 e2       	ldi	r18, 0x20	; 32
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	28 1b       	sub	r18, r24
     cf8:	39 0b       	sbc	r19, r25
     cfa:	4a 0b       	sbc	r20, r26
     cfc:	5b 0b       	sbc	r21, r27
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <__clzsi2+0x7e>
     d00:	16 95       	lsr	r17
     d02:	07 95       	ror	r16
     d04:	f7 94       	ror	r15
     d06:	e7 94       	ror	r14
     d08:	8a 95       	dec	r24
     d0a:	d2 f7       	brpl	.-12     	; 0xd00 <__clzsi2+0x76>
     d0c:	f7 01       	movw	r30, r14
     d0e:	e9 5e       	subi	r30, 0xE9	; 233
     d10:	fd 4f       	sbci	r31, 0xFD	; 253
     d12:	80 81       	ld	r24, Z
     d14:	28 1b       	sub	r18, r24
     d16:	31 09       	sbc	r19, r1
     d18:	41 09       	sbc	r20, r1
     d1a:	51 09       	sbc	r21, r1
     d1c:	c9 01       	movw	r24, r18
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	08 95       	ret

00000d28 <__pack_f>:
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	fc 01       	movw	r30, r24
     d34:	e4 80       	ldd	r14, Z+4	; 0x04
     d36:	f5 80       	ldd	r15, Z+5	; 0x05
     d38:	06 81       	ldd	r16, Z+6	; 0x06
     d3a:	17 81       	ldd	r17, Z+7	; 0x07
     d3c:	d1 80       	ldd	r13, Z+1	; 0x01
     d3e:	80 81       	ld	r24, Z
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	48 f4       	brcc	.+18     	; 0xd56 <__pack_f+0x2e>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e1       	ldi	r26, 0x10	; 16
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e8 2a       	or	r14, r24
     d4e:	f9 2a       	or	r15, r25
     d50:	0a 2b       	or	r16, r26
     d52:	1b 2b       	or	r17, r27
     d54:	a5 c0       	rjmp	.+330    	; 0xea0 <__pack_f+0x178>
     d56:	84 30       	cpi	r24, 0x04	; 4
     d58:	09 f4       	brne	.+2      	; 0xd5c <__pack_f+0x34>
     d5a:	9f c0       	rjmp	.+318    	; 0xe9a <__pack_f+0x172>
     d5c:	82 30       	cpi	r24, 0x02	; 2
     d5e:	21 f4       	brne	.+8      	; 0xd68 <__pack_f+0x40>
     d60:	ee 24       	eor	r14, r14
     d62:	ff 24       	eor	r15, r15
     d64:	87 01       	movw	r16, r14
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <__pack_f+0x4a>
     d68:	e1 14       	cp	r14, r1
     d6a:	f1 04       	cpc	r15, r1
     d6c:	01 05       	cpc	r16, r1
     d6e:	11 05       	cpc	r17, r1
     d70:	19 f4       	brne	.+6      	; 0xd78 <__pack_f+0x50>
     d72:	e0 e0       	ldi	r30, 0x00	; 0
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	96 c0       	rjmp	.+300    	; 0xea4 <__pack_f+0x17c>
     d78:	62 81       	ldd	r22, Z+2	; 0x02
     d7a:	73 81       	ldd	r23, Z+3	; 0x03
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	62 38       	cpi	r22, 0x82	; 130
     d80:	79 07       	cpc	r23, r25
     d82:	0c f0       	brlt	.+2      	; 0xd86 <__pack_f+0x5e>
     d84:	5b c0       	rjmp	.+182    	; 0xe3c <__pack_f+0x114>
     d86:	22 e8       	ldi	r18, 0x82	; 130
     d88:	3f ef       	ldi	r19, 0xFF	; 255
     d8a:	26 1b       	sub	r18, r22
     d8c:	37 0b       	sbc	r19, r23
     d8e:	2a 31       	cpi	r18, 0x1A	; 26
     d90:	31 05       	cpc	r19, r1
     d92:	2c f0       	brlt	.+10     	; 0xd9e <__pack_f+0x76>
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	2a c0       	rjmp	.+84     	; 0xdf2 <__pack_f+0xca>
     d9e:	b8 01       	movw	r22, r16
     da0:	a7 01       	movw	r20, r14
     da2:	02 2e       	mov	r0, r18
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__pack_f+0x86>
     da6:	76 95       	lsr	r23
     da8:	67 95       	ror	r22
     daa:	57 95       	ror	r21
     dac:	47 95       	ror	r20
     dae:	0a 94       	dec	r0
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__pack_f+0x7e>
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	a0 e0       	ldi	r26, 0x00	; 0
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <__pack_f+0x9c>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	aa 1f       	adc	r26, r26
     dc2:	bb 1f       	adc	r27, r27
     dc4:	2a 95       	dec	r18
     dc6:	d2 f7       	brpl	.-12     	; 0xdbc <__pack_f+0x94>
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	a1 09       	sbc	r26, r1
     dcc:	b1 09       	sbc	r27, r1
     dce:	8e 21       	and	r24, r14
     dd0:	9f 21       	and	r25, r15
     dd2:	a0 23       	and	r26, r16
     dd4:	b1 23       	and	r27, r17
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	a1 05       	cpc	r26, r1
     dda:	b1 05       	cpc	r27, r1
     ddc:	21 f0       	breq	.+8      	; 0xde6 <__pack_f+0xbe>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	a0 e0       	ldi	r26, 0x00	; 0
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	9a 01       	movw	r18, r20
     de8:	ab 01       	movw	r20, r22
     dea:	28 2b       	or	r18, r24
     dec:	39 2b       	or	r19, r25
     dee:	4a 2b       	or	r20, r26
     df0:	5b 2b       	or	r21, r27
     df2:	da 01       	movw	r26, r20
     df4:	c9 01       	movw	r24, r18
     df6:	8f 77       	andi	r24, 0x7F	; 127
     df8:	90 70       	andi	r25, 0x00	; 0
     dfa:	a0 70       	andi	r26, 0x00	; 0
     dfc:	b0 70       	andi	r27, 0x00	; 0
     dfe:	80 34       	cpi	r24, 0x40	; 64
     e00:	91 05       	cpc	r25, r1
     e02:	a1 05       	cpc	r26, r1
     e04:	b1 05       	cpc	r27, r1
     e06:	39 f4       	brne	.+14     	; 0xe16 <__pack_f+0xee>
     e08:	27 ff       	sbrs	r18, 7
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <__pack_f+0xf6>
     e0c:	20 5c       	subi	r18, 0xC0	; 192
     e0e:	3f 4f       	sbci	r19, 0xFF	; 255
     e10:	4f 4f       	sbci	r20, 0xFF	; 255
     e12:	5f 4f       	sbci	r21, 0xFF	; 255
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <__pack_f+0xf6>
     e16:	21 5c       	subi	r18, 0xC1	; 193
     e18:	3f 4f       	sbci	r19, 0xFF	; 255
     e1a:	4f 4f       	sbci	r20, 0xFF	; 255
     e1c:	5f 4f       	sbci	r21, 0xFF	; 255
     e1e:	e0 e0       	ldi	r30, 0x00	; 0
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	20 30       	cpi	r18, 0x00	; 0
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	3a 07       	cpc	r19, r26
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	4a 07       	cpc	r20, r26
     e2c:	a0 e4       	ldi	r26, 0x40	; 64
     e2e:	5a 07       	cpc	r21, r26
     e30:	10 f0       	brcs	.+4      	; 0xe36 <__pack_f+0x10e>
     e32:	e1 e0       	ldi	r30, 0x01	; 1
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	79 01       	movw	r14, r18
     e38:	8a 01       	movw	r16, r20
     e3a:	27 c0       	rjmp	.+78     	; 0xe8a <__pack_f+0x162>
     e3c:	60 38       	cpi	r22, 0x80	; 128
     e3e:	71 05       	cpc	r23, r1
     e40:	64 f5       	brge	.+88     	; 0xe9a <__pack_f+0x172>
     e42:	fb 01       	movw	r30, r22
     e44:	e1 58       	subi	r30, 0x81	; 129
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	d8 01       	movw	r26, r16
     e4a:	c7 01       	movw	r24, r14
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	90 70       	andi	r25, 0x00	; 0
     e50:	a0 70       	andi	r26, 0x00	; 0
     e52:	b0 70       	andi	r27, 0x00	; 0
     e54:	80 34       	cpi	r24, 0x40	; 64
     e56:	91 05       	cpc	r25, r1
     e58:	a1 05       	cpc	r26, r1
     e5a:	b1 05       	cpc	r27, r1
     e5c:	39 f4       	brne	.+14     	; 0xe6c <__pack_f+0x144>
     e5e:	e7 fe       	sbrs	r14, 7
     e60:	0d c0       	rjmp	.+26     	; 0xe7c <__pack_f+0x154>
     e62:	80 e4       	ldi	r24, 0x40	; 64
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <__pack_f+0x14c>
     e6c:	8f e3       	ldi	r24, 0x3F	; 63
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e8 0e       	add	r14, r24
     e76:	f9 1e       	adc	r15, r25
     e78:	0a 1f       	adc	r16, r26
     e7a:	1b 1f       	adc	r17, r27
     e7c:	17 ff       	sbrs	r17, 7
     e7e:	05 c0       	rjmp	.+10     	; 0xe8a <__pack_f+0x162>
     e80:	16 95       	lsr	r17
     e82:	07 95       	ror	r16
     e84:	f7 94       	ror	r15
     e86:	e7 94       	ror	r14
     e88:	31 96       	adiw	r30, 0x01	; 1
     e8a:	87 e0       	ldi	r24, 0x07	; 7
     e8c:	16 95       	lsr	r17
     e8e:	07 95       	ror	r16
     e90:	f7 94       	ror	r15
     e92:	e7 94       	ror	r14
     e94:	8a 95       	dec	r24
     e96:	d1 f7       	brne	.-12     	; 0xe8c <__pack_f+0x164>
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <__pack_f+0x17c>
     e9a:	ee 24       	eor	r14, r14
     e9c:	ff 24       	eor	r15, r15
     e9e:	87 01       	movw	r16, r14
     ea0:	ef ef       	ldi	r30, 0xFF	; 255
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	6e 2f       	mov	r22, r30
     ea6:	67 95       	ror	r22
     ea8:	66 27       	eor	r22, r22
     eaa:	67 95       	ror	r22
     eac:	90 2f       	mov	r25, r16
     eae:	9f 77       	andi	r25, 0x7F	; 127
     eb0:	d7 94       	ror	r13
     eb2:	dd 24       	eor	r13, r13
     eb4:	d7 94       	ror	r13
     eb6:	8e 2f       	mov	r24, r30
     eb8:	86 95       	lsr	r24
     eba:	49 2f       	mov	r20, r25
     ebc:	46 2b       	or	r20, r22
     ebe:	58 2f       	mov	r21, r24
     ec0:	5d 29       	or	r21, r13
     ec2:	b7 01       	movw	r22, r14
     ec4:	ca 01       	movw	r24, r20
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	df 90       	pop	r13
     ed0:	08 95       	ret

00000ed2 <__unpack_f>:
     ed2:	fc 01       	movw	r30, r24
     ed4:	db 01       	movw	r26, r22
     ed6:	40 81       	ld	r20, Z
     ed8:	51 81       	ldd	r21, Z+1	; 0x01
     eda:	22 81       	ldd	r18, Z+2	; 0x02
     edc:	62 2f       	mov	r22, r18
     ede:	6f 77       	andi	r22, 0x7F	; 127
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	22 1f       	adc	r18, r18
     ee4:	22 27       	eor	r18, r18
     ee6:	22 1f       	adc	r18, r18
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	89 2f       	mov	r24, r25
     eec:	88 0f       	add	r24, r24
     eee:	82 2b       	or	r24, r18
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	99 1f       	adc	r25, r25
     ef6:	99 27       	eor	r25, r25
     ef8:	99 1f       	adc	r25, r25
     efa:	11 96       	adiw	r26, 0x01	; 1
     efc:	9c 93       	st	X, r25
     efe:	11 97       	sbiw	r26, 0x01	; 1
     f00:	21 15       	cp	r18, r1
     f02:	31 05       	cpc	r19, r1
     f04:	a9 f5       	brne	.+106    	; 0xf70 <__unpack_f+0x9e>
     f06:	41 15       	cp	r20, r1
     f08:	51 05       	cpc	r21, r1
     f0a:	61 05       	cpc	r22, r1
     f0c:	71 05       	cpc	r23, r1
     f0e:	11 f4       	brne	.+4      	; 0xf14 <__unpack_f+0x42>
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	37 c0       	rjmp	.+110    	; 0xf82 <__unpack_f+0xb0>
     f14:	82 e8       	ldi	r24, 0x82	; 130
     f16:	9f ef       	ldi	r25, 0xFF	; 255
     f18:	13 96       	adiw	r26, 0x03	; 3
     f1a:	9c 93       	st	X, r25
     f1c:	8e 93       	st	-X, r24
     f1e:	12 97       	sbiw	r26, 0x02	; 2
     f20:	9a 01       	movw	r18, r20
     f22:	ab 01       	movw	r20, r22
     f24:	67 e0       	ldi	r22, 0x07	; 7
     f26:	22 0f       	add	r18, r18
     f28:	33 1f       	adc	r19, r19
     f2a:	44 1f       	adc	r20, r20
     f2c:	55 1f       	adc	r21, r21
     f2e:	6a 95       	dec	r22
     f30:	d1 f7       	brne	.-12     	; 0xf26 <__unpack_f+0x54>
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	8c 93       	st	X, r24
     f36:	0d c0       	rjmp	.+26     	; 0xf52 <__unpack_f+0x80>
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	44 1f       	adc	r20, r20
     f3e:	55 1f       	adc	r21, r21
     f40:	12 96       	adiw	r26, 0x02	; 2
     f42:	8d 91       	ld	r24, X+
     f44:	9c 91       	ld	r25, X
     f46:	13 97       	sbiw	r26, 0x03	; 3
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	13 96       	adiw	r26, 0x03	; 3
     f4c:	9c 93       	st	X, r25
     f4e:	8e 93       	st	-X, r24
     f50:	12 97       	sbiw	r26, 0x02	; 2
     f52:	20 30       	cpi	r18, 0x00	; 0
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	38 07       	cpc	r19, r24
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	48 07       	cpc	r20, r24
     f5c:	80 e4       	ldi	r24, 0x40	; 64
     f5e:	58 07       	cpc	r21, r24
     f60:	58 f3       	brcs	.-42     	; 0xf38 <__unpack_f+0x66>
     f62:	14 96       	adiw	r26, 0x04	; 4
     f64:	2d 93       	st	X+, r18
     f66:	3d 93       	st	X+, r19
     f68:	4d 93       	st	X+, r20
     f6a:	5c 93       	st	X, r21
     f6c:	17 97       	sbiw	r26, 0x07	; 7
     f6e:	08 95       	ret
     f70:	2f 3f       	cpi	r18, 0xFF	; 255
     f72:	31 05       	cpc	r19, r1
     f74:	79 f4       	brne	.+30     	; 0xf94 <__unpack_f+0xc2>
     f76:	41 15       	cp	r20, r1
     f78:	51 05       	cpc	r21, r1
     f7a:	61 05       	cpc	r22, r1
     f7c:	71 05       	cpc	r23, r1
     f7e:	19 f4       	brne	.+6      	; 0xf86 <__unpack_f+0xb4>
     f80:	84 e0       	ldi	r24, 0x04	; 4
     f82:	8c 93       	st	X, r24
     f84:	08 95       	ret
     f86:	64 ff       	sbrs	r22, 4
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <__unpack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	8c 93       	st	X, r24
     f8e:	12 c0       	rjmp	.+36     	; 0xfb4 <__unpack_f+0xe2>
     f90:	1c 92       	st	X, r1
     f92:	10 c0       	rjmp	.+32     	; 0xfb4 <__unpack_f+0xe2>
     f94:	2f 57       	subi	r18, 0x7F	; 127
     f96:	30 40       	sbci	r19, 0x00	; 0
     f98:	13 96       	adiw	r26, 0x03	; 3
     f9a:	3c 93       	st	X, r19
     f9c:	2e 93       	st	-X, r18
     f9e:	12 97       	sbiw	r26, 0x02	; 2
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	8c 93       	st	X, r24
     fa4:	87 e0       	ldi	r24, 0x07	; 7
     fa6:	44 0f       	add	r20, r20
     fa8:	55 1f       	adc	r21, r21
     faa:	66 1f       	adc	r22, r22
     fac:	77 1f       	adc	r23, r23
     fae:	8a 95       	dec	r24
     fb0:	d1 f7       	brne	.-12     	; 0xfa6 <__unpack_f+0xd4>
     fb2:	70 64       	ori	r23, 0x40	; 64
     fb4:	14 96       	adiw	r26, 0x04	; 4
     fb6:	4d 93       	st	X+, r20
     fb8:	5d 93       	st	X+, r21
     fba:	6d 93       	st	X+, r22
     fbc:	7c 93       	st	X, r23
     fbe:	17 97       	sbiw	r26, 0x07	; 7
     fc0:	08 95       	ret

00000fc2 <__fpcmp_parts_f>:
     fc2:	1f 93       	push	r17
     fc4:	dc 01       	movw	r26, r24
     fc6:	fb 01       	movw	r30, r22
     fc8:	9c 91       	ld	r25, X
     fca:	92 30       	cpi	r25, 0x02	; 2
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <__fpcmp_parts_f+0xe>
     fce:	47 c0       	rjmp	.+142    	; 0x105e <__fpcmp_parts_f+0x9c>
     fd0:	80 81       	ld	r24, Z
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <__fpcmp_parts_f+0x16>
     fd6:	43 c0       	rjmp	.+134    	; 0x105e <__fpcmp_parts_f+0x9c>
     fd8:	94 30       	cpi	r25, 0x04	; 4
     fda:	51 f4       	brne	.+20     	; 0xff0 <__fpcmp_parts_f+0x2e>
     fdc:	11 96       	adiw	r26, 0x01	; 1
     fde:	1c 91       	ld	r17, X
     fe0:	84 30       	cpi	r24, 0x04	; 4
     fe2:	99 f5       	brne	.+102    	; 0x104a <__fpcmp_parts_f+0x88>
     fe4:	81 81       	ldd	r24, Z+1	; 0x01
     fe6:	68 2f       	mov	r22, r24
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	61 1b       	sub	r22, r17
     fec:	71 09       	sbc	r23, r1
     fee:	3f c0       	rjmp	.+126    	; 0x106e <__fpcmp_parts_f+0xac>
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	21 f0       	breq	.+8      	; 0xffc <__fpcmp_parts_f+0x3a>
     ff4:	92 30       	cpi	r25, 0x02	; 2
     ff6:	31 f4       	brne	.+12     	; 0x1004 <__fpcmp_parts_f+0x42>
     ff8:	82 30       	cpi	r24, 0x02	; 2
     ffa:	b9 f1       	breq	.+110    	; 0x106a <__fpcmp_parts_f+0xa8>
     ffc:	81 81       	ldd	r24, Z+1	; 0x01
     ffe:	88 23       	and	r24, r24
    1000:	89 f1       	breq	.+98     	; 0x1064 <__fpcmp_parts_f+0xa2>
    1002:	2d c0       	rjmp	.+90     	; 0x105e <__fpcmp_parts_f+0x9c>
    1004:	11 96       	adiw	r26, 0x01	; 1
    1006:	1c 91       	ld	r17, X
    1008:	11 97       	sbiw	r26, 0x01	; 1
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	f1 f0       	breq	.+60     	; 0x104a <__fpcmp_parts_f+0x88>
    100e:	81 81       	ldd	r24, Z+1	; 0x01
    1010:	18 17       	cp	r17, r24
    1012:	d9 f4       	brne	.+54     	; 0x104a <__fpcmp_parts_f+0x88>
    1014:	12 96       	adiw	r26, 0x02	; 2
    1016:	2d 91       	ld	r18, X+
    1018:	3c 91       	ld	r19, X
    101a:	13 97       	sbiw	r26, 0x03	; 3
    101c:	82 81       	ldd	r24, Z+2	; 0x02
    101e:	93 81       	ldd	r25, Z+3	; 0x03
    1020:	82 17       	cp	r24, r18
    1022:	93 07       	cpc	r25, r19
    1024:	94 f0       	brlt	.+36     	; 0x104a <__fpcmp_parts_f+0x88>
    1026:	28 17       	cp	r18, r24
    1028:	39 07       	cpc	r19, r25
    102a:	bc f0       	brlt	.+46     	; 0x105a <__fpcmp_parts_f+0x98>
    102c:	14 96       	adiw	r26, 0x04	; 4
    102e:	8d 91       	ld	r24, X+
    1030:	9d 91       	ld	r25, X+
    1032:	0d 90       	ld	r0, X+
    1034:	bc 91       	ld	r27, X
    1036:	a0 2d       	mov	r26, r0
    1038:	24 81       	ldd	r18, Z+4	; 0x04
    103a:	35 81       	ldd	r19, Z+5	; 0x05
    103c:	46 81       	ldd	r20, Z+6	; 0x06
    103e:	57 81       	ldd	r21, Z+7	; 0x07
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	4a 07       	cpc	r20, r26
    1046:	5b 07       	cpc	r21, r27
    1048:	18 f4       	brcc	.+6      	; 0x1050 <__fpcmp_parts_f+0x8e>
    104a:	11 23       	and	r17, r17
    104c:	41 f0       	breq	.+16     	; 0x105e <__fpcmp_parts_f+0x9c>
    104e:	0a c0       	rjmp	.+20     	; 0x1064 <__fpcmp_parts_f+0xa2>
    1050:	82 17       	cp	r24, r18
    1052:	93 07       	cpc	r25, r19
    1054:	a4 07       	cpc	r26, r20
    1056:	b5 07       	cpc	r27, r21
    1058:	40 f4       	brcc	.+16     	; 0x106a <__fpcmp_parts_f+0xa8>
    105a:	11 23       	and	r17, r17
    105c:	19 f0       	breq	.+6      	; 0x1064 <__fpcmp_parts_f+0xa2>
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	05 c0       	rjmp	.+10     	; 0x106e <__fpcmp_parts_f+0xac>
    1064:	6f ef       	ldi	r22, 0xFF	; 255
    1066:	7f ef       	ldi	r23, 0xFF	; 255
    1068:	02 c0       	rjmp	.+4      	; 0x106e <__fpcmp_parts_f+0xac>
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	cb 01       	movw	r24, r22
    1070:	1f 91       	pop	r17
    1072:	08 95       	ret

00001074 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1074:	1f 92       	push	r1
    1076:	0f 92       	push	r0
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	0f 92       	push	r0
    107c:	11 24       	eor	r1, r1
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	8f 93       	push	r24
    1084:	9f 93       	push	r25
    1086:	af 93       	push	r26
    1088:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    108a:	80 91 3c 03 	lds	r24, 0x033C
    108e:	90 91 3d 03 	lds	r25, 0x033D
    1092:	a0 91 3e 03 	lds	r26, 0x033E
    1096:	b0 91 3f 03 	lds	r27, 0x033F
	unsigned char f = timer0_fract;
    109a:	30 91 40 03 	lds	r19, 0x0340

	m += MILLIS_INC;
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	a1 1d       	adc	r26, r1
    10a2:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    10a4:	23 2f       	mov	r18, r19
    10a6:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    10a8:	2d 37       	cpi	r18, 0x7D	; 125
    10aa:	20 f0       	brcs	.+8      	; 0x10b4 <__vector_23+0x40>
		f -= FRACT_MAX;
    10ac:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	a1 1d       	adc	r26, r1
    10b2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    10b4:	20 93 40 03 	sts	0x0340, r18
	timer0_millis = m;
    10b8:	80 93 3c 03 	sts	0x033C, r24
    10bc:	90 93 3d 03 	sts	0x033D, r25
    10c0:	a0 93 3e 03 	sts	0x033E, r26
    10c4:	b0 93 3f 03 	sts	0x033F, r27
	timer0_overflow_count++;
    10c8:	80 91 38 03 	lds	r24, 0x0338
    10cc:	90 91 39 03 	lds	r25, 0x0339
    10d0:	a0 91 3a 03 	lds	r26, 0x033A
    10d4:	b0 91 3b 03 	lds	r27, 0x033B
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	a1 1d       	adc	r26, r1
    10dc:	b1 1d       	adc	r27, r1
    10de:	80 93 38 03 	sts	0x0338, r24
    10e2:	90 93 39 03 	sts	0x0339, r25
    10e6:	a0 93 3a 03 	sts	0x033A, r26
    10ea:	b0 93 3b 03 	sts	0x033B, r27
}
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti

00001104 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1104:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1106:	f8 94       	cli
	m = timer0_millis;
    1108:	20 91 3c 03 	lds	r18, 0x033C
    110c:	30 91 3d 03 	lds	r19, 0x033D
    1110:	40 91 3e 03 	lds	r20, 0x033E
    1114:	50 91 3f 03 	lds	r21, 0x033F
	SREG = oldSREG;
    1118:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    111a:	b9 01       	movw	r22, r18
    111c:	ca 01       	movw	r24, r20
    111e:	08 95       	ret

00001120 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1120:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    1122:	f8 94       	cli
	m = timer0_overflow_count;
    1124:	20 91 38 03 	lds	r18, 0x0338
    1128:	30 91 39 03 	lds	r19, 0x0339
    112c:	40 91 3a 03 	lds	r20, 0x033A
    1130:	50 91 3b 03 	lds	r21, 0x033B
#if defined(TCNT0)
	t = TCNT0;
    1134:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1136:	a8 9b       	sbis	0x15, 0	; 21
    1138:	06 c0       	rjmp	.+12     	; 0x1146 <micros+0x26>
    113a:	8f 3f       	cpi	r24, 0xFF	; 255
    113c:	21 f0       	breq	.+8      	; 0x1146 <micros+0x26>
		m++;
    113e:	2f 5f       	subi	r18, 0xFF	; 255
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	4f 4f       	sbci	r20, 0xFF	; 255
    1144:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1146:	9f bf       	out	0x3f, r25	; 63
    1148:	54 2f       	mov	r21, r20
    114a:	43 2f       	mov	r20, r19
    114c:	32 2f       	mov	r19, r18
    114e:	22 27       	eor	r18, r18
    1150:	28 0f       	add	r18, r24
    1152:	31 1d       	adc	r19, r1
    1154:	41 1d       	adc	r20, r1
    1156:	51 1d       	adc	r21, r1
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	44 1f       	adc	r20, r20
    1160:	55 1f       	adc	r21, r21
    1162:	8a 95       	dec	r24
    1164:	d1 f7       	brne	.-12     	; 0x115a <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    1166:	b9 01       	movw	r22, r18
    1168:	ca 01       	movw	r24, r20
    116a:	08 95       	ret

0000116c <delay>:

void delay(unsigned long ms)
{
    116c:	9b 01       	movw	r18, r22
    116e:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1170:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    1172:	f8 94       	cli
	m = timer0_overflow_count;
    1174:	80 91 38 03 	lds	r24, 0x0338
    1178:	90 91 39 03 	lds	r25, 0x0339
    117c:	a0 91 3a 03 	lds	r26, 0x033A
    1180:	b0 91 3b 03 	lds	r27, 0x033B
#if defined(TCNT0)
	t = TCNT0;
    1184:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1186:	a8 9b       	sbis	0x15, 0	; 21
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <delay+0x28>
    118a:	6f 3f       	cpi	r22, 0xFF	; 255
    118c:	19 f0       	breq	.+6      	; 0x1194 <delay+0x28>
		m++;
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	a1 1d       	adc	r26, r1
    1192:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1194:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    1196:	ba 2f       	mov	r27, r26
    1198:	a9 2f       	mov	r26, r25
    119a:	98 2f       	mov	r25, r24
    119c:	88 27       	eor	r24, r24
    119e:	86 0f       	add	r24, r22
    11a0:	91 1d       	adc	r25, r1
    11a2:	a1 1d       	adc	r26, r1
    11a4:	b1 1d       	adc	r27, r1
    11a6:	62 e0       	ldi	r22, 0x02	; 2
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	aa 1f       	adc	r26, r26
    11ae:	bb 1f       	adc	r27, r27
    11b0:	6a 95       	dec	r22
    11b2:	d1 f7       	brne	.-12     	; 0x11a8 <delay+0x3c>
    11b4:	bc 01       	movw	r22, r24
    11b6:	2d c0       	rjmp	.+90     	; 0x1212 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    11b8:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    11ba:	f8 94       	cli
	m = timer0_overflow_count;
    11bc:	80 91 38 03 	lds	r24, 0x0338
    11c0:	90 91 39 03 	lds	r25, 0x0339
    11c4:	a0 91 3a 03 	lds	r26, 0x033A
    11c8:	b0 91 3b 03 	lds	r27, 0x033B
#if defined(TCNT0)
	t = TCNT0;
    11cc:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    11ce:	a8 9b       	sbis	0x15, 0	; 21
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <delay+0x70>
    11d2:	ef 3f       	cpi	r30, 0xFF	; 255
    11d4:	19 f0       	breq	.+6      	; 0x11dc <delay+0x70>
		m++;
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	a1 1d       	adc	r26, r1
    11da:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    11dc:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    11de:	ba 2f       	mov	r27, r26
    11e0:	a9 2f       	mov	r26, r25
    11e2:	98 2f       	mov	r25, r24
    11e4:	88 27       	eor	r24, r24
    11e6:	8e 0f       	add	r24, r30
    11e8:	91 1d       	adc	r25, r1
    11ea:	a1 1d       	adc	r26, r1
    11ec:	b1 1d       	adc	r27, r1
    11ee:	e2 e0       	ldi	r30, 0x02	; 2
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	aa 1f       	adc	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	ea 95       	dec	r30
    11fa:	d1 f7       	brne	.-12     	; 0x11f0 <delay+0x84>
    11fc:	86 1b       	sub	r24, r22
    11fe:	97 0b       	sbc	r25, r23
    1200:	88 5e       	subi	r24, 0xE8	; 232
    1202:	93 40       	sbci	r25, 0x03	; 3
    1204:	c8 f2       	brcs	.-78     	; 0x11b8 <delay+0x4c>
			ms--;
    1206:	21 50       	subi	r18, 0x01	; 1
    1208:	30 40       	sbci	r19, 0x00	; 0
    120a:	40 40       	sbci	r20, 0x00	; 0
    120c:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    120e:	68 51       	subi	r22, 0x18	; 24
    1210:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1212:	21 15       	cp	r18, r1
    1214:	31 05       	cpc	r19, r1
    1216:	41 05       	cpc	r20, r1
    1218:	51 05       	cpc	r21, r1
    121a:	71 f6       	brne	.-100    	; 0x11b8 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    121c:	08 95       	ret

0000121e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	39 f0       	breq	.+14     	; 0x1230 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    122a:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <delayMicroseconds+0xe>
    1230:	08 95       	ret

00001232 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1232:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1234:	84 b5       	in	r24, 0x24	; 36
    1236:	82 60       	ori	r24, 0x02	; 2
    1238:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    123a:	84 b5       	in	r24, 0x24	; 36
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1240:	85 b5       	in	r24, 0x25	; 37
    1242:	82 60       	ori	r24, 0x02	; 2
    1244:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1246:	85 b5       	in	r24, 0x25	; 37
    1248:	81 60       	ori	r24, 0x01	; 1
    124a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    124c:	ee e6       	ldi	r30, 0x6E	; 110
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1256:	e1 e8       	ldi	r30, 0x81	; 129
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    125c:	80 81       	ld	r24, Z
    125e:	82 60       	ori	r24, 0x02	; 2
    1260:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1262:	80 81       	ld	r24, Z
    1264:	81 60       	ori	r24, 0x01	; 1
    1266:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1268:	e0 e8       	ldi	r30, 0x80	; 128
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	81 60       	ori	r24, 0x01	; 1
    1270:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1272:	e1 eb       	ldi	r30, 0xB1	; 177
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	84 60       	ori	r24, 0x04	; 4
    127a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    127c:	e0 eb       	ldi	r30, 0xB0	; 176
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1286:	e1 e9       	ldi	r30, 0x91	; 145
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	82 60       	ori	r24, 0x02	; 2
    128e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1290:	80 81       	ld	r24, Z
    1292:	81 60       	ori	r24, 0x01	; 1
    1294:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1296:	e0 e9       	ldi	r30, 0x90	; 144
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	81 60       	ori	r24, 0x01	; 1
    129e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    12a0:	e1 ea       	ldi	r30, 0xA1	; 161
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	82 60       	ori	r24, 0x02	; 2
    12a8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    12aa:	80 81       	ld	r24, Z
    12ac:	81 60       	ori	r24, 0x01	; 1
    12ae:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    12b0:	e0 ea       	ldi	r30, 0xA0	; 160
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	81 60       	ori	r24, 0x01	; 1
    12b8:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    12ba:	e1 e2       	ldi	r30, 0x21	; 33
    12bc:	f1 e0       	ldi	r31, 0x01	; 1
    12be:	80 81       	ld	r24, Z
    12c0:	82 60       	ori	r24, 0x02	; 2
    12c2:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    12c4:	80 81       	ld	r24, Z
    12c6:	81 60       	ori	r24, 0x01	; 1
    12c8:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    12ca:	e0 e2       	ldi	r30, 0x20	; 32
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
    12ce:	80 81       	ld	r24, Z
    12d0:	81 60       	ori	r24, 0x01	; 1
    12d2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    12d4:	ea e7       	ldi	r30, 0x7A	; 122
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	84 60       	ori	r24, 0x04	; 4
    12dc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    12de:	80 81       	ld	r24, Z
    12e0:	82 60       	ori	r24, 0x02	; 2
    12e2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    12e4:	80 81       	ld	r24, Z
    12e6:	81 60       	ori	r24, 0x01	; 1
    12e8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    12ea:	80 81       	ld	r24, Z
    12ec:	80 68       	ori	r24, 0x80	; 128
    12ee:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    12f0:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    12f4:	08 95       	ret

000012f6 <_ZN9IPAddressC2Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    12f6:	0f 93       	push	r16
    12f8:	fc 01       	movw	r30, r24
    12fa:	81 e2       	ldi	r24, 0x21	; 33
    12fc:	93 e0       	ldi	r25, 0x03	; 3
    12fe:	91 83       	std	Z+1, r25	; 0x01
    1300:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    1302:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    1304:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    1306:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    1308:	05 83       	std	Z+5, r16	; 0x05
}
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    130e:	0f 93       	push	r16
    1310:	fc 01       	movw	r30, r24
    1312:	81 e2       	ldi	r24, 0x21	; 33
    1314:	93 e0       	ldi	r25, 0x03	; 3
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    131a:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    131c:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    131e:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    1320:	05 83       	std	Z+5, r16	; 0x05
}
    1322:	0f 91       	pop	r16
    1324:	08 95       	ret

00001326 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    1326:	81 e2       	ldi	r24, 0x21	; 33
    1328:	93 e0       	ldi	r25, 0x03	; 3
    132a:	90 93 42 03 	sts	0x0342, r25
    132e:	80 93 41 03 	sts	0x0341, r24
{
    _address[0] = first_octet;
    1332:	10 92 43 03 	sts	0x0343, r1
    _address[1] = second_octet;
    1336:	10 92 44 03 	sts	0x0344, r1
    _address[2] = third_octet;
    133a:	10 92 45 03 	sts	0x0345, r1
    _address[3] = fourth_octet;
    133e:	10 92 46 03 	sts	0x0346, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    1342:	08 95       	ret

00001344 <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    1344:	8f 92       	push	r8
    1346:	9f 92       	push	r9
    1348:	af 92       	push	r10
    134a:	bf 92       	push	r11
    134c:	cf 92       	push	r12
    134e:	df 92       	push	r13
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	4c 01       	movw	r8, r24
    135e:	6b 01       	movw	r12, r22
    1360:	7c 01       	movw	r14, r24
    1362:	aa 24       	eor	r10, r10
    1364:	bb 24       	eor	r11, r11
    1366:	c0 e0       	ldi	r28, 0x00	; 0
    1368:	d0 e0       	ldi	r29, 0x00	; 0
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    136a:	c6 01       	movw	r24, r12
    136c:	f7 01       	movw	r30, r14
    136e:	62 81       	ldd	r22, Z+2	; 0x02
    1370:	4a e0       	ldi	r20, 0x0A	; 10
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	0e 94 0b 0c 	call	0x1816	; 0x1816 <_ZN5Print5printEhi>
    1378:	8c 01       	movw	r16, r24
        n += p.print('.');
    137a:	c6 01       	movw	r24, r12
    137c:	6e e2       	ldi	r22, 0x2E	; 46
    137e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    1382:	08 0f       	add	r16, r24
    1384:	19 1f       	adc	r17, r25
        n += p.print('.');
    1386:	a0 0e       	add	r10, r16
    1388:	b1 1e       	adc	r11, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    138a:	21 96       	adiw	r28, 0x01	; 1
    138c:	08 94       	sec
    138e:	e1 1c       	adc	r14, r1
    1390:	f1 1c       	adc	r15, r1
    1392:	c3 30       	cpi	r28, 0x03	; 3
    1394:	d1 05       	cpc	r29, r1
    1396:	49 f7       	brne	.-46     	; 0x136a <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    1398:	c6 01       	movw	r24, r12
    139a:	f4 01       	movw	r30, r8
    139c:	65 81       	ldd	r22, Z+5	; 0x05
    139e:	4a e0       	ldi	r20, 0x0A	; 10
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	0e 94 0b 0c 	call	0x1816	; 0x1816 <_ZN5Print5printEhi>
    13a6:	95 01       	movw	r18, r10
    13a8:	28 0f       	add	r18, r24
    13aa:	39 1f       	adc	r19, r25
    return n;
}
    13ac:	c9 01       	movw	r24, r18
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	bf 90       	pop	r11
    13c0:	af 90       	pop	r10
    13c2:	9f 90       	pop	r9
    13c4:	8f 90       	pop	r8
    13c6:	08 95       	ret

000013c8 <_ZN9IPAddresseqEPKh>:
    return *this;
}

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
    13c8:	9c 01       	movw	r18, r24
    13ca:	2e 5f       	subi	r18, 0xFE	; 254
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	cb 01       	movw	r24, r22
    13d0:	b9 01       	movw	r22, r18
    13d2:	44 e0       	ldi	r20, 0x04	; 4
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	0e 94 4b 1a 	call	0x3496	; 0x3496 <memcmp>
    13da:	9c 01       	movw	r18, r24
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	23 2b       	or	r18, r19
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <_ZN9IPAddresseqEPKh+0x1c>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
}
    13e4:	08 95       	ret

000013e6 <_ZN9IPAddressaSEm>:
{
    memcpy(_address, address, sizeof(_address));
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t address)
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <_ZN9IPAddressaSEm+0x6>
    13ec:	0f 92       	push	r0
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	fc 01       	movw	r30, r24
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    13f4:	42 83       	std	Z+2, r20	; 0x02
    13f6:	53 83       	std	Z+3, r21	; 0x03
    13f8:	64 83       	std	Z+4, r22	; 0x04
    13fa:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <_ZN9IPAddressaSEPKh>:
IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
}

IPAddress& IPAddress::operator=(const uint8_t *address)
    140a:	9c 01       	movw	r18, r24
    140c:	fb 01       	movw	r30, r22
{
    memcpy(_address, address, sizeof(_address));
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	a2 81       	ldd	r26, Z+2	; 0x02
    1414:	b3 81       	ldd	r27, Z+3	; 0x03
    1416:	f9 01       	movw	r30, r18
    1418:	82 83       	std	Z+2, r24	; 0x02
    141a:	93 83       	std	Z+3, r25	; 0x03
    141c:	a4 83       	std	Z+4, r26	; 0x04
    141e:	b5 83       	std	Z+5, r27	; 0x05
    return *this;
}
    1420:	c9 01       	movw	r24, r18
    1422:	08 95       	ret

00001424 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
    1424:	9c 01       	movw	r18, r24
    1426:	fb 01       	movw	r30, r22
    1428:	81 e2       	ldi	r24, 0x21	; 33
    142a:	93 e0       	ldi	r25, 0x03	; 3
    142c:	d9 01       	movw	r26, r18
    142e:	8d 93       	st	X+, r24
    1430:	9c 93       	st	X, r25
{
    memcpy(_address, address, sizeof(_address));
    1432:	80 81       	ld	r24, Z
    1434:	91 81       	ldd	r25, Z+1	; 0x01
    1436:	a2 81       	ldd	r26, Z+2	; 0x02
    1438:	b3 81       	ldd	r27, Z+3	; 0x03
    143a:	f9 01       	movw	r30, r18
    143c:	82 83       	std	Z+2, r24	; 0x02
    143e:	93 83       	std	Z+3, r25	; 0x03
    1440:	a4 83       	std	Z+4, r26	; 0x04
    1442:	b5 83       	std	Z+5, r27	; 0x05
}
    1444:	08 95       	ret

00001446 <_ZN9IPAddressC2EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
    1446:	9c 01       	movw	r18, r24
    1448:	fb 01       	movw	r30, r22
    144a:	81 e2       	ldi	r24, 0x21	; 33
    144c:	93 e0       	ldi	r25, 0x03	; 3
    144e:	d9 01       	movw	r26, r18
    1450:	8d 93       	st	X+, r24
    1452:	9c 93       	st	X, r25
{
    memcpy(_address, address, sizeof(_address));
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	a2 81       	ldd	r26, Z+2	; 0x02
    145a:	b3 81       	ldd	r27, Z+3	; 0x03
    145c:	f9 01       	movw	r30, r18
    145e:	82 83       	std	Z+2, r24	; 0x02
    1460:	93 83       	std	Z+3, r25	; 0x03
    1462:	a4 83       	std	Z+4, r26	; 0x04
    1464:	b5 83       	std	Z+5, r27	; 0x05
}
    1466:	08 95       	ret

00001468 <_ZN9IPAddressC1Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <_ZN9IPAddressC1Em+0x6>
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	fc 01       	movw	r30, r24
    1476:	81 e2       	ldi	r24, 0x21	; 33
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    147e:	42 83       	std	Z+2, r20	; 0x02
    1480:	53 83       	std	Z+3, r21	; 0x03
    1482:	64 83       	std	Z+4, r22	; 0x04
    1484:	75 83       	std	Z+5, r23	; 0x05
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <_ZN9IPAddressC2Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <_ZN9IPAddressC2Em+0x6>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	fc 01       	movw	r30, r24
    14a2:	81 e2       	ldi	r24, 0x21	; 33
    14a4:	93 e0       	ldi	r25, 0x03	; 3
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    14aa:	42 83       	std	Z+2, r20	; 0x02
    14ac:	53 83       	std	Z+3, r21	; 0x03
    14ae:	64 83       	std	Z+4, r22	; 0x04
    14b0:	75 83       	std	Z+5, r23	; 0x05
}
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    14c0:	fc 01       	movw	r30, r24
    14c2:	81 e2       	ldi	r24, 0x21	; 33
    14c4:	93 e0       	ldi	r25, 0x03	; 3
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    14ca:	12 82       	std	Z+2, r1	; 0x02
    14cc:	13 82       	std	Z+3, r1	; 0x03
    14ce:	14 82       	std	Z+4, r1	; 0x04
    14d0:	15 82       	std	Z+5, r1	; 0x05
}
    14d2:	08 95       	ret

000014d4 <_ZN9IPAddressC2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    14d4:	fc 01       	movw	r30, r24
    14d6:	81 e2       	ldi	r24, 0x21	; 33
    14d8:	93 e0       	ldi	r25, 0x03	; 3
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    14de:	12 82       	std	Z+2, r1	; 0x02
    14e0:	13 82       	std	Z+3, r1	; 0x03
    14e2:	14 82       	std	Z+4, r1	; 0x04
    14e4:	15 82       	std	Z+5, r1	; 0x05
}
    14e6:	08 95       	ret

000014e8 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    14e8:	cf 92       	push	r12
    14ea:	df 92       	push	r13
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	7c 01       	movw	r14, r24
    14fa:	6b 01       	movw	r12, r22
    14fc:	8a 01       	movw	r16, r20
    14fe:	c0 e0       	ldi	r28, 0x00	; 0
    1500:	d0 e0       	ldi	r29, 0x00	; 0
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1504:	d6 01       	movw	r26, r12
    1506:	6d 91       	ld	r22, X+
    1508:	6d 01       	movw	r12, r26
    150a:	d7 01       	movw	r26, r14
    150c:	ed 91       	ld	r30, X+
    150e:	fc 91       	ld	r31, X
    1510:	01 90       	ld	r0, Z+
    1512:	f0 81       	ld	r31, Z
    1514:	e0 2d       	mov	r30, r0
    1516:	c7 01       	movw	r24, r14
    1518:	19 95       	eicall
    151a:	c8 0f       	add	r28, r24
    151c:	d9 1f       	adc	r29, r25
    151e:	01 50       	subi	r16, 0x01	; 1
    1520:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1522:	01 15       	cp	r16, r1
    1524:	11 05       	cpc	r17, r1
    1526:	71 f7       	brne	.-36     	; 0x1504 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1528:	ce 01       	movw	r24, r28
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	08 95       	ret

0000153c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    154a:	8b 01       	movw	r16, r22
    154c:	c0 e0       	ldi	r28, 0x00	; 0
    154e:	d0 e0       	ldi	r29, 0x00	; 0
    1550:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    1552:	0f 5f       	subi	r16, 0xFF	; 255
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    1558:	66 23       	and	r22, r22
    155a:	59 f0       	breq	.+22     	; 0x1572 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    155c:	d7 01       	movw	r26, r14
    155e:	ed 91       	ld	r30, X+
    1560:	fc 91       	ld	r31, X
    1562:	01 90       	ld	r0, Z+
    1564:	f0 81       	ld	r31, Z
    1566:	e0 2d       	mov	r30, r0
    1568:	c7 01       	movw	r24, r14
    156a:	19 95       	eicall
    156c:	c8 0f       	add	r28, r24
    156e:	d9 1f       	adc	r29, r25
    1570:	ef cf       	rjmp	.-34     	; 0x1550 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    1572:	ce 01       	movw	r24, r28
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	08 95       	ret

00001582 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    1582:	dc 01       	movw	r26, r24
{
  return write(c);
    1584:	ed 91       	ld	r30, X+
    1586:	fc 91       	ld	r31, X
    1588:	01 90       	ld	r0, Z+
    158a:	f0 81       	ld	r31, Z
    158c:	e0 2d       	mov	r30, r0
    158e:	19 95       	eicall
}
    1590:	08 95       	ret

00001592 <_ZN5Print5printERK9Printable>:
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
    1592:	9c 01       	movw	r18, r24
    1594:	db 01       	movw	r26, r22
{
  return x.printTo(*this);
    1596:	ed 91       	ld	r30, X+
    1598:	fc 91       	ld	r31, X
    159a:	01 90       	ld	r0, Z+
    159c:	f0 81       	ld	r31, Z
    159e:	e0 2d       	mov	r30, r0
    15a0:	cb 01       	movw	r24, r22
    15a2:	b9 01       	movw	r22, r18
    15a4:	19 95       	eicall
}
    15a6:	08 95       	ret

000015a8 <_ZN5Print7printlnEv>:

size_t Print::println(void)
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    15b2:	dc 01       	movw	r26, r24
    15b4:	ed 91       	ld	r30, X+
    15b6:	fc 91       	ld	r31, X
    15b8:	01 90       	ld	r0, Z+
    15ba:	f0 81       	ld	r31, Z
    15bc:	e0 2d       	mov	r30, r0
    15be:	6d e0       	ldi	r22, 0x0D	; 13
    15c0:	19 95       	eicall
    15c2:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    15c4:	d8 01       	movw	r26, r16
    15c6:	ed 91       	ld	r30, X+
    15c8:	fc 91       	ld	r31, X
    15ca:	01 90       	ld	r0, Z+
    15cc:	f0 81       	ld	r31, Z
    15ce:	e0 2d       	mov	r30, r0
    15d0:	c8 01       	movw	r24, r16
    15d2:	6a e0       	ldi	r22, 0x0A	; 10
    15d4:	19 95       	eicall
    15d6:	9c 01       	movw	r18, r24
    15d8:	2e 0d       	add	r18, r14
    15da:	3f 1d       	adc	r19, r15
    15dc:	c9 01       	movw	r24, r18
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	08 95       	ret

000015e8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
    15f2:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN5Print5printEPK19__FlashStringHelper>
    15f6:	8c 01       	movw	r16, r24
  n += println();
    15f8:	c7 01       	movw	r24, r14
    15fa:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    15fe:	9c 01       	movw	r18, r24
    1600:	20 0f       	add	r18, r16
    1602:	31 1f       	adc	r19, r17
  return n;
}
    1604:	c9 01       	movw	r24, r18
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	08 95       	ret

00001610 <_ZN5Print7printlnEc>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(char c)
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	7c 01       	movw	r14, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    161a:	dc 01       	movw	r26, r24
    161c:	ed 91       	ld	r30, X+
    161e:	fc 91       	ld	r31, X
    1620:	01 90       	ld	r0, Z+
    1622:	f0 81       	ld	r31, Z
    1624:	e0 2d       	mov	r30, r0
    1626:	19 95       	eicall
    1628:	8c 01       	movw	r16, r24
}

size_t Print::println(char c)
{
  size_t n = print(c);
  n += println();
    162a:	c7 01       	movw	r24, r14
    162c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    1630:	08 0f       	add	r16, r24
    1632:	19 1f       	adc	r17, r25
  return n;
}
    1634:	c8 01       	movw	r24, r16
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	08 95       	ret

00001640 <_ZN5Print7printlnERK9Printable>:
  size_t n = print(num, digits);
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	7c 01       	movw	r14, r24
    164a:	db 01       	movw	r26, r22
  return n;
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
    164c:	ed 91       	ld	r30, X+
    164e:	fc 91       	ld	r31, X
    1650:	01 90       	ld	r0, Z+
    1652:	f0 81       	ld	r31, Z
    1654:	e0 2d       	mov	r30, r0
    1656:	cb 01       	movw	r24, r22
    1658:	b7 01       	movw	r22, r14
    165a:	19 95       	eicall
    165c:	8c 01       	movw	r16, r24
}

size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
    165e:	c7 01       	movw	r24, r14
    1660:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    1664:	08 0f       	add	r16, r24
    1666:	19 1f       	adc	r17, r25
  return n;
}
    1668:	c8 01       	movw	r24, r16
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	ff 90       	pop	r15
    1670:	ef 90       	pop	r14
    1672:	08 95       	ret

00001674 <_ZN5Print5writeEPKc>:
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	ec 01       	movw	r28, r24
    167a:	61 15       	cp	r22, r1
    167c:	71 05       	cpc	r23, r1
    167e:	19 f4       	brne	.+6      	; 0x1686 <_ZN5Print5writeEPKc+0x12>
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <_ZN5Print5writeEPKc+0x30>
    1686:	db 01       	movw	r26, r22
    1688:	0d 90       	ld	r0, X+
    168a:	00 20       	and	r0, r0
    168c:	e9 f7       	brne	.-6      	; 0x1688 <_ZN5Print5writeEPKc+0x14>
    168e:	11 97       	sbiw	r26, 0x01	; 1
    1690:	a6 1b       	sub	r26, r22
    1692:	b7 0b       	sbc	r27, r23
    1694:	e8 81       	ld	r30, Y
    1696:	f9 81       	ldd	r31, Y+1	; 0x01
    1698:	02 80       	ldd	r0, Z+2	; 0x02
    169a:	f3 81       	ldd	r31, Z+3	; 0x03
    169c:	e0 2d       	mov	r30, r0
    169e:	ad 01       	movw	r20, r26
    16a0:	19 95       	eicall
    16a2:	9c 01       	movw	r18, r24
    16a4:	c9 01       	movw	r24, r18
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    16ac:	4f 92       	push	r4
    16ae:	5f 92       	push	r5
    16b0:	7f 92       	push	r7
    16b2:	8f 92       	push	r8
    16b4:	9f 92       	push	r9
    16b6:	af 92       	push	r10
    16b8:	bf 92       	push	r11
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	a1 97       	sbiw	r28, 0x21	; 33
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	2c 01       	movw	r4, r24
    16dc:	74 2e       	mov	r7, r20
    16de:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    16e0:	22 30       	cpi	r18, 0x02	; 2
    16e2:	08 f4       	brcc	.+2      	; 0x16e6 <_ZN5Print11printNumberEmh+0x3a>
    16e4:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    16e6:	19 a2       	std	Y+33, r1	; 0x21
    16e8:	31 e2       	ldi	r19, 0x21	; 33
    16ea:	c3 2e       	mov	r12, r19
    16ec:	d1 2c       	mov	r13, r1
    16ee:	cc 0e       	add	r12, r28
    16f0:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    16f2:	82 2e       	mov	r8, r18
    16f4:	99 24       	eor	r9, r9
    16f6:	aa 24       	eor	r10, r10
    16f8:	bb 24       	eor	r11, r11
    16fa:	67 2d       	mov	r22, r7
    16fc:	75 2f       	mov	r23, r21
    16fe:	a5 01       	movw	r20, r10
    1700:	94 01       	movw	r18, r8
    1702:	0e 94 ad 19 	call	0x335a	; 0x335a <__udivmodsi4>
    1706:	79 01       	movw	r14, r18
    1708:	8a 01       	movw	r16, r20
    char c = m - base * n;
    170a:	c8 01       	movw	r24, r16
    170c:	b7 01       	movw	r22, r14
    170e:	a5 01       	movw	r20, r10
    1710:	94 01       	movw	r18, r8
    1712:	0e 94 8e 19 	call	0x331c	; 0x331c <__mulsi3>
    1716:	47 2d       	mov	r20, r7
    1718:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    171a:	08 94       	sec
    171c:	c1 08       	sbc	r12, r1
    171e:	d1 08       	sbc	r13, r1
    1720:	4a 30       	cpi	r20, 0x0A	; 10
    1722:	14 f4       	brge	.+4      	; 0x1728 <_ZN5Print11printNumberEmh+0x7c>
    1724:	40 5d       	subi	r20, 0xD0	; 208
    1726:	01 c0       	rjmp	.+2      	; 0x172a <_ZN5Print11printNumberEmh+0x7e>
    1728:	49 5c       	subi	r20, 0xC9	; 201
    172a:	f6 01       	movw	r30, r12
    172c:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    172e:	e1 14       	cp	r14, r1
    1730:	f1 04       	cpc	r15, r1
    1732:	01 05       	cpc	r16, r1
    1734:	11 05       	cpc	r17, r1
    1736:	21 f0       	breq	.+8      	; 0x1740 <_ZN5Print11printNumberEmh+0x94>
    1738:	7e 2c       	mov	r7, r14
    173a:	5f 2d       	mov	r21, r15
    173c:	c8 01       	movw	r24, r16
    173e:	dd cf       	rjmp	.-70     	; 0x16fa <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1740:	c2 01       	movw	r24, r4
    1742:	b6 01       	movw	r22, r12
    1744:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN5Print5writeEPKc>
}
    1748:	a1 96       	adiw	r28, 0x21	; 33
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	df 90       	pop	r13
    1762:	cf 90       	pop	r12
    1764:	bf 90       	pop	r11
    1766:	af 90       	pop	r10
    1768:	9f 90       	pop	r9
    176a:	8f 90       	pop	r8
    176c:	7f 90       	pop	r7
    176e:	5f 90       	pop	r5
    1770:	4f 90       	pop	r4
    1772:	08 95       	ret

00001774 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    1774:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    1776:	21 15       	cp	r18, r1
    1778:	31 05       	cpc	r19, r1
    177a:	41 f4       	brne	.+16     	; 0x178c <_ZN5Print5printEmi+0x18>
    177c:	ed 91       	ld	r30, X+
    177e:	fc 91       	ld	r31, X
    1780:	01 90       	ld	r0, Z+
    1782:	f0 81       	ld	r31, Z
    1784:	e0 2d       	mov	r30, r0
    1786:	64 2f       	mov	r22, r20
    1788:	19 95       	eicall
    178a:	08 95       	ret
  else return printNumber(n, base);
    178c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_ZN5Print11printNumberEmh>
}
    1790:	08 95       	ret

00001792 <_ZN5Print7printlnEmi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	7c 01       	movw	r14, r24
{
  size_t n = print(num, base);
    179c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print5printEmi>
    17a0:	8c 01       	movw	r16, r24
  n += println();
    17a2:	c7 01       	movw	r24, r14
    17a4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    17a8:	9c 01       	movw	r18, r24
    17aa:	20 0f       	add	r18, r16
    17ac:	31 1f       	adc	r19, r17
  return n;
}
    17ae:	c9 01       	movw	r24, r18
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	08 95       	ret

000017ba <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    17ba:	ef 92       	push	r14
    17bc:	ff 92       	push	r15
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    17c4:	7b 01       	movw	r14, r22
    17c6:	00 e0       	ldi	r16, 0x00	; 0
    17c8:	10 e0       	ldi	r17, 0x00	; 0
    17ca:	b8 01       	movw	r22, r16
    17cc:	a7 01       	movw	r20, r14
    17ce:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print5printEmi>
}
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	08 95       	ret

000017dc <_ZN5Print7printlnEji>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
    17dc:	cf 92       	push	r12
    17de:	df 92       	push	r13
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	6c 01       	movw	r12, r24
    17ea:	7b 01       	movw	r14, r22
    17ec:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    17ee:	00 e0       	ldi	r16, 0x00	; 0
    17f0:	10 e0       	ldi	r17, 0x00	; 0
    17f2:	b8 01       	movw	r22, r16
    17f4:	a7 01       	movw	r20, r14
    17f6:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print5printEmi>
    17fa:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    17fc:	c6 01       	movw	r24, r12
    17fe:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    1802:	08 0f       	add	r16, r24
    1804:	19 1f       	adc	r17, r25
  return n;
}
    1806:	c8 01       	movw	r24, r16
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	08 95       	ret

00001816 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    1820:	e6 2e       	mov	r14, r22
    1822:	ff 24       	eor	r15, r15
    1824:	00 e0       	ldi	r16, 0x00	; 0
    1826:	10 e0       	ldi	r17, 0x00	; 0
    1828:	b8 01       	movw	r22, r16
    182a:	a7 01       	movw	r20, r14
    182c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print5printEmi>
}
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	08 95       	ret

0000183a <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
    183a:	cf 92       	push	r12
    183c:	df 92       	push	r13
    183e:	ef 92       	push	r14
    1840:	ff 92       	push	r15
    1842:	0f 93       	push	r16
    1844:	1f 93       	push	r17
    1846:	6c 01       	movw	r12, r24
    1848:	e6 2e       	mov	r14, r22
    184a:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    184c:	ff 24       	eor	r15, r15
    184e:	00 e0       	ldi	r16, 0x00	; 0
    1850:	10 e0       	ldi	r17, 0x00	; 0
    1852:	b8 01       	movw	r22, r16
    1854:	a7 01       	movw	r20, r14
    1856:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print5printEmi>
    185a:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    185c:	c6 01       	movw	r24, r12
    185e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    1862:	08 0f       	add	r16, r24
    1864:	19 1f       	adc	r17, r25
  return n;
}
    1866:	c8 01       	movw	r24, r16
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	08 95       	ret

00001876 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    1876:	cf 92       	push	r12
    1878:	df 92       	push	r13
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
    1888:	6a 01       	movw	r12, r20
    188a:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    188c:	21 15       	cp	r18, r1
    188e:	31 05       	cpc	r19, r1
    1890:	41 f4       	brne	.+16     	; 0x18a2 <_ZN5Print5printEli+0x2c>
    return write(n);
    1892:	e8 81       	ld	r30, Y
    1894:	f9 81       	ldd	r31, Y+1	; 0x01
    1896:	01 90       	ld	r0, Z+
    1898:	f0 81       	ld	r31, Z
    189a:	e0 2d       	mov	r30, r0
    189c:	64 2f       	mov	r22, r20
    189e:	19 95       	eicall
    18a0:	1f c0       	rjmp	.+62     	; 0x18e0 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    18a2:	2a 30       	cpi	r18, 0x0A	; 10
    18a4:	31 05       	cpc	r19, r1
    18a6:	d1 f4       	brne	.+52     	; 0x18dc <_ZN5Print5printEli+0x66>
    if (n < 0) {
    18a8:	77 ff       	sbrs	r23, 7
    18aa:	17 c0       	rjmp	.+46     	; 0x18da <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    18ac:	e8 81       	ld	r30, Y
    18ae:	f9 81       	ldd	r31, Y+1	; 0x01
    18b0:	01 90       	ld	r0, Z+
    18b2:	f0 81       	ld	r31, Z
    18b4:	e0 2d       	mov	r30, r0
    18b6:	6d e2       	ldi	r22, 0x2D	; 45
    18b8:	19 95       	eicall
    18ba:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    18bc:	44 27       	eor	r20, r20
    18be:	55 27       	eor	r21, r21
    18c0:	ba 01       	movw	r22, r20
    18c2:	4c 19       	sub	r20, r12
    18c4:	5d 09       	sbc	r21, r13
    18c6:	6e 09       	sbc	r22, r14
    18c8:	7f 09       	sbc	r23, r15
    18ca:	ce 01       	movw	r24, r28
    18cc:	2a e0       	ldi	r18, 0x0A	; 10
    18ce:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_ZN5Print11printNumberEmh>
    18d2:	98 01       	movw	r18, r16
    18d4:	28 0f       	add	r18, r24
    18d6:	39 1f       	adc	r19, r25
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    18da:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    18dc:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_ZN5Print11printNumberEmh>
    18e0:	9c 01       	movw	r18, r24
  }
}
    18e2:	c9 01       	movw	r24, r18
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	08 95       	ret

000018f6 <_ZN5Print7printlnEli>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(long num, int base)
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	7c 01       	movw	r14, r24
{
  size_t n = print(num, base);
    1900:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN5Print5printEli>
    1904:	8c 01       	movw	r16, r24
  n += println();
    1906:	c7 01       	movw	r24, r14
    1908:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    190c:	9c 01       	movw	r18, r24
    190e:	20 0f       	add	r18, r16
    1910:	31 1f       	adc	r19, r17
  return n;
}
    1912:	c9 01       	movw	r24, r18
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	08 95       	ret

0000191e <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	7b 01       	movw	r14, r22
    1928:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    192a:	00 27       	eor	r16, r16
    192c:	f7 fc       	sbrc	r15, 7
    192e:	00 95       	com	r16
    1930:	10 2f       	mov	r17, r16
    1932:	b8 01       	movw	r22, r16
    1934:	a7 01       	movw	r20, r14
    1936:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN5Print5printEli>
}
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
    1942:	08 95       	ret

00001944 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    1944:	cf 92       	push	r12
    1946:	df 92       	push	r13
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	6c 01       	movw	r12, r24
    1952:	7b 01       	movw	r14, r22
    1954:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1956:	00 27       	eor	r16, r16
    1958:	f7 fc       	sbrc	r15, 7
    195a:	00 95       	com	r16
    195c:	10 2f       	mov	r17, r16
    195e:	b8 01       	movw	r22, r16
    1960:	a7 01       	movw	r20, r14
    1962:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN5Print5printEli>
    1966:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1968:	c6 01       	movw	r24, r12
    196a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    196e:	08 0f       	add	r16, r24
    1970:	19 1f       	adc	r17, r25
  return n;
}
    1972:	c8 01       	movw	r24, r16
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	ff 90       	pop	r15
    197a:	ef 90       	pop	r14
    197c:	df 90       	pop	r13
    197e:	cf 90       	pop	r12
    1980:	08 95       	ret

00001982 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1982:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN5Print5writeEPKc>
}
    1986:	08 95       	ret

00001988 <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    1988:	7f 92       	push	r7
    198a:	8f 92       	push	r8
    198c:	9f 92       	push	r9
    198e:	af 92       	push	r10
    1990:	bf 92       	push	r11
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	4c 01       	movw	r8, r24
    19a4:	7a 01       	movw	r14, r20
    19a6:	8b 01       	movw	r16, r22
    19a8:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    19aa:	cb 01       	movw	r24, r22
    19ac:	ba 01       	movw	r22, r20
    19ae:	a8 01       	movw	r20, r16
    19b0:	97 01       	movw	r18, r14
    19b2:	0e 94 ef 04 	call	0x9de	; 0x9de <__unordsf2>
    19b6:	88 23       	and	r24, r24
    19b8:	21 f0       	breq	.+8      	; 0x19c2 <_ZN5Print10printFloatEdh+0x3a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    19ba:	c4 01       	movw	r24, r8
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	72 e0       	ldi	r23, 0x02	; 2
    19c0:	21 c0       	rjmp	.+66     	; 0x1a04 <_ZN5Print10printFloatEdh+0x7c>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    19c2:	c0 e0       	ldi	r28, 0x00	; 0
    19c4:	d0 e0       	ldi	r29, 0x00	; 0
    19c6:	57 01       	movw	r10, r14
    19c8:	68 01       	movw	r12, r16
    19ca:	e8 94       	clt
    19cc:	d7 f8       	bld	r13, 7
    19ce:	c6 01       	movw	r24, r12
    19d0:	b5 01       	movw	r22, r10
    19d2:	2f ef       	ldi	r18, 0xFF	; 255
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	5f e7       	ldi	r21, 0x7F	; 127
    19da:	0e 94 ef 04 	call	0x9de	; 0x9de <__unordsf2>
    19de:	88 23       	and	r24, r24
    19e0:	51 f4       	brne	.+20     	; 0x19f6 <_ZN5Print10printFloatEdh+0x6e>
    19e2:	c6 01       	movw	r24, r12
    19e4:	b5 01       	movw	r22, r10
    19e6:	2f ef       	ldi	r18, 0xFF	; 255
    19e8:	3f ef       	ldi	r19, 0xFF	; 255
    19ea:	4f e7       	ldi	r20, 0x7F	; 127
    19ec:	5f e7       	ldi	r21, 0x7F	; 127
    19ee:	0e 94 bf 04 	call	0x97e	; 0x97e <__lesf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	14 f0       	brlt	.+4      	; 0x19fa <_ZN5Print10printFloatEdh+0x72>
    19f6:	c1 e0       	ldi	r28, 0x01	; 1
    19f8:	d0 e0       	ldi	r29, 0x00	; 0
    19fa:	21 97       	sbiw	r28, 0x01	; 1
    19fc:	39 f0       	breq	.+14     	; 0x1a0c <_ZN5Print10printFloatEdh+0x84>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    19fe:	c4 01       	movw	r24, r8
    1a00:	64 e0       	ldi	r22, 0x04	; 4
    1a02:	72 e0       	ldi	r23, 0x02	; 2
    1a04:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN5Print5writeEPKc>
    1a08:	ec 01       	movw	r28, r24
    1a0a:	93 c0       	rjmp	.+294    	; 0x1b32 <_ZN5Print10printFloatEdh+0x1aa>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	b7 01       	movw	r22, r14
    1a10:	2f ef       	ldi	r18, 0xFF	; 255
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	5f e4       	ldi	r21, 0x4F	; 79
    1a18:	0e 94 2f 04 	call	0x85e	; 0x85e <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	54 f0       	brlt	.+20     	; 0x1a34 <_ZN5Print10printFloatEdh+0xac>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1a20:	c8 01       	movw	r24, r16
    1a22:	b7 01       	movw	r22, r14
    1a24:	2f ef       	ldi	r18, 0xFF	; 255
    1a26:	3f ef       	ldi	r19, 0xFF	; 255
    1a28:	4f e7       	ldi	r20, 0x7F	; 127
    1a2a:	5f ec       	ldi	r21, 0xCF	; 207
    1a2c:	0e 94 8f 04 	call	0x91e	; 0x91e <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	24 f4       	brge	.+8      	; 0x1a3c <_ZN5Print10printFloatEdh+0xb4>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1a34:	c4 01       	movw	r24, r8
    1a36:	68 e0       	ldi	r22, 0x08	; 8
    1a38:	72 e0       	ldi	r23, 0x02	; 2
    1a3a:	e4 cf       	rjmp	.-56     	; 0x1a04 <_ZN5Print10printFloatEdh+0x7c>
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    1a3c:	c8 01       	movw	r24, r16
    1a3e:	b7 01       	movw	r22, r14
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	0e 94 8f 04 	call	0x91e	; 0x91e <__ltsf2>
    1a4c:	87 fd       	sbrc	r24, 7
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <_ZN5Print10printFloatEdh+0xce>
    1a50:	c0 e0       	ldi	r28, 0x00	; 0
    1a52:	d0 e0       	ldi	r29, 0x00	; 0
    1a54:	0e c0       	rjmp	.+28     	; 0x1a72 <_ZN5Print10printFloatEdh+0xea>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1a56:	d4 01       	movw	r26, r8
    1a58:	ed 91       	ld	r30, X+
    1a5a:	fc 91       	ld	r31, X
    1a5c:	01 90       	ld	r0, Z+
    1a5e:	f0 81       	ld	r31, Z
    1a60:	e0 2d       	mov	r30, r0
    1a62:	c4 01       	movw	r24, r8
    1a64:	6d e2       	ldi	r22, 0x2D	; 45
    1a66:	19 95       	eicall
    1a68:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    1a6a:	17 fb       	bst	r17, 7
    1a6c:	10 95       	com	r17
    1a6e:	17 f9       	bld	r17, 7
    1a70:	10 95       	com	r17
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	dd 24       	eor	r13, r13
    1a7c:	0b c0       	rjmp	.+22     	; 0x1a94 <_ZN5Print10printFloatEdh+0x10c>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    1a7e:	ca 01       	movw	r24, r20
    1a80:	b9 01       	movw	r22, r18
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 83 03 	call	0x706	; 0x706 <__divsf3>
    1a8e:	9b 01       	movw	r18, r22
    1a90:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1a92:	d3 94       	inc	r13
    1a94:	d7 14       	cp	r13, r7
    1a96:	98 f3       	brcs	.-26     	; 0x1a7e <_ZN5Print10printFloatEdh+0xf6>
    rounding /= 10.0;
  
  number += rounding;
    1a98:	c8 01       	movw	r24, r16
    1a9a:	b7 01       	movw	r22, r14
    1a9c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__addsf3>
    1aa0:	5b 01       	movw	r10, r22
    1aa2:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1aa4:	0e 94 b3 00 	call	0x166	; 0x166 <__fixunssfsi>
    1aa8:	7b 01       	movw	r14, r22
    1aaa:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    1aac:	c4 01       	movw	r24, r8
    1aae:	b8 01       	movw	r22, r16
    1ab0:	a7 01       	movw	r20, r14
    1ab2:	2a e0       	ldi	r18, 0x0A	; 10
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN5Print5printEmi>
    1aba:	c8 0f       	add	r28, r24
    1abc:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1abe:	77 20       	and	r7, r7
    1ac0:	39 f0       	breq	.+14     	; 0x1ad0 <_ZN5Print10printFloatEdh+0x148>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1ac2:	c4 01       	movw	r24, r8
    1ac4:	6c e0       	ldi	r22, 0x0C	; 12
    1ac6:	72 e0       	ldi	r23, 0x02	; 2
    1ac8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1acc:	c8 0f       	add	r28, r24
    1ace:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1ad0:	c8 01       	movw	r24, r16
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatunsisf>
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	c6 01       	movw	r24, r12
    1ade:	b5 01       	movw	r22, r10
    1ae0:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
    1ae4:	24 c0       	rjmp	.+72     	; 0x1b2e <_ZN5Print10printFloatEdh+0x1a6>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e2       	ldi	r20, 0x20	; 32
    1aec:	51 e4       	ldi	r21, 0x41	; 65
    1aee:	0e 94 89 02 	call	0x512	; 0x512 <__mulsf3>
    1af2:	7b 01       	movw	r14, r22
    1af4:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    1af6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fixsfsi>
    1afa:	5b 01       	movw	r10, r22
    1afc:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1afe:	cc 24       	eor	r12, r12
    1b00:	b7 fc       	sbrc	r11, 7
    1b02:	c0 94       	com	r12
    1b04:	dc 2c       	mov	r13, r12
    1b06:	c4 01       	movw	r24, r8
    1b08:	b6 01       	movw	r22, r12
    1b0a:	a5 01       	movw	r20, r10
    1b0c:	2a e0       	ldi	r18, 0x0A	; 10
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1b14:	c8 0f       	add	r28, r24
    1b16:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1b18:	c6 01       	movw	r24, r12
    1b1a:	b5 01       	movw	r22, r10
    1b1c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__floatsisf>
    1b20:	9b 01       	movw	r18, r22
    1b22:	ac 01       	movw	r20, r24
    1b24:	c8 01       	movw	r24, r16
    1b26:	b7 01       	movw	r22, r14
    1b28:	0e 94 2b 02 	call	0x456	; 0x456 <__subsf3>
    1b2c:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1b2e:	77 20       	and	r7, r7
    1b30:	d1 f6       	brne	.-76     	; 0x1ae6 <_ZN5Print10printFloatEdh+0x15e>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1b32:	ce 01       	movw	r24, r28
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	df 90       	pop	r13
    1b42:	cf 90       	pop	r12
    1b44:	bf 90       	pop	r11
    1b46:	af 90       	pop	r10
    1b48:	9f 90       	pop	r9
    1b4a:	8f 90       	pop	r8
    1b4c:	7f 90       	pop	r7
    1b4e:	08 95       	ret

00001b50 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1b50:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN5Print10printFloatEdh>
}
    1b54:	08 95       	ret

00001b56 <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1b60:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN5Print10printFloatEdh>
    1b64:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1b66:	c7 01       	movw	r24, r14
    1b68:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    1b6c:	08 0f       	add	r16, r24
    1b6e:	19 1f       	adc	r17, r25
  return n;
}
    1b70:	c8 01       	movw	r24, r16
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	08 95       	ret

00001b7c <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1b86:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN5Print5writeEPKc>
    1b8a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1b8c:	c7 01       	movw	r24, r14
    1b8e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    1b92:	08 0f       	add	r16, r24
    1b94:	19 1f       	adc	r17, r25
  return n;
}
    1b96:	c8 01       	movw	r24, r16
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	08 95       	ret

00001ba2 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    1ba2:	af 92       	push	r10
    1ba4:	bf 92       	push	r11
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	5c 01       	movw	r10, r24
    1bb8:	6b 01       	movw	r12, r22
    1bba:	ee 24       	eor	r14, r14
    1bbc:	ff 24       	eor	r15, r15
    1bbe:	c0 e0       	ldi	r28, 0x00	; 0
    1bc0:	d0 e0       	ldi	r29, 0x00	; 0
    1bc2:	10 c0       	rjmp	.+32     	; 0x1be4 <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    1bc4:	d5 01       	movw	r26, r10
    1bc6:	ed 91       	ld	r30, X+
    1bc8:	fc 91       	ld	r31, X
    1bca:	00 81       	ld	r16, Z
    1bcc:	11 81       	ldd	r17, Z+1	; 0x01
    1bce:	c6 01       	movw	r24, r12
    1bd0:	be 01       	movw	r22, r28
    1bd2:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <_ZNK6StringixEj>
    1bd6:	68 2f       	mov	r22, r24
    1bd8:	c5 01       	movw	r24, r10
    1bda:	f8 01       	movw	r30, r16
    1bdc:	19 95       	eicall
    1bde:	e8 0e       	add	r14, r24
    1be0:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    1be2:	21 96       	adiw	r28, 0x01	; 1
    1be4:	f6 01       	movw	r30, r12
    1be6:	84 81       	ldd	r24, Z+4	; 0x04
    1be8:	95 81       	ldd	r25, Z+5	; 0x05
    1bea:	c8 17       	cp	r28, r24
    1bec:	d9 07       	cpc	r29, r25
    1bee:	50 f3       	brcs	.-44     	; 0x1bc4 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    1bf0:	c7 01       	movw	r24, r14
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	bf 90       	pop	r11
    1c04:	af 90       	pop	r10
    1c06:	08 95       	ret

00001c08 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
    1c12:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN5Print5printERK6String>
    1c16:	8c 01       	movw	r16, r24
  n += println();
    1c18:	c7 01       	movw	r24, r14
    1c1a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEv>
    1c1e:	9c 01       	movw	r18, r24
    1c20:	20 0f       	add	r18, r16
    1c22:	31 1f       	adc	r19, r17
  return n;
}
    1c24:	c9 01       	movw	r24, r18
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	08 95       	ret

00001c30 <_ZNK6String6charAtEj>:

/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
    1c30:	fc 01       	movw	r30, r24
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    1c32:	84 81       	ldd	r24, Z+4	; 0x04
    1c34:	95 81       	ldd	r25, Z+5	; 0x05
    1c36:	68 17       	cp	r22, r24
    1c38:	79 07       	cpc	r23, r25
    1c3a:	48 f4       	brcc	.+18     	; 0x1c4e <_ZNK6String6charAtEj+0x1e>
    1c3c:	01 90       	ld	r0, Z+
    1c3e:	f0 81       	ld	r31, Z
    1c40:	e0 2d       	mov	r30, r0
    1c42:	30 97       	sbiw	r30, 0x00	; 0
    1c44:	21 f0       	breq	.+8      	; 0x1c4e <_ZNK6String6charAtEj+0x1e>
	return buffer[index];
    1c46:	e6 0f       	add	r30, r22
    1c48:	f7 1f       	adc	r31, r23
    1c4a:	80 81       	ld	r24, Z
    1c4c:	08 95       	ret
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
}
    1c50:	08 95       	ret

00001c52 <_ZN6String9setCharAtEjc>:

void String::setCharAt(unsigned int loc, char c) 
    1c52:	fc 01       	movw	r30, r24
{
	if (loc < len) buffer[loc] = c;
    1c54:	84 81       	ldd	r24, Z+4	; 0x04
    1c56:	95 81       	ldd	r25, Z+5	; 0x05
    1c58:	68 17       	cp	r22, r24
    1c5a:	79 07       	cpc	r23, r25
    1c5c:	30 f4       	brcc	.+12     	; 0x1c6a <_ZN6String9setCharAtEjc+0x18>
    1c5e:	01 90       	ld	r0, Z+
    1c60:	f0 81       	ld	r31, Z
    1c62:	e0 2d       	mov	r30, r0
    1c64:	e6 0f       	add	r30, r22
    1c66:	f7 1f       	adc	r31, r23
    1c68:	40 83       	st	Z, r20
    1c6a:	08 95       	ret

00001c6c <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	9b 01       	movw	r18, r22
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    1c70:	84 81       	ldd	r24, Z+4	; 0x04
    1c72:	95 81       	ldd	r25, Z+5	; 0x05
    1c74:	68 17       	cp	r22, r24
    1c76:	79 07       	cpc	r23, r25
    1c78:	28 f4       	brcc	.+10     	; 0x1c84 <_ZN6StringixEj+0x18>
    1c7a:	60 81       	ld	r22, Z
    1c7c:	71 81       	ldd	r23, Z+1	; 0x01
    1c7e:	61 15       	cp	r22, r1
    1c80:	71 05       	cpc	r23, r1
    1c82:	29 f4       	brne	.+10     	; 0x1c8e <_ZN6StringixEj+0x22>
		dummy_writable_char = 0;
    1c84:	10 92 47 03 	sts	0x0347, r1
    1c88:	67 e4       	ldi	r22, 0x47	; 71
    1c8a:	73 e0       	ldi	r23, 0x03	; 3
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <_ZN6StringixEj+0x26>
		return dummy_writable_char;
	}
	return buffer[index];
    1c8e:	62 0f       	add	r22, r18
    1c90:	73 1f       	adc	r23, r19
}
    1c92:	cb 01       	movw	r24, r22
    1c94:	08 95       	ret

00001c96 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    1c96:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
    1c98:	84 81       	ldd	r24, Z+4	; 0x04
    1c9a:	95 81       	ldd	r25, Z+5	; 0x05
    1c9c:	68 17       	cp	r22, r24
    1c9e:	79 07       	cpc	r23, r25
    1ca0:	48 f4       	brcc	.+18     	; 0x1cb4 <_ZNK6StringixEj+0x1e>
    1ca2:	01 90       	ld	r0, Z+
    1ca4:	f0 81       	ld	r31, Z
    1ca6:	e0 2d       	mov	r30, r0
    1ca8:	30 97       	sbiw	r30, 0x00	; 0
    1caa:	21 f0       	breq	.+8      	; 0x1cb4 <_ZNK6StringixEj+0x1e>
	return buffer[index];
    1cac:	e6 0f       	add	r30, r22
    1cae:	f7 1f       	adc	r31, r23
    1cb0:	80 81       	ld	r24, Z
    1cb2:	08 95       	ret
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
}
    1cb6:	08 95       	ret

00001cb8 <_ZN6String7replaceEcc>:

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    1cb8:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    1cba:	01 90       	ld	r0, Z+
    1cbc:	f0 81       	ld	r31, Z
    1cbe:	e0 2d       	mov	r30, r0
    1cc0:	30 97       	sbiw	r30, 0x00	; 0
    1cc2:	29 f4       	brne	.+10     	; 0x1cce <_ZN6String7replaceEcc+0x16>
    1cc4:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    1cc6:	86 17       	cp	r24, r22
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <_ZN6String7replaceEcc+0x14>
    1cca:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    1ccc:	31 96       	adiw	r30, 0x01	; 1
    1cce:	80 81       	ld	r24, Z
    1cd0:	88 23       	and	r24, r24
    1cd2:	c9 f7       	brne	.-14     	; 0x1cc6 <_ZN6String7replaceEcc+0xe>
    1cd4:	08 95       	ret

00001cd6 <_ZNK6String5toIntEv>:

/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
    1cd6:	fc 01       	movw	r30, r24
{
	if (buffer) return atol(buffer);
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	29 f4       	brne	.+10     	; 0x1cea <_ZNK6String5toIntEv+0x14>
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	04 c0       	rjmp	.+8      	; 0x1cf2 <_ZNK6String5toIntEv+0x1c>
    1cea:	0e 94 0c 1a 	call	0x3418	; 0x3418 <atol>
    1cee:	9b 01       	movw	r18, r22
    1cf0:	ac 01       	movw	r20, r24
	return 0;
}
    1cf2:	b9 01       	movw	r22, r18
    1cf4:	ca 01       	movw	r24, r20
    1cf6:	08 95       	ret

00001cf8 <_ZN6String4trimEv>:
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}

void String::trim(void)
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	6c 01       	movw	r12, r24
{
	if (!buffer || len == 0) return;
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	ed 90       	ld	r14, X+
    1d0e:	fc 90       	ld	r15, X
    1d10:	11 97       	sbiw	r26, 0x01	; 1
    1d12:	e1 14       	cp	r14, r1
    1d14:	f1 04       	cpc	r15, r1
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <_ZN6String4trimEv+0x22>
    1d18:	41 c0       	rjmp	.+130    	; 0x1d9c <_ZN6String4trimEv+0xa4>
    1d1a:	14 96       	adiw	r26, 0x04	; 4
    1d1c:	cd 91       	ld	r28, X+
    1d1e:	dc 91       	ld	r29, X
    1d20:	15 97       	sbiw	r26, 0x05	; 5
    1d22:	20 97       	sbiw	r28, 0x00	; 0
    1d24:	d9 f1       	breq	.+118    	; 0x1d9c <_ZN6String4trimEv+0xa4>
    1d26:	87 01       	movw	r16, r14
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <_ZN6String4trimEv+0x36>
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    1d2a:	0f 5f       	subi	r16, 0xFF	; 255
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2e:	f8 01       	movw	r30, r16
    1d30:	80 81       	ld	r24, Z
    1d32:	99 27       	eor	r25, r25
    1d34:	87 fd       	sbrc	r24, 7
    1d36:	90 95       	com	r25
    1d38:	0e 94 33 1a 	call	0x3466	; 0x3466 <isspace>
    1d3c:	89 2b       	or	r24, r25
    1d3e:	a9 f7       	brne	.-22     	; 0x1d2a <_ZN6String4trimEv+0x32>
	char *end = buffer + len - 1;
    1d40:	21 97       	sbiw	r28, 0x01	; 1
    1d42:	ce 0d       	add	r28, r14
    1d44:	df 1d       	adc	r29, r15
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <_ZN6String4trimEv+0x52>
	while (isspace(*end) && end >= begin) end--;
    1d48:	21 97       	sbiw	r28, 0x01	; 1
    1d4a:	88 81       	ld	r24, Y
    1d4c:	99 27       	eor	r25, r25
    1d4e:	87 fd       	sbrc	r24, 7
    1d50:	90 95       	com	r25
    1d52:	0e 94 33 1a 	call	0x3466	; 0x3466 <isspace>
    1d56:	89 2b       	or	r24, r25
    1d58:	19 f0       	breq	.+6      	; 0x1d60 <_ZN6String4trimEv+0x68>
    1d5a:	c0 17       	cp	r28, r16
    1d5c:	d1 07       	cpc	r29, r17
    1d5e:	a0 f7       	brcc	.-24     	; 0x1d48 <_ZN6String4trimEv+0x50>
	len = end + 1 - begin;
    1d60:	fe 01       	movw	r30, r28
    1d62:	31 96       	adiw	r30, 0x01	; 1
    1d64:	e0 1b       	sub	r30, r16
    1d66:	f1 0b       	sbc	r31, r17
    1d68:	d6 01       	movw	r26, r12
    1d6a:	15 96       	adiw	r26, 0x05	; 5
    1d6c:	fc 93       	st	X, r31
    1d6e:	ee 93       	st	-X, r30
    1d70:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    1d72:	2d 91       	ld	r18, X+
    1d74:	3c 91       	ld	r19, X
    1d76:	20 17       	cp	r18, r16
    1d78:	31 07       	cpc	r19, r17
    1d7a:	28 f4       	brcc	.+10     	; 0x1d86 <_ZN6String4trimEv+0x8e>
    1d7c:	c9 01       	movw	r24, r18
    1d7e:	b8 01       	movw	r22, r16
    1d80:	af 01       	movw	r20, r30
    1d82:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <memcpy>
	buffer[len] = 0;
    1d86:	d6 01       	movw	r26, r12
    1d88:	ed 91       	ld	r30, X+
    1d8a:	fc 91       	ld	r31, X
    1d8c:	11 97       	sbiw	r26, 0x01	; 1
    1d8e:	14 96       	adiw	r26, 0x04	; 4
    1d90:	8d 91       	ld	r24, X+
    1d92:	9c 91       	ld	r25, X
    1d94:	15 97       	sbiw	r26, 0x05	; 5
    1d96:	e8 0f       	add	r30, r24
    1d98:	f9 1f       	adc	r31, r25
    1d9a:	10 82       	st	Z, r1
}
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
    1dac:	08 95       	ret

00001dae <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    1db4:	c0 81       	ld	r28, Z
    1db6:	d1 81       	ldd	r29, Z+1	; 0x01
    1db8:	20 97       	sbiw	r28, 0x00	; 0
    1dba:	39 f4       	brne	.+14     	; 0x1dca <_ZN6String11toUpperCaseEv+0x1c>
    1dbc:	09 c0       	rjmp	.+18     	; 0x1dd0 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    1dbe:	99 27       	eor	r25, r25
    1dc0:	87 fd       	sbrc	r24, 7
    1dc2:	90 95       	com	r25
    1dc4:	0e 94 43 1a 	call	0x3486	; 0x3486 <toupper>
    1dc8:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    1dca:	88 81       	ld	r24, Y
    1dcc:	88 23       	and	r24, r24
    1dce:	b9 f7       	brne	.-18     	; 0x1dbe <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	08 95       	ret

00001dd6 <_ZN6String11toLowerCaseEv>:
			index--;
		}
	}
}

void String::toLowerCase(void)
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
    1ddc:	c0 81       	ld	r28, Z
    1dde:	d1 81       	ldd	r29, Z+1	; 0x01
    1de0:	20 97       	sbiw	r28, 0x00	; 0
    1de2:	39 f4       	brne	.+14     	; 0x1df2 <_ZN6String11toLowerCaseEv+0x1c>
    1de4:	09 c0       	rjmp	.+18     	; 0x1df8 <_ZN6String11toLowerCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    1de6:	99 27       	eor	r25, r25
    1de8:	87 fd       	sbrc	r24, 7
    1dea:	90 95       	com	r25
    1dec:	0e 94 3b 1a 	call	0x3476	; 0x3476 <tolower>
    1df0:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    1df2:	88 81       	ld	r24, Y
    1df4:	88 23       	and	r24, r24
    1df6:	b9 f7       	brne	.-18     	; 0x1de6 <_ZN6String11toLowerCaseEv+0x10>
		*p = tolower(*p);
	}
}
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <_ZNK6String16equalsIgnoreCaseERKS_>:
unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	db 01       	movw	r26, r22
{
	if (this == &s2) return 1;
    1e0e:	86 17       	cp	r24, r22
    1e10:	97 07       	cpc	r25, r23
    1e12:	39 f1       	breq	.+78     	; 0x1e62 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len != s2.len) return 0;
    1e14:	24 81       	ldd	r18, Z+4	; 0x04
    1e16:	35 81       	ldd	r19, Z+5	; 0x05
    1e18:	14 96       	adiw	r26, 0x04	; 4
    1e1a:	8d 91       	ld	r24, X+
    1e1c:	9c 91       	ld	r25, X
    1e1e:	15 97       	sbiw	r26, 0x05	; 5
    1e20:	28 17       	cp	r18, r24
    1e22:	39 07       	cpc	r19, r25
    1e24:	01 f5       	brne	.+64     	; 0x1e66 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
	if (len == 0) return 1;
    1e26:	23 2b       	or	r18, r19
    1e28:	e1 f0       	breq	.+56     	; 0x1e62 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	const char *p1 = buffer;
    1e2a:	e0 80       	ld	r14, Z
    1e2c:	f1 80       	ldd	r15, Z+1	; 0x01
	const char *p2 = s2.buffer;
    1e2e:	cd 91       	ld	r28, X+
    1e30:	dc 91       	ld	r29, X
    1e32:	13 c0       	rjmp	.+38     	; 0x1e5a <_ZNK6String16equalsIgnoreCaseERKS_+0x5c>
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    1e34:	99 27       	eor	r25, r25
    1e36:	87 fd       	sbrc	r24, 7
    1e38:	90 95       	com	r25
    1e3a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <tolower>
    1e3e:	8c 01       	movw	r16, r24
    1e40:	88 81       	ld	r24, Y
    1e42:	99 27       	eor	r25, r25
    1e44:	87 fd       	sbrc	r24, 7
    1e46:	90 95       	com	r25
    1e48:	0e 94 3b 1a 	call	0x3476	; 0x3476 <tolower>
    1e4c:	08 17       	cp	r16, r24
    1e4e:	19 07       	cpc	r17, r25
    1e50:	51 f4       	brne	.+20     	; 0x1e66 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
    1e52:	08 94       	sec
    1e54:	e1 1c       	adc	r14, r1
    1e56:	f1 1c       	adc	r15, r1
    1e58:	21 96       	adiw	r28, 0x01	; 1
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    1e5a:	f7 01       	movw	r30, r14
    1e5c:	80 81       	ld	r24, Z
    1e5e:	88 23       	and	r24, r24
    1e60:	49 f7       	brne	.-46     	; 0x1e34 <_ZNK6String16equalsIgnoreCaseERKS_+0x36>
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <_ZNK6String16equalsIgnoreCaseERKS_+0x6a>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	08 95       	ret

00001e76 <_ZNK6String11lastIndexOfERKS_j>:
int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
    1e76:	af 92       	push	r10
    1e78:	bf 92       	push	r11
    1e7a:	cf 92       	push	r12
    1e7c:	df 92       	push	r13
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	5b 01       	movw	r10, r22
    1e8e:	7a 01       	movw	r14, r20
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    1e90:	db 01       	movw	r26, r22
    1e92:	14 96       	adiw	r26, 0x04	; 4
    1e94:	2d 91       	ld	r18, X+
    1e96:	3c 91       	ld	r19, X
    1e98:	15 97       	sbiw	r26, 0x05	; 5
    1e9a:	21 15       	cp	r18, r1
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	59 f1       	breq	.+86     	; 0x1ef6 <_ZNK6String11lastIndexOfERKS_j+0x80>
    1ea0:	84 81       	ldd	r24, Z+4	; 0x04
    1ea2:	95 81       	ldd	r25, Z+5	; 0x05
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	39 f1       	breq	.+78     	; 0x1ef6 <_ZNK6String11lastIndexOfERKS_j+0x80>
    1ea8:	82 17       	cp	r24, r18
    1eaa:	93 07       	cpc	r25, r19
    1eac:	20 f1       	brcs	.+72     	; 0x1ef6 <_ZNK6String11lastIndexOfERKS_j+0x80>
	if (fromIndex >= len) fromIndex = len - 1;
    1eae:	48 17       	cp	r20, r24
    1eb0:	59 07       	cpc	r21, r25
    1eb2:	20 f0       	brcs	.+8      	; 0x1ebc <_ZNK6String11lastIndexOfERKS_j+0x46>
    1eb4:	7c 01       	movw	r14, r24
    1eb6:	08 94       	sec
    1eb8:	e1 08       	sbc	r14, r1
    1eba:	f1 08       	sbc	r15, r1
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    1ebc:	00 81       	ld	r16, Z
    1ebe:	11 81       	ldd	r17, Z+1	; 0x01
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	cf ef       	ldi	r28, 0xFF	; 255
    1ec4:	df ef       	ldi	r29, 0xFF	; 255
    1ec6:	68 01       	movw	r12, r16
    1ec8:	ce 0c       	add	r12, r14
    1eca:	df 1c       	adc	r13, r15
    1ecc:	10 c0       	rjmp	.+32     	; 0x1eee <_ZNK6String11lastIndexOfERKS_j+0x78>
		p = strstr(p, s2.buffer);
    1ece:	f5 01       	movw	r30, r10
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	0e 94 b6 1a 	call	0x356c	; 0x356c <strstr>
    1ed8:	9c 01       	movw	r18, r24
		if (!p) break;
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	71 f0       	breq	.+28     	; 0x1efa <_ZNK6String11lastIndexOfERKS_j+0x84>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    1ede:	80 1b       	sub	r24, r16
    1ee0:	91 0b       	sbc	r25, r17
    1ee2:	e8 16       	cp	r14, r24
    1ee4:	f9 06       	cpc	r15, r25
    1ee6:	08 f0       	brcs	.+2      	; 0x1eea <_ZNK6String11lastIndexOfERKS_j+0x74>
    1ee8:	ec 01       	movw	r28, r24
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    1eea:	c9 01       	movw	r24, r18
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	c8 16       	cp	r12, r24
    1ef0:	d9 06       	cpc	r13, r25
    1ef2:	68 f7       	brcc	.-38     	; 0x1ece <_ZNK6String11lastIndexOfERKS_j+0x58>
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <_ZNK6String11lastIndexOfERKS_j+0x84>
    1ef6:	cf ef       	ldi	r28, 0xFF	; 255
    1ef8:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    1efa:	ce 01       	movw	r24, r28
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	1f 91       	pop	r17
    1f02:	0f 91       	pop	r16
    1f04:	ff 90       	pop	r15
    1f06:	ef 90       	pop	r14
    1f08:	df 90       	pop	r13
    1f0a:	cf 90       	pop	r12
    1f0c:	bf 90       	pop	r11
    1f0e:	af 90       	pop	r10
    1f10:	08 95       	ret

00001f12 <_ZNK6String11lastIndexOfERKS_>:
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
    1f12:	fc 01       	movw	r30, r24
    1f14:	db 01       	movw	r26, r22
{
	return lastIndexOf(s2, len - s2.len);
    1f16:	44 81       	ldd	r20, Z+4	; 0x04
    1f18:	55 81       	ldd	r21, Z+5	; 0x05
    1f1a:	14 96       	adiw	r26, 0x04	; 4
    1f1c:	8d 91       	ld	r24, X+
    1f1e:	9c 91       	ld	r25, X
    1f20:	15 97       	sbiw	r26, 0x05	; 5
    1f22:	48 1b       	sub	r20, r24
    1f24:	59 0b       	sbc	r21, r25
    1f26:	cf 01       	movw	r24, r30
    1f28:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZNK6String11lastIndexOfERKS_j>
}
    1f2c:	08 95       	ret

00001f2e <_ZNK6String7indexOfERKS_j>:
int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	fc 01       	movw	r30, r24
    1f34:	db 01       	movw	r26, r22
{
	if (fromIndex >= len) return -1;
    1f36:	84 81       	ldd	r24, Z+4	; 0x04
    1f38:	95 81       	ldd	r25, Z+5	; 0x05
    1f3a:	48 17       	cp	r20, r24
    1f3c:	59 07       	cpc	r21, r25
    1f3e:	60 f4       	brcc	.+24     	; 0x1f58 <_ZNK6String7indexOfERKS_j+0x2a>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    1f40:	c0 81       	ld	r28, Z
    1f42:	d1 81       	ldd	r29, Z+1	; 0x01
    1f44:	6d 91       	ld	r22, X+
    1f46:	7c 91       	ld	r23, X
    1f48:	ce 01       	movw	r24, r28
    1f4a:	84 0f       	add	r24, r20
    1f4c:	95 1f       	adc	r25, r21
    1f4e:	0e 94 b6 1a 	call	0x356c	; 0x356c <strstr>
    1f52:	9c 01       	movw	r18, r24
	if (found == NULL) return -1;
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	19 f4       	brne	.+6      	; 0x1f5e <_ZNK6String7indexOfERKS_j+0x30>
    1f58:	2f ef       	ldi	r18, 0xFF	; 255
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <_ZNK6String7indexOfERKS_j+0x34>
	return found - buffer;
    1f5e:	2c 1b       	sub	r18, r28
    1f60:	3d 0b       	sbc	r19, r29
}
    1f62:	c9 01       	movw	r24, r18
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZNK6String7indexOfERKS_j>
}
    1f72:	08 95       	ret

00001f74 <_ZNK6String11lastIndexOfEcj>:
int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	ec 01       	movw	r28, r24
{
	if (fromIndex >= len) return -1;
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	9d 81       	ldd	r25, Y+5	; 0x05
    1f88:	48 17       	cp	r20, r24
    1f8a:	59 07       	cpc	r21, r25
    1f8c:	c8 f4       	brcc	.+50     	; 0x1fc0 <_ZNK6String11lastIndexOfEcj+0x4c>
	char tempchar = buffer[fromIndex + 1];
    1f8e:	7a 01       	movw	r14, r20
    1f90:	08 94       	sec
    1f92:	e1 1c       	adc	r14, r1
    1f94:	f1 1c       	adc	r15, r1
    1f96:	e8 81       	ld	r30, Y
    1f98:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9a:	ee 0d       	add	r30, r14
    1f9c:	ff 1d       	adc	r31, r15
    1f9e:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    1fa0:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    1fa2:	08 81       	ld	r16, Y
    1fa4:	19 81       	ldd	r17, Y+1	; 0x01
    1fa6:	77 27       	eor	r23, r23
    1fa8:	67 fd       	sbrc	r22, 7
    1faa:	70 95       	com	r23
    1fac:	c8 01       	movw	r24, r16
    1fae:	0e 94 ab 1a 	call	0x3556	; 0x3556 <strrchr>
    1fb2:	9c 01       	movw	r18, r24
	buffer[fromIndex + 1] = tempchar;
    1fb4:	0e 0d       	add	r16, r14
    1fb6:	1f 1d       	adc	r17, r15
    1fb8:	f8 01       	movw	r30, r16
    1fba:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <_ZNK6String11lastIndexOfEcj+0x52>
    1fc0:	ef ef       	ldi	r30, 0xFF	; 255
    1fc2:	ff ef       	ldi	r31, 0xFF	; 255
    1fc4:	05 c0       	rjmp	.+10     	; 0x1fd0 <_ZNK6String11lastIndexOfEcj+0x5c>
	return temp - buffer;
    1fc6:	88 81       	ld	r24, Y
    1fc8:	99 81       	ldd	r25, Y+1	; 0x01
    1fca:	f9 01       	movw	r30, r18
    1fcc:	e8 1b       	sub	r30, r24
    1fce:	f9 0b       	sbc	r31, r25
}
    1fd0:	cf 01       	movw	r24, r30
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	ff 90       	pop	r15
    1fdc:	ef 90       	pop	r14
    1fde:	df 90       	pop	r13
    1fe0:	08 95       	ret

00001fe2 <_ZNK6String11lastIndexOfEc>:
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
    1fe2:	fc 01       	movw	r30, r24
{
	return lastIndexOf(theChar, len - 1);
    1fe4:	44 81       	ldd	r20, Z+4	; 0x04
    1fe6:	55 81       	ldd	r21, Z+5	; 0x05
    1fe8:	41 50       	subi	r20, 0x01	; 1
    1fea:	50 40       	sbci	r21, 0x00	; 0
    1fec:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <_ZNK6String11lastIndexOfEcj>
}
    1ff0:	08 95       	ret

00001ff2 <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	fc 01       	movw	r30, r24
{
	if (fromIndex >= len) return -1;
    1ff8:	84 81       	ldd	r24, Z+4	; 0x04
    1ffa:	95 81       	ldd	r25, Z+5	; 0x05
    1ffc:	48 17       	cp	r20, r24
    1ffe:	59 07       	cpc	r21, r25
    2000:	68 f4       	brcc	.+26     	; 0x201c <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    2002:	c0 81       	ld	r28, Z
    2004:	d1 81       	ldd	r29, Z+1	; 0x01
    2006:	77 27       	eor	r23, r23
    2008:	67 fd       	sbrc	r22, 7
    200a:	70 95       	com	r23
    200c:	ce 01       	movw	r24, r28
    200e:	84 0f       	add	r24, r20
    2010:	95 1f       	adc	r25, r21
    2012:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <strchr>
    2016:	9c 01       	movw	r18, r24
	if (temp == NULL) return -1;
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	19 f4       	brne	.+6      	; 0x2022 <_ZNK6String7indexOfEcj+0x30>
    201c:	2f ef       	ldi	r18, 0xFF	; 255
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <_ZNK6String7indexOfEcj+0x34>
	return temp - buffer;
    2022:	2c 1b       	sub	r18, r28
    2024:	3d 0b       	sbc	r19, r29
}
    2026:	c9 01       	movw	r24, r18
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	08 95       	ret

0000202e <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZNK6String7indexOfEcj>
}
    2036:	08 95       	ret

00002038 <_ZNK6String8getBytesEPhjj>:
{
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	fc 01       	movw	r30, r24
    2042:	8b 01       	movw	r16, r22
{
	if (!bufsize || !buf) return;
    2044:	41 15       	cp	r20, r1
    2046:	51 05       	cpc	r21, r1
    2048:	f9 f0       	breq	.+62     	; 0x2088 <_ZNK6String8getBytesEPhjj+0x50>
    204a:	61 15       	cp	r22, r1
    204c:	71 05       	cpc	r23, r1
    204e:	e1 f0       	breq	.+56     	; 0x2088 <_ZNK6String8getBytesEPhjj+0x50>
	if (index >= len) {
    2050:	84 81       	ldd	r24, Z+4	; 0x04
    2052:	95 81       	ldd	r25, Z+5	; 0x05
    2054:	28 17       	cp	r18, r24
    2056:	39 07       	cpc	r19, r25
    2058:	18 f0       	brcs	.+6      	; 0x2060 <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    205a:	fb 01       	movw	r30, r22
    205c:	10 82       	st	Z, r1
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <_ZNK6String8getBytesEPhjj+0x50>
		return;
	}
	unsigned int n = bufsize - 1;
    2060:	41 50       	subi	r20, 0x01	; 1
    2062:	50 40       	sbci	r21, 0x00	; 0
    2064:	ec 01       	movw	r28, r24
    2066:	c2 1b       	sub	r28, r18
    2068:	d3 0b       	sbc	r29, r19
    206a:	4c 17       	cp	r20, r28
    206c:	5d 07       	cpc	r21, r29
    206e:	08 f4       	brcc	.+2      	; 0x2072 <_ZNK6String8getBytesEPhjj+0x3a>
    2070:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	62 0f       	add	r22, r18
    2078:	73 1f       	adc	r23, r19
    207a:	c8 01       	movw	r24, r16
    207c:	ae 01       	movw	r20, r28
    207e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <strncpy>
	buf[n] = 0;
    2082:	c0 0f       	add	r28, r16
    2084:	d1 1f       	adc	r29, r17
    2086:	18 82       	st	Y, r1
}
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	08 95       	ret

00002092 <_ZNK6String8endsWithERKS_>:
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
    2092:	fc 01       	movw	r30, r24
    2094:	db 01       	movw	r26, r22
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    2096:	24 81       	ldd	r18, Z+4	; 0x04
    2098:	35 81       	ldd	r19, Z+5	; 0x05
    209a:	14 96       	adiw	r26, 0x04	; 4
    209c:	4d 91       	ld	r20, X+
    209e:	5c 91       	ld	r21, X
    20a0:	15 97       	sbiw	r26, 0x05	; 5
    20a2:	24 17       	cp	r18, r20
    20a4:	35 07       	cpc	r19, r21
    20a6:	a8 f0       	brcs	.+42     	; 0x20d2 <_ZNK6String8endsWithERKS_+0x40>
    20a8:	80 81       	ld	r24, Z
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	89 f0       	breq	.+34     	; 0x20d2 <_ZNK6String8endsWithERKS_+0x40>
    20b0:	6d 91       	ld	r22, X+
    20b2:	7c 91       	ld	r23, X
    20b4:	61 15       	cp	r22, r1
    20b6:	71 05       	cpc	r23, r1
    20b8:	61 f0       	breq	.+24     	; 0x20d2 <_ZNK6String8endsWithERKS_+0x40>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    20ba:	24 1b       	sub	r18, r20
    20bc:	35 0b       	sbc	r19, r21
    20be:	82 0f       	add	r24, r18
    20c0:	93 1f       	adc	r25, r19
    20c2:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <strcmp>
    20c6:	9c 01       	movw	r18, r24
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	23 2b       	or	r18, r19
    20cc:	19 f4       	brne	.+6      	; 0x20d4 <_ZNK6String8endsWithERKS_+0x42>
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	08 95       	ret
    20d2:	80 e0       	ldi	r24, 0x00	; 0
}
    20d4:	08 95       	ret

000020d6 <_ZNK6String6equalsEPKc>:
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    20d6:	dc 01       	movw	r26, r24
    20d8:	fb 01       	movw	r30, r22
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    20da:	14 96       	adiw	r26, 0x04	; 4
    20dc:	8d 91       	ld	r24, X+
    20de:	9c 91       	ld	r25, X
    20e0:	15 97       	sbiw	r26, 0x05	; 5
    20e2:	89 2b       	or	r24, r25
    20e4:	31 f4       	brne	.+12     	; 0x20f2 <_ZNK6String6equalsEPKc+0x1c>
    20e6:	61 15       	cp	r22, r1
    20e8:	71 05       	cpc	r23, r1
    20ea:	a9 f0       	breq	.+42     	; 0x2116 <_ZNK6String6equalsEPKc+0x40>
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	08 c0       	rjmp	.+16     	; 0x2102 <_ZNK6String6equalsEPKc+0x2c>
    20f2:	0d 90       	ld	r0, X+
    20f4:	bc 91       	ld	r27, X
    20f6:	a0 2d       	mov	r26, r0
	if (cstr == NULL) return buffer[0] == 0;
    20f8:	61 15       	cp	r22, r1
    20fa:	71 05       	cpc	r23, r1
    20fc:	29 f4       	brne	.+10     	; 0x2108 <_ZNK6String6equalsEPKc+0x32>
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	8c 91       	ld	r24, X
    2102:	88 23       	and	r24, r24
    2104:	49 f4       	brne	.+18     	; 0x2118 <_ZNK6String6equalsEPKc+0x42>
    2106:	07 c0       	rjmp	.+14     	; 0x2116 <_ZNK6String6equalsEPKc+0x40>
	return strcmp(buffer, cstr) == 0;
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <strcmp>
    210e:	9c 01       	movw	r18, r24
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	23 2b       	or	r18, r19
    2114:	09 f4       	brne	.+2      	; 0x2118 <_ZNK6String6equalsEPKc+0x42>
    2116:	91 e0       	ldi	r25, 0x01	; 1
}
    2118:	89 2f       	mov	r24, r25
    211a:	08 95       	ret

0000211c <_ZNK6String9compareToERKS_>:

/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	9c 01       	movw	r18, r24
    2122:	fb 01       	movw	r30, r22
{
	if (!buffer || !s.buffer) {
    2124:	ec 01       	movw	r28, r24
    2126:	a8 81       	ld	r26, Y
    2128:	b9 81       	ldd	r27, Y+1	; 0x01
    212a:	10 97       	sbiw	r26, 0x00	; 0
    212c:	29 f0       	breq	.+10     	; 0x2138 <_ZNK6String9compareToERKS_+0x1c>
    212e:	60 81       	ld	r22, Z
    2130:	71 81       	ldd	r23, Z+1	; 0x01
    2132:	61 15       	cp	r22, r1
    2134:	71 05       	cpc	r23, r1
    2136:	d1 f4       	brne	.+52     	; 0x216c <_ZNK6String9compareToERKS_+0x50>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    2138:	c0 81       	ld	r28, Z
    213a:	d1 81       	ldd	r29, Z+1	; 0x01
    213c:	20 97       	sbiw	r28, 0x00	; 0
    213e:	59 f0       	breq	.+22     	; 0x2156 <_ZNK6String9compareToERKS_+0x3a>
    2140:	84 81       	ldd	r24, Z+4	; 0x04
    2142:	95 81       	ldd	r25, Z+5	; 0x05
    2144:	89 2b       	or	r24, r25
    2146:	39 f0       	breq	.+14     	; 0x2156 <_ZNK6String9compareToERKS_+0x3a>
    2148:	88 81       	ld	r24, Y
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	22 27       	eor	r18, r18
    214e:	33 27       	eor	r19, r19
    2150:	28 1b       	sub	r18, r24
    2152:	39 0b       	sbc	r19, r25
    2154:	12 c0       	rjmp	.+36     	; 0x217a <_ZNK6String9compareToERKS_+0x5e>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    2156:	10 97       	sbiw	r26, 0x00	; 0
    2158:	71 f0       	breq	.+28     	; 0x2176 <_ZNK6String9compareToERKS_+0x5a>
    215a:	f9 01       	movw	r30, r18
    215c:	84 81       	ldd	r24, Z+4	; 0x04
    215e:	95 81       	ldd	r25, Z+5	; 0x05
    2160:	89 2b       	or	r24, r25
    2162:	49 f0       	breq	.+18     	; 0x2176 <_ZNK6String9compareToERKS_+0x5a>
    2164:	8c 91       	ld	r24, X
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	07 c0       	rjmp	.+14     	; 0x217a <_ZNK6String9compareToERKS_+0x5e>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <strcmp>
    2172:	9c 01       	movw	r18, r24
    2174:	02 c0       	rjmp	.+4      	; 0x217a <_ZNK6String9compareToERKS_+0x5e>
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
}
    217a:	c9 01       	movw	r24, r18
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	08 95       	ret

00002182 <_ZNK6StringgeERKS_>:
	return compareTo(rhs) <= 0;
}

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    2182:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZNK6String9compareToERKS_>
    2186:	89 2f       	mov	r24, r25
    2188:	80 95       	com	r24
}
    218a:	88 1f       	adc	r24, r24
    218c:	88 27       	eor	r24, r24
    218e:	88 1f       	adc	r24, r24
    2190:	08 95       	ret

00002192 <_ZNK6StringleERKS_>:
	return compareTo(rhs) > 0;
}

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    2192:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZNK6String9compareToERKS_>
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	18 16       	cp	r1, r24
    219a:	19 06       	cpc	r1, r25
    219c:	0c f0       	brlt	.+2      	; 0x21a0 <_ZNK6StringleERKS_+0xe>
    219e:	21 e0       	ldi	r18, 0x01	; 1
}
    21a0:	82 2f       	mov	r24, r18
    21a2:	08 95       	ret

000021a4 <_ZNK6StringgtERKS_>:
	return compareTo(rhs) < 0;
}

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    21a4:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZNK6String9compareToERKS_>
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	18 16       	cp	r1, r24
    21ac:	19 06       	cpc	r1, r25
    21ae:	0c f4       	brge	.+2      	; 0x21b2 <_ZNK6StringgtERKS_+0xe>
    21b0:	21 e0       	ldi	r18, 0x01	; 1
}
    21b2:	82 2f       	mov	r24, r18
    21b4:	08 95       	ret

000021b6 <_ZNK6StringltERKS_>:
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    21b6:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZNK6String9compareToERKS_>
}
    21ba:	89 2f       	mov	r24, r25
    21bc:	88 1f       	adc	r24, r24
    21be:	88 27       	eor	r24, r24
    21c0:	88 1f       	adc	r24, r24
    21c2:	08 95       	ret

000021c4 <_ZNK6String6equalsERKS_>:
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    21c4:	fc 01       	movw	r30, r24
    21c6:	db 01       	movw	r26, r22
{
	return (len == s2.len && compareTo(s2) == 0);
    21c8:	24 81       	ldd	r18, Z+4	; 0x04
    21ca:	35 81       	ldd	r19, Z+5	; 0x05
    21cc:	14 96       	adiw	r26, 0x04	; 4
    21ce:	8d 91       	ld	r24, X+
    21d0:	9c 91       	ld	r25, X
    21d2:	15 97       	sbiw	r26, 0x05	; 5
    21d4:	28 17       	cp	r18, r24
    21d6:	39 07       	cpc	r19, r25
    21d8:	11 f0       	breq	.+4      	; 0x21de <_ZNK6String6equalsERKS_+0x1a>
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	07 c0       	rjmp	.+14     	; 0x21ec <_ZNK6String6equalsERKS_+0x28>
    21de:	cf 01       	movw	r24, r30
    21e0:	0e 94 8e 10 	call	0x211c	; 0x211c <_ZNK6String9compareToERKS_>
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	89 2b       	or	r24, r25
    21e8:	09 f4       	brne	.+2      	; 0x21ec <_ZNK6String6equalsERKS_+0x28>
    21ea:	21 e0       	ldi	r18, 0x01	; 1
}
    21ec:	82 2f       	mov	r24, r18
    21ee:	08 95       	ret

000021f0 <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
    21f0:	fc 01       	movw	r30, r24
    21f2:	db 01       	movw	r26, r22
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    21f4:	14 96       	adiw	r26, 0x04	; 4
    21f6:	2d 91       	ld	r18, X+
    21f8:	3c 91       	ld	r19, X
    21fa:	15 97       	sbiw	r26, 0x05	; 5
    21fc:	84 81       	ldd	r24, Z+4	; 0x04
    21fe:	95 81       	ldd	r25, Z+5	; 0x05
    2200:	82 1b       	sub	r24, r18
    2202:	93 0b       	sbc	r25, r19
    2204:	84 17       	cp	r24, r20
    2206:	95 07       	cpc	r25, r21
    2208:	a0 f0       	brcs	.+40     	; 0x2232 <__stack+0x33>
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	81 f0       	breq	.+32     	; 0x2232 <__stack+0x33>
    2212:	6d 91       	ld	r22, X+
    2214:	7c 91       	ld	r23, X
    2216:	61 15       	cp	r22, r1
    2218:	71 05       	cpc	r23, r1
    221a:	59 f0       	breq	.+22     	; 0x2232 <__stack+0x33>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    221c:	84 0f       	add	r24, r20
    221e:	95 1f       	adc	r25, r21
    2220:	a9 01       	movw	r20, r18
    2222:	0e 94 8e 1a 	call	0x351c	; 0x351c <strncmp>
    2226:	9c 01       	movw	r18, r24
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	23 2b       	or	r18, r19
    222c:	19 f4       	brne	.+6      	; 0x2234 <__stack+0x35>
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	08 95       	ret
    2232:	80 e0       	ldi	r24, 0x00	; 0
}
    2234:	08 95       	ret

00002236 <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
    2236:	fc 01       	movw	r30, r24
    2238:	db 01       	movw	r26, r22
{
	if (len < s2.len) return 0;
    223a:	24 81       	ldd	r18, Z+4	; 0x04
    223c:	35 81       	ldd	r19, Z+5	; 0x05
    223e:	14 96       	adiw	r26, 0x04	; 4
    2240:	8d 91       	ld	r24, X+
    2242:	9c 91       	ld	r25, X
    2244:	15 97       	sbiw	r26, 0x05	; 5
    2246:	28 17       	cp	r18, r24
    2248:	39 07       	cpc	r19, r25
    224a:	10 f4       	brcc	.+4      	; 0x2250 <_ZNK6String10startsWithERKS_+0x1a>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	08 95       	ret
	return startsWith(s2, 0);
    2250:	cf 01       	movw	r24, r30
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <_ZNK6String10startsWithERKS_j>
}
    225a:	08 95       	ret

0000225c <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	ec 01       	movw	r28, r24
    2266:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2268:	6f 5f       	subi	r22, 0xFF	; 255
    226a:	7f 4f       	sbci	r23, 0xFF	; 255
    226c:	88 81       	ld	r24, Y
    226e:	99 81       	ldd	r25, Y+1	; 0x01
    2270:	0e 94 ad 18 	call	0x315a	; 0x315a <realloc>
	if (newbuffer) {
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	11 f4       	brne	.+4      	; 0x227c <_ZN6String12changeBufferEj+0x20>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	05 c0       	rjmp	.+10     	; 0x2286 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    227c:	99 83       	std	Y+1, r25	; 0x01
    227e:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2280:	1b 83       	std	Y+3, r17	; 0x03
    2282:	0a 83       	std	Y+2, r16	; 0x02
    2284:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	08 95       	ret

00002290 <_ZN6String7replaceERKS_S1_>:
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
    2290:	2f 92       	push	r2
    2292:	3f 92       	push	r3
    2294:	4f 92       	push	r4
    2296:	5f 92       	push	r5
    2298:	6f 92       	push	r6
    229a:	7f 92       	push	r7
    229c:	8f 92       	push	r8
    229e:	9f 92       	push	r9
    22a0:	af 92       	push	r10
    22a2:	bf 92       	push	r11
    22a4:	cf 92       	push	r12
    22a6:	df 92       	push	r13
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	5c 01       	movw	r10, r24
    22b6:	2b 01       	movw	r4, r22
    22b8:	4a 01       	movw	r8, r20
{
	if (len == 0 || find.len == 0) return;
    22ba:	dc 01       	movw	r26, r24
    22bc:	14 96       	adiw	r26, 0x04	; 4
    22be:	0d 91       	ld	r16, X+
    22c0:	1c 91       	ld	r17, X
    22c2:	15 97       	sbiw	r26, 0x05	; 5
    22c4:	01 15       	cp	r16, r1
    22c6:	11 05       	cpc	r17, r1
    22c8:	09 f4       	brne	.+2      	; 0x22cc <_ZN6String7replaceERKS_S1_+0x3c>
    22ca:	d4 c0       	rjmp	.+424    	; 0x2474 <_ZN6String7replaceERKS_S1_+0x1e4>
    22cc:	fb 01       	movw	r30, r22
    22ce:	c4 80       	ldd	r12, Z+4	; 0x04
    22d0:	d5 80       	ldd	r13, Z+5	; 0x05
    22d2:	c1 14       	cp	r12, r1
    22d4:	d1 04       	cpc	r13, r1
    22d6:	09 f4       	brne	.+2      	; 0x22da <_ZN6String7replaceERKS_S1_+0x4a>
    22d8:	cd c0       	rjmp	.+410    	; 0x2474 <_ZN6String7replaceERKS_S1_+0x1e4>
	int diff = replace.len - find.len;
    22da:	da 01       	movw	r26, r20
    22dc:	14 96       	adiw	r26, 0x04	; 4
    22de:	6d 90       	ld	r6, X+
    22e0:	7c 90       	ld	r7, X
    22e2:	15 97       	sbiw	r26, 0x05	; 5
    22e4:	6c 18       	sub	r6, r12
    22e6:	7d 08       	sbc	r7, r13
	char *readFrom = buffer;
    22e8:	fc 01       	movw	r30, r24
    22ea:	e0 80       	ld	r14, Z
    22ec:	f1 80       	ldd	r15, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    22ee:	61 14       	cp	r6, r1
    22f0:	71 04       	cpc	r7, r1
    22f2:	91 f0       	breq	.+36     	; 0x2318 <_ZN6String7replaceERKS_S1_+0x88>
    22f4:	1b c0       	rjmp	.+54     	; 0x232c <_ZN6String7replaceERKS_S1_+0x9c>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    22f6:	d4 01       	movw	r26, r8
    22f8:	6c 91       	ld	r22, X
    22fa:	11 96       	adiw	r26, 0x01	; 1
    22fc:	7c 91       	ld	r23, X
    22fe:	11 97       	sbiw	r26, 0x01	; 1
    2300:	14 96       	adiw	r26, 0x04	; 4
    2302:	4d 91       	ld	r20, X+
    2304:	5c 91       	ld	r21, X
    2306:	15 97       	sbiw	r26, 0x05	; 5
    2308:	8c 2f       	mov	r24, r28
    230a:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <memcpy>
			readFrom = foundAt + replace.len;
    230e:	f4 01       	movw	r30, r8
    2310:	e4 80       	ldd	r14, Z+4	; 0x04
    2312:	f5 80       	ldd	r15, Z+5	; 0x05
    2314:	ec 0e       	add	r14, r28
    2316:	fd 1e       	adc	r15, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    2318:	d2 01       	movw	r26, r4
    231a:	6d 91       	ld	r22, X+
    231c:	7c 91       	ld	r23, X
    231e:	c7 01       	movw	r24, r14
    2320:	0e 94 b6 1a 	call	0x356c	; 0x356c <strstr>
    2324:	ec 01       	movw	r28, r24
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	31 f7       	brne	.-52     	; 0x22f6 <_ZN6String7replaceERKS_S1_+0x66>
    232a:	a4 c0       	rjmp	.+328    	; 0x2474 <_ZN6String7replaceERKS_S1_+0x1e4>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    232c:	77 fe       	sbrs	r7, 7
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <_ZN6String7replaceERKS_S1_+0xa4>
    2330:	67 01       	movw	r12, r14
    2332:	2e c0       	rjmp	.+92     	; 0x2390 <_ZN6String7replaceERKS_S1_+0x100>
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    2334:	fb 01       	movw	r30, r22
    2336:	20 80       	ld	r2, Z
    2338:	31 80       	ldd	r3, Z+1	; 0x01
    233a:	e8 01       	movw	r28, r16
    233c:	3c c0       	rjmp	.+120    	; 0x23b6 <_ZN6String7replaceERKS_S1_+0x126>
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    233e:	8e 01       	movw	r16, r28
    2340:	0e 19       	sub	r16, r14
    2342:	1f 09       	sbc	r17, r15
			memcpy(writeTo, readFrom, n);
    2344:	c6 01       	movw	r24, r12
    2346:	b7 01       	movw	r22, r14
    2348:	a8 01       	movw	r20, r16
    234a:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <memcpy>
			writeTo += n;
    234e:	0c 0d       	add	r16, r12
    2350:	1d 1d       	adc	r17, r13
			memcpy(writeTo, replace.buffer, replace.len);
    2352:	d4 01       	movw	r26, r8
    2354:	6c 91       	ld	r22, X
    2356:	11 96       	adiw	r26, 0x01	; 1
    2358:	7c 91       	ld	r23, X
    235a:	11 97       	sbiw	r26, 0x01	; 1
    235c:	14 96       	adiw	r26, 0x04	; 4
    235e:	4d 91       	ld	r20, X+
    2360:	5c 91       	ld	r21, X
    2362:	15 97       	sbiw	r26, 0x05	; 5
    2364:	c8 01       	movw	r24, r16
    2366:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <memcpy>
			writeTo += replace.len;
    236a:	f4 01       	movw	r30, r8
    236c:	c4 80       	ldd	r12, Z+4	; 0x04
    236e:	d5 80       	ldd	r13, Z+5	; 0x05
    2370:	c0 0e       	add	r12, r16
    2372:	d1 1e       	adc	r13, r17
			readFrom = foundAt + find.len;
    2374:	d2 01       	movw	r26, r4
    2376:	14 96       	adiw	r26, 0x04	; 4
    2378:	ed 90       	ld	r14, X+
    237a:	fc 90       	ld	r15, X
    237c:	15 97       	sbiw	r26, 0x05	; 5
    237e:	ec 0e       	add	r14, r28
    2380:	fd 1e       	adc	r15, r29
			len += diff;
    2382:	f5 01       	movw	r30, r10
    2384:	84 81       	ldd	r24, Z+4	; 0x04
    2386:	95 81       	ldd	r25, Z+5	; 0x05
    2388:	86 0d       	add	r24, r6
    238a:	97 1d       	adc	r25, r7
    238c:	95 83       	std	Z+5, r25	; 0x05
    238e:	84 83       	std	Z+4, r24	; 0x04
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    2390:	d2 01       	movw	r26, r4
    2392:	6d 91       	ld	r22, X+
    2394:	7c 91       	ld	r23, X
    2396:	c7 01       	movw	r24, r14
    2398:	0e 94 b6 1a 	call	0x356c	; 0x356c <strstr>
    239c:	ec 01       	movw	r28, r24
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	71 f6       	brne	.-100    	; 0x233e <_ZN6String7replaceERKS_S1_+0xae>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    23a2:	c6 01       	movw	r24, r12
    23a4:	b7 01       	movw	r22, r14
    23a6:	0e 94 87 1a 	call	0x350e	; 0x350e <strcpy>
    23aa:	64 c0       	rjmp	.+200    	; 0x2474 <_ZN6String7replaceERKS_S1_+0x1e4>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    23ac:	7b 01       	movw	r14, r22
    23ae:	ec 0c       	add	r14, r12
    23b0:	fd 1c       	adc	r15, r13
			size += diff;
    23b2:	c6 0d       	add	r28, r6
    23b4:	d7 1d       	adc	r29, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    23b6:	c7 01       	movw	r24, r14
    23b8:	b1 01       	movw	r22, r2
    23ba:	0e 94 b6 1a 	call	0x356c	; 0x356c <strstr>
    23be:	bc 01       	movw	r22, r24
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	a1 f7       	brne	.-24     	; 0x23ac <_ZN6String7replaceERKS_S1_+0x11c>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    23c4:	c0 17       	cp	r28, r16
    23c6:	d1 07       	cpc	r29, r17
    23c8:	09 f4       	brne	.+2      	; 0x23cc <_ZN6String7replaceERKS_S1_+0x13c>
    23ca:	54 c0       	rjmp	.+168    	; 0x2474 <_ZN6String7replaceERKS_S1_+0x1e4>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    23cc:	f5 01       	movw	r30, r10
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	8c 17       	cp	r24, r28
    23d4:	9d 07       	cpc	r25, r29
    23d6:	08 f0       	brcs	.+2      	; 0x23da <_ZN6String7replaceERKS_S1_+0x14a>
    23d8:	44 c0       	rjmp	.+136    	; 0x2462 <_ZN6String7replaceERKS_S1_+0x1d2>
    23da:	c5 01       	movw	r24, r10
    23dc:	be 01       	movw	r22, r28
    23de:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN6String12changeBufferEj>
    23e2:	88 23       	and	r24, r24
    23e4:	f1 f5       	brne	.+124    	; 0x2462 <_ZN6String7replaceERKS_S1_+0x1d2>
    23e6:	46 c0       	rjmp	.+140    	; 0x2474 <_ZN6String7replaceERKS_S1_+0x1e4>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    23e8:	c5 01       	movw	r24, r10
    23ea:	b2 01       	movw	r22, r4
    23ec:	a9 01       	movw	r20, r18
    23ee:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZNK6String11lastIndexOfERKS_j>
    23f2:	ec 01       	movw	r28, r24
    23f4:	97 fd       	sbrc	r25, 7
    23f6:	3e c0       	rjmp	.+124    	; 0x2474 <_ZN6String7replaceERKS_S1_+0x1e4>
			readFrom = buffer + index + find.len;
    23f8:	d5 01       	movw	r26, r10
    23fa:	6d 91       	ld	r22, X+
    23fc:	7c 91       	ld	r23, X
    23fe:	11 97       	sbiw	r26, 0x01	; 1
    2400:	f2 01       	movw	r30, r4
    2402:	84 81       	ldd	r24, Z+4	; 0x04
    2404:	95 81       	ldd	r25, Z+5	; 0x05
    2406:	8c 0f       	add	r24, r28
    2408:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    240a:	68 0f       	add	r22, r24
    240c:	79 1f       	adc	r23, r25
    240e:	14 96       	adiw	r26, 0x04	; 4
    2410:	4d 91       	ld	r20, X+
    2412:	5c 91       	ld	r21, X
    2414:	15 97       	sbiw	r26, 0x05	; 5
    2416:	48 1b       	sub	r20, r24
    2418:	59 0b       	sbc	r21, r25
    241a:	cb 01       	movw	r24, r22
    241c:	86 0d       	add	r24, r6
    241e:	97 1d       	adc	r25, r7
    2420:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <memmove>
			len += diff;
    2424:	d5 01       	movw	r26, r10
    2426:	14 96       	adiw	r26, 0x04	; 4
    2428:	8d 91       	ld	r24, X+
    242a:	9c 91       	ld	r25, X
    242c:	15 97       	sbiw	r26, 0x05	; 5
    242e:	86 0d       	add	r24, r6
    2430:	97 1d       	adc	r25, r7
    2432:	15 96       	adiw	r26, 0x05	; 5
    2434:	9c 93       	st	X, r25
    2436:	8e 93       	st	-X, r24
    2438:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
    243a:	ed 91       	ld	r30, X+
    243c:	fc 91       	ld	r31, X
    243e:	11 97       	sbiw	r26, 0x01	; 1
    2440:	e8 0f       	add	r30, r24
    2442:	f9 1f       	adc	r31, r25
    2444:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    2446:	2d 91       	ld	r18, X+
    2448:	3c 91       	ld	r19, X
    244a:	2c 0f       	add	r18, r28
    244c:	3d 1f       	adc	r19, r29
    244e:	f4 01       	movw	r30, r8
    2450:	60 81       	ld	r22, Z
    2452:	71 81       	ldd	r23, Z+1	; 0x01
    2454:	44 81       	ldd	r20, Z+4	; 0x04
    2456:	55 81       	ldd	r21, Z+5	; 0x05
    2458:	c9 01       	movw	r24, r18
    245a:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <memcpy>
			index--;
    245e:	9e 01       	movw	r18, r28
    2460:	05 c0       	rjmp	.+10     	; 0x246c <_ZN6String7replaceERKS_S1_+0x1dc>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    2462:	d5 01       	movw	r26, r10
    2464:	14 96       	adiw	r26, 0x04	; 4
    2466:	2d 91       	ld	r18, X+
    2468:	3c 91       	ld	r19, X
    246a:	15 97       	sbiw	r26, 0x05	; 5
    246c:	21 50       	subi	r18, 0x01	; 1
    246e:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    2470:	37 ff       	sbrs	r19, 7
    2472:	ba cf       	rjmp	.-140    	; 0x23e8 <_ZN6String7replaceERKS_S1_+0x158>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	ff 90       	pop	r15
    247e:	ef 90       	pop	r14
    2480:	df 90       	pop	r13
    2482:	cf 90       	pop	r12
    2484:	bf 90       	pop	r11
    2486:	af 90       	pop	r10
    2488:	9f 90       	pop	r9
    248a:	8f 90       	pop	r8
    248c:	7f 90       	pop	r7
    248e:	6f 90       	pop	r6
    2490:	5f 90       	pop	r5
    2492:	4f 90       	pop	r4
    2494:	3f 90       	pop	r3
    2496:	2f 90       	pop	r2
    2498:	08 95       	ret

0000249a <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    24a0:	88 81       	ld	r24, Y
    24a2:	99 81       	ldd	r25, Y+1	; 0x01
    24a4:	89 2b       	or	r24, r25
    24a6:	29 f0       	breq	.+10     	; 0x24b2 <_ZN6String7reserveEj+0x18>
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	9b 81       	ldd	r25, Y+3	; 0x03
    24ac:	86 17       	cp	r24, r22
    24ae:	97 07       	cpc	r25, r23
    24b0:	60 f4       	brcc	.+24     	; 0x24ca <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    24b2:	ce 01       	movw	r24, r28
    24b4:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN6String12changeBufferEj>
    24b8:	88 23       	and	r24, r24
    24ba:	41 f0       	breq	.+16     	; 0x24cc <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	9d 81       	ldd	r25, Y+5	; 0x05
    24c0:	89 2b       	or	r24, r25
    24c2:	19 f4       	brne	.+6      	; 0x24ca <_ZN6String7reserveEj+0x30>
    24c4:	e8 81       	ld	r30, Y
    24c6:	f9 81       	ldd	r31, Y+1	; 0x01
    24c8:	10 82       	st	Z, r1
    24ca:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	08 95       	ret

000024d2 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	ec 01       	movw	r28, r24
    24e0:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    24e2:	6c 81       	ldd	r22, Y+4	; 0x04
    24e4:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    24e6:	e1 14       	cp	r14, r1
    24e8:	f1 04       	cpc	r15, r1
    24ea:	c1 f0       	breq	.+48     	; 0x251c <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    24ec:	41 15       	cp	r20, r1
    24ee:	51 05       	cpc	r21, r1
    24f0:	99 f0       	breq	.+38     	; 0x2518 <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    24f2:	8a 01       	movw	r16, r20
    24f4:	06 0f       	add	r16, r22
    24f6:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    24f8:	b8 01       	movw	r22, r16
    24fa:	0e 94 4d 12 	call	0x249a	; 0x249a <_ZN6String7reserveEj>
    24fe:	88 23       	and	r24, r24
    2500:	69 f0       	breq	.+26     	; 0x251c <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    2502:	88 81       	ld	r24, Y
    2504:	99 81       	ldd	r25, Y+1	; 0x01
    2506:	2c 81       	ldd	r18, Y+4	; 0x04
    2508:	3d 81       	ldd	r19, Y+5	; 0x05
    250a:	82 0f       	add	r24, r18
    250c:	93 1f       	adc	r25, r19
    250e:	b7 01       	movw	r22, r14
    2510:	0e 94 87 1a 	call	0x350e	; 0x350e <strcpy>
	len = newlen;
    2514:	1d 83       	std	Y+5, r17	; 0x05
    2516:	0c 83       	std	Y+4, r16	; 0x04
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	01 c0       	rjmp	.+2      	; 0x251e <_ZN6String6concatEPKcj+0x4c>
	return 1;
    251c:	80 e0       	ldi	r24, 0x00	; 0
}
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	ff 90       	pop	r15
    2528:	ef 90       	pop	r14
    252a:	08 95       	ret

0000252c <_ZN6String6concatEm>:
	char buf[12];
	ltoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned long num)
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	2b 97       	sbiw	r28, 0x0b	; 11
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	7c 01       	movw	r14, r24
{
	char buf[11];
	ultoa(num, buf, 10);
    254a:	cb 01       	movw	r24, r22
    254c:	ba 01       	movw	r22, r20
    254e:	8e 01       	movw	r16, r28
    2550:	0f 5f       	subi	r16, 0xFF	; 255
    2552:	1f 4f       	sbci	r17, 0xFF	; 255
    2554:	a8 01       	movw	r20, r16
    2556:	2a e0       	ldi	r18, 0x0A	; 10
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	0e 94 3a 1b 	call	0x3674	; 0x3674 <ultoa>
	return concat(buf, strlen(buf));
    255e:	f8 01       	movw	r30, r16
    2560:	01 90       	ld	r0, Z+
    2562:	00 20       	and	r0, r0
    2564:	e9 f7       	brne	.-6      	; 0x2560 <_ZN6String6concatEm+0x34>
    2566:	31 97       	sbiw	r30, 0x01	; 1
    2568:	e0 1b       	sub	r30, r16
    256a:	f1 0b       	sbc	r31, r17
    256c:	c7 01       	movw	r24, r14
    256e:	b8 01       	movw	r22, r16
    2570:	af 01       	movw	r20, r30
    2572:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6String6concatEPKcj>
}
    2576:	2b 96       	adiw	r28, 0x0b	; 11
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	1f 91       	pop	r17
    2588:	0f 91       	pop	r16
    258a:	ff 90       	pop	r15
    258c:	ef 90       	pop	r14
    258e:	08 95       	ret

00002590 <_ZN6String6concatEl>:
	char buf[6];
	utoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(long num)
    2590:	ef 92       	push	r14
    2592:	ff 92       	push	r15
    2594:	0f 93       	push	r16
    2596:	1f 93       	push	r17
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	2c 97       	sbiw	r28, 0x0c	; 12
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	7c 01       	movw	r14, r24
{
	char buf[12];
	ltoa(num, buf, 10);
    25ae:	cb 01       	movw	r24, r22
    25b0:	ba 01       	movw	r22, r20
    25b2:	8e 01       	movw	r16, r28
    25b4:	0f 5f       	subi	r16, 0xFF	; 255
    25b6:	1f 4f       	sbci	r17, 0xFF	; 255
    25b8:	a8 01       	movw	r20, r16
    25ba:	2a e0       	ldi	r18, 0x0A	; 10
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <ltoa>
	return concat(buf, strlen(buf));
    25c2:	f8 01       	movw	r30, r16
    25c4:	01 90       	ld	r0, Z+
    25c6:	00 20       	and	r0, r0
    25c8:	e9 f7       	brne	.-6      	; 0x25c4 <_ZN6String6concatEl+0x34>
    25ca:	31 97       	sbiw	r30, 0x01	; 1
    25cc:	e0 1b       	sub	r30, r16
    25ce:	f1 0b       	sbc	r31, r17
    25d0:	c7 01       	movw	r24, r14
    25d2:	b8 01       	movw	r22, r16
    25d4:	af 01       	movw	r20, r30
    25d6:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6String6concatEPKcj>
}
    25da:	2c 96       	adiw	r28, 0x0c	; 12
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	ff 90       	pop	r15
    25f0:	ef 90       	pop	r14
    25f2:	08 95       	ret

000025f4 <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
    25f4:	ef 92       	push	r14
    25f6:	ff 92       	push	r15
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <_ZN6String6concatEj+0xe>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <_ZN6String6concatEj+0x10>
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	7c 01       	movw	r14, r24
    260a:	cb 01       	movw	r24, r22
{
	char buf[6];
	utoa(num, buf, 10);
    260c:	8e 01       	movw	r16, r28
    260e:	0f 5f       	subi	r16, 0xFF	; 255
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	b8 01       	movw	r22, r16
    2614:	4a e0       	ldi	r20, 0x0A	; 10
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	0e 94 5f 1b 	call	0x36be	; 0x36be <utoa>
	return concat(buf, strlen(buf));
    261c:	f8 01       	movw	r30, r16
    261e:	01 90       	ld	r0, Z+
    2620:	00 20       	and	r0, r0
    2622:	e9 f7       	brne	.-6      	; 0x261e <_ZN6String6concatEj+0x2a>
    2624:	31 97       	sbiw	r30, 0x01	; 1
    2626:	e0 1b       	sub	r30, r16
    2628:	f1 0b       	sbc	r31, r17
    262a:	c7 01       	movw	r24, r14
    262c:	b8 01       	movw	r22, r16
    262e:	af 01       	movw	r20, r30
    2630:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6String6concatEPKcj>
}
    2634:	26 96       	adiw	r28, 0x06	; 6
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	ff 90       	pop	r15
    264a:	ef 90       	pop	r14
    264c:	08 95       	ret

0000264e <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	27 97       	sbiw	r28, 0x07	; 7
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	7c 01       	movw	r14, r24
    266c:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
    266e:	8e 01       	movw	r16, r28
    2670:	0f 5f       	subi	r16, 0xFF	; 255
    2672:	1f 4f       	sbci	r17, 0xFF	; 255
    2674:	b8 01       	movw	r22, r16
    2676:	4a e0       	ldi	r20, 0x0A	; 10
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <itoa>
	return concat(buf, strlen(buf));
    267e:	f8 01       	movw	r30, r16
    2680:	01 90       	ld	r0, Z+
    2682:	00 20       	and	r0, r0
    2684:	e9 f7       	brne	.-6      	; 0x2680 <_ZN6String6concatEi+0x32>
    2686:	31 97       	sbiw	r30, 0x01	; 1
    2688:	e0 1b       	sub	r30, r16
    268a:	f1 0b       	sbc	r31, r17
    268c:	c7 01       	movw	r24, r14
    268e:	b8 01       	movw	r22, r16
    2690:	af 01       	movw	r20, r30
    2692:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6String6concatEPKcj>
}
    2696:	27 96       	adiw	r28, 0x07	; 7
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	ff 90       	pop	r15
    26ac:	ef 90       	pop	r14
    26ae:	08 95       	ret

000026b0 <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
    26b0:	ef 92       	push	r14
    26b2:	ff 92       	push	r15
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	00 d0       	rcall	.+0      	; 0x26be <_ZN6String6concatEh+0xe>
    26be:	0f 92       	push	r0
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	7c 01       	movw	r14, r24
    26c6:	86 2f       	mov	r24, r22
{
	char buf[4];
	itoa(num, buf, 10);
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	8e 01       	movw	r16, r28
    26cc:	0f 5f       	subi	r16, 0xFF	; 255
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	b8 01       	movw	r22, r16
    26d2:	4a e0       	ldi	r20, 0x0A	; 10
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <itoa>
	return concat(buf, strlen(buf));
    26da:	f8 01       	movw	r30, r16
    26dc:	01 90       	ld	r0, Z+
    26de:	00 20       	and	r0, r0
    26e0:	e9 f7       	brne	.-6      	; 0x26dc <_ZN6String6concatEh+0x2c>
    26e2:	31 97       	sbiw	r30, 0x01	; 1
    26e4:	e0 1b       	sub	r30, r16
    26e6:	f1 0b       	sbc	r31, r17
    26e8:	c7 01       	movw	r24, r14
    26ea:	b8 01       	movw	r22, r16
    26ec:	af 01       	movw	r20, r30
    26ee:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6String6concatEPKcj>
}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	08 95       	ret

00002708 <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	0f 92       	push	r0
    270e:	0f 92       	push	r0
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
    2714:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    2716:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    2718:	be 01       	movw	r22, r28
    271a:	6f 5f       	subi	r22, 0xFF	; 255
    271c:	7f 4f       	sbci	r23, 0xFF	; 255
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6String6concatEPKcj>
}
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    2730:	61 15       	cp	r22, r1
    2732:	71 05       	cpc	r23, r1
    2734:	11 f4       	brne	.+4      	; 0x273a <_ZN6String6concatEPKc+0xa>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	08 95       	ret
	return concat(cstr, strlen(cstr));
    273a:	db 01       	movw	r26, r22
    273c:	0d 90       	ld	r0, X+
    273e:	00 20       	and	r0, r0
    2740:	e9 f7       	brne	.-6      	; 0x273c <_ZN6String6concatEPKc+0xc>
    2742:	11 97       	sbiw	r26, 0x01	; 1
    2744:	a6 1b       	sub	r26, r22
    2746:	b7 0b       	sbc	r27, r23
    2748:	ad 01       	movw	r20, r26
    274a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6String6concatEPKcj>
}
    274e:	08 95       	ret

00002750 <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
    2750:	fb 01       	movw	r30, r22
{
	return concat(s.buffer, s.len);
    2752:	60 81       	ld	r22, Z
    2754:	71 81       	ldd	r23, Z+1	; 0x01
    2756:	44 81       	ldd	r20, Z+4	; 0x04
    2758:	55 81       	ldd	r21, Z+5	; 0x05
    275a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6String6concatEPKcj>
}
    275e:	08 95       	ret

00002760 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    2766:	88 81       	ld	r24, Y
    2768:	99 81       	ldd	r25, Y+1	; 0x01
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	11 f0       	breq	.+4      	; 0x2772 <_ZN6String10invalidateEv+0x12>
    276e:	0e 94 15 18 	call	0x302a	; 0x302a <free>
	buffer = NULL;
    2772:	19 82       	std	Y+1, r1	; 0x01
    2774:	18 82       	st	Y, r1
	capacity = len = 0;
    2776:	1d 82       	std	Y+5, r1	; 0x05
    2778:	1c 82       	std	Y+4, r1	; 0x04
    277a:	1b 82       	std	Y+3, r1	; 0x03
    277c:	1a 82       	std	Y+2, r1	; 0x02
}
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	08 95       	ret

00002784 <_ZplRK15StringSumHelperm>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	18 2f       	mov	r17, r24
    278a:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    278c:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN6String6concatEm>
    2790:	88 23       	and	r24, r24
    2792:	21 f4       	brne	.+8      	; 0x279c <_ZplRK15StringSumHelperm+0x18>
    2794:	81 2f       	mov	r24, r17
    2796:	90 2f       	mov	r25, r16
    2798:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
	return a;
}
    279c:	81 2f       	mov	r24, r17
    279e:	90 2f       	mov	r25, r16
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <_ZplRK15StringSumHelperl>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	18 2f       	mov	r17, r24
    27ac:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    27ae:	0e 94 c8 12 	call	0x2590	; 0x2590 <_ZN6String6concatEl>
    27b2:	88 23       	and	r24, r24
    27b4:	21 f4       	brne	.+8      	; 0x27be <_ZplRK15StringSumHelperl+0x18>
    27b6:	81 2f       	mov	r24, r17
    27b8:	90 2f       	mov	r25, r16
    27ba:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
	return a;
}
    27be:	81 2f       	mov	r24, r17
    27c0:	90 2f       	mov	r25, r16
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	08 95       	ret

000027c8 <_ZplRK15StringSumHelperj>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	18 2f       	mov	r17, r24
    27ce:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    27d0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <_ZN6String6concatEj>
    27d4:	88 23       	and	r24, r24
    27d6:	21 f4       	brne	.+8      	; 0x27e0 <_ZplRK15StringSumHelperj+0x18>
    27d8:	81 2f       	mov	r24, r17
    27da:	90 2f       	mov	r25, r16
    27dc:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
	return a;
}
    27e0:	81 2f       	mov	r24, r17
    27e2:	90 2f       	mov	r25, r16
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	08 95       	ret

000027ea <_ZplRK15StringSumHelperi>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	18 2f       	mov	r17, r24
    27f0:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    27f2:	0e 94 27 13 	call	0x264e	; 0x264e <_ZN6String6concatEi>
    27f6:	88 23       	and	r24, r24
    27f8:	21 f4       	brne	.+8      	; 0x2802 <_ZplRK15StringSumHelperi+0x18>
    27fa:	81 2f       	mov	r24, r17
    27fc:	90 2f       	mov	r25, r16
    27fe:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
	return a;
}
    2802:	81 2f       	mov	r24, r17
    2804:	90 2f       	mov	r25, r16
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	08 95       	ret

0000280c <_ZplRK15StringSumHelperh>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	18 2f       	mov	r17, r24
    2812:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    2814:	0e 94 58 13 	call	0x26b0	; 0x26b0 <_ZN6String6concatEh>
    2818:	88 23       	and	r24, r24
    281a:	21 f4       	brne	.+8      	; 0x2824 <_ZplRK15StringSumHelperh+0x18>
    281c:	81 2f       	mov	r24, r17
    281e:	90 2f       	mov	r25, r16
    2820:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
	return a;
}
    2824:	81 2f       	mov	r24, r17
    2826:	90 2f       	mov	r25, r16
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	08 95       	ret

0000282e <_ZplRK15StringSumHelperc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	18 2f       	mov	r17, r24
    2834:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    2836:	0e 94 84 13 	call	0x2708	; 0x2708 <_ZN6String6concatEc>
    283a:	88 23       	and	r24, r24
    283c:	21 f4       	brne	.+8      	; 0x2846 <_ZplRK15StringSumHelperc+0x18>
    283e:	81 2f       	mov	r24, r17
    2840:	90 2f       	mov	r25, r16
    2842:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
	return a;
}
    2846:	81 2f       	mov	r24, r17
    2848:	90 2f       	mov	r25, r16
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	08 95       	ret

00002850 <_ZplRK15StringSumHelperPKc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	18 2f       	mov	r17, r24
    2856:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    2858:	61 15       	cp	r22, r1
    285a:	71 05       	cpc	r23, r1
    285c:	61 f0       	breq	.+24     	; 0x2876 <_ZplRK15StringSumHelperPKc+0x26>
    285e:	db 01       	movw	r26, r22
    2860:	0d 90       	ld	r0, X+
    2862:	00 20       	and	r0, r0
    2864:	e9 f7       	brne	.-6      	; 0x2860 <_ZplRK15StringSumHelperPKc+0x10>
    2866:	11 97       	sbiw	r26, 0x01	; 1
    2868:	a6 1b       	sub	r26, r22
    286a:	b7 0b       	sbc	r27, r23
    286c:	ad 01       	movw	r20, r26
    286e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6String6concatEPKcj>
    2872:	88 23       	and	r24, r24
    2874:	21 f4       	brne	.+8      	; 0x287e <_ZplRK15StringSumHelperPKc+0x2e>
    2876:	81 2f       	mov	r24, r17
    2878:	90 2f       	mov	r25, r16
    287a:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
	return a;
}
    287e:	81 2f       	mov	r24, r17
    2880:	90 2f       	mov	r25, r16
    2882:	1f 91       	pop	r17
    2884:	0f 91       	pop	r16
    2886:	08 95       	ret

00002888 <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	18 2f       	mov	r17, r24
    288e:	09 2f       	mov	r16, r25
    2890:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    2892:	60 81       	ld	r22, Z
    2894:	71 81       	ldd	r23, Z+1	; 0x01
    2896:	44 81       	ldd	r20, Z+4	; 0x04
    2898:	55 81       	ldd	r21, Z+5	; 0x05
    289a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN6String6concatEPKcj>
    289e:	88 23       	and	r24, r24
    28a0:	21 f4       	brne	.+8      	; 0x28aa <_ZplRK15StringSumHelperRK6String+0x22>
    28a2:	81 2f       	mov	r24, r17
    28a4:	90 2f       	mov	r25, r16
    28a6:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
	return a;
}
    28aa:	81 2f       	mov	r24, r17
    28ac:	90 2f       	mov	r25, r16
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	08 95       	ret

000028b4 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    28b4:	ef 92       	push	r14
    28b6:	ff 92       	push	r15
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
    28bc:	cf 93       	push	r28
    28be:	df 93       	push	r29
    28c0:	ec 01       	movw	r28, r24
    28c2:	7b 01       	movw	r14, r22
    28c4:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    28c6:	ba 01       	movw	r22, r20
    28c8:	0e 94 4d 12 	call	0x249a	; 0x249a <_ZN6String7reserveEj>
    28cc:	88 23       	and	r24, r24
    28ce:	21 f4       	brne	.+8      	; 0x28d8 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    28d0:	ce 01       	movw	r24, r28
    28d2:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
    28d6:	07 c0       	rjmp	.+14     	; 0x28e6 <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    28d8:	1d 83       	std	Y+5, r17	; 0x05
    28da:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    28dc:	88 81       	ld	r24, Y
    28de:	99 81       	ldd	r25, Y+1	; 0x01
    28e0:	b7 01       	movw	r22, r14
    28e2:	0e 94 87 1a 	call	0x350e	; 0x350e <strcpy>
	return *this;
}
    28e6:	ce 01       	movw	r24, r28
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	ff 90       	pop	r15
    28f2:	ef 90       	pop	r14
    28f4:	08 95       	ret

000028f6 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    28fc:	19 82       	std	Y+1, r1	; 0x01
    28fe:	18 82       	st	Y, r1
	capacity = 0;
    2900:	1b 82       	std	Y+3, r1	; 0x03
    2902:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    2904:	1d 82       	std	Y+5, r1	; 0x05
    2906:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    2908:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    290a:	61 15       	cp	r22, r1
    290c:	71 05       	cpc	r23, r1
    290e:	51 f0       	breq	.+20     	; 0x2924 <_ZN6StringC1EPKc+0x2e>
    2910:	db 01       	movw	r26, r22
    2912:	0d 90       	ld	r0, X+
    2914:	00 20       	and	r0, r0
    2916:	e9 f7       	brne	.-6      	; 0x2912 <_ZN6StringC1EPKc+0x1c>
    2918:	11 97       	sbiw	r26, 0x01	; 1
    291a:	a6 1b       	sub	r26, r22
    291c:	b7 0b       	sbc	r27, r23
    291e:	ad 01       	movw	r20, r26
    2920:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN6String4copyEPKcj>
}
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	08 95       	ret

0000292a <_ZN6StringC2EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2930:	19 82       	std	Y+1, r1	; 0x01
    2932:	18 82       	st	Y, r1
	capacity = 0;
    2934:	1b 82       	std	Y+3, r1	; 0x03
    2936:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    2938:	1d 82       	std	Y+5, r1	; 0x05
    293a:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    293c:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    293e:	61 15       	cp	r22, r1
    2940:	71 05       	cpc	r23, r1
    2942:	51 f0       	breq	.+20     	; 0x2958 <_ZN6StringC2EPKc+0x2e>
    2944:	db 01       	movw	r26, r22
    2946:	0d 90       	ld	r0, X+
    2948:	00 20       	and	r0, r0
    294a:	e9 f7       	brne	.-6      	; 0x2946 <_ZN6StringC2EPKc+0x1c>
    294c:	11 97       	sbiw	r26, 0x01	; 1
    294e:	a6 1b       	sub	r26, r22
    2950:	b7 0b       	sbc	r27, r23
    2952:	ad 01       	movw	r20, r26
    2954:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN6String4copyEPKcj>
}
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	08 95       	ret

0000295e <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	18 2f       	mov	r17, r24
    2964:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
    2966:	61 15       	cp	r22, r1
    2968:	71 05       	cpc	r23, r1
    296a:	59 f0       	breq	.+22     	; 0x2982 <_ZN6StringaSEPKc+0x24>
    296c:	db 01       	movw	r26, r22
    296e:	0d 90       	ld	r0, X+
    2970:	00 20       	and	r0, r0
    2972:	e9 f7       	brne	.-6      	; 0x296e <_ZN6StringaSEPKc+0x10>
    2974:	11 97       	sbiw	r26, 0x01	; 1
    2976:	a6 1b       	sub	r26, r22
    2978:	b7 0b       	sbc	r27, r23
    297a:	ad 01       	movw	r20, r26
    297c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN6String4copyEPKcj>
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <_ZN6StringaSEPKc+0x28>
	else invalidate();
    2982:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
	
	return *this;
}
    2986:	81 2f       	mov	r24, r17
    2988:	90 2f       	mov	r25, r16
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	08 95       	ret

00002990 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    2990:	ef 92       	push	r14
    2992:	ff 92       	push	r15
    2994:	0f 93       	push	r16
    2996:	1f 93       	push	r17
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	a1 97       	sbiw	r28, 0x21	; 33
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	de bf       	out	0x3e, r29	; 62
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	cd bf       	out	0x3d, r28	; 61
    29ac:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    29ae:	fc 01       	movw	r30, r24
    29b0:	11 82       	std	Z+1, r1	; 0x01
    29b2:	10 82       	st	Z, r1
	capacity = 0;
    29b4:	13 82       	std	Z+3, r1	; 0x03
    29b6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    29b8:	15 82       	std	Z+5, r1	; 0x05
    29ba:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    29bc:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    29be:	cb 01       	movw	r24, r22
    29c0:	ba 01       	movw	r22, r20
    29c2:	7e 01       	movw	r14, r28
    29c4:	08 94       	sec
    29c6:	e1 1c       	adc	r14, r1
    29c8:	f1 1c       	adc	r15, r1
    29ca:	a7 01       	movw	r20, r14
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	0e 94 3a 1b 	call	0x3674	; 0x3674 <ultoa>
	*this = buf;
    29d2:	c8 01       	movw	r24, r16
    29d4:	b7 01       	movw	r22, r14
    29d6:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    29da:	a1 96       	adiw	r28, 0x21	; 33
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	cf 91       	pop	r28
    29e8:	df 91       	pop	r29
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	08 95       	ret

000029f4 <_ZN6StringC2Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    29f4:	ef 92       	push	r14
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
    2a04:	a1 97       	sbiw	r28, 0x21	; 33
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2a12:	fc 01       	movw	r30, r24
    2a14:	11 82       	std	Z+1, r1	; 0x01
    2a16:	10 82       	st	Z, r1
	capacity = 0;
    2a18:	13 82       	std	Z+3, r1	; 0x03
    2a1a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2a1c:	15 82       	std	Z+5, r1	; 0x05
    2a1e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2a20:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    2a22:	cb 01       	movw	r24, r22
    2a24:	ba 01       	movw	r22, r20
    2a26:	7e 01       	movw	r14, r28
    2a28:	08 94       	sec
    2a2a:	e1 1c       	adc	r14, r1
    2a2c:	f1 1c       	adc	r15, r1
    2a2e:	a7 01       	movw	r20, r14
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	0e 94 3a 1b 	call	0x3674	; 0x3674 <ultoa>
	*this = buf;
    2a36:	c8 01       	movw	r24, r16
    2a38:	b7 01       	movw	r22, r14
    2a3a:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2a3e:	a1 96       	adiw	r28, 0x21	; 33
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	08 95       	ret

00002a58 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    2a58:	ef 92       	push	r14
    2a5a:	ff 92       	push	r15
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	a2 97       	sbiw	r28, 0x22	; 34
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2a76:	fc 01       	movw	r30, r24
    2a78:	11 82       	std	Z+1, r1	; 0x01
    2a7a:	10 82       	st	Z, r1
	capacity = 0;
    2a7c:	13 82       	std	Z+3, r1	; 0x03
    2a7e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2a80:	15 82       	std	Z+5, r1	; 0x05
    2a82:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2a84:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    2a86:	cb 01       	movw	r24, r22
    2a88:	ba 01       	movw	r22, r20
    2a8a:	7e 01       	movw	r14, r28
    2a8c:	08 94       	sec
    2a8e:	e1 1c       	adc	r14, r1
    2a90:	f1 1c       	adc	r15, r1
    2a92:	a7 01       	movw	r20, r14
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <ltoa>
	*this = buf;
    2a9a:	c8 01       	movw	r24, r16
    2a9c:	b7 01       	movw	r22, r14
    2a9e:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2aa2:	a2 96       	adiw	r28, 0x22	; 34
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	ff 90       	pop	r15
    2ab8:	ef 90       	pop	r14
    2aba:	08 95       	ret

00002abc <_ZN6StringC2Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    2abc:	ef 92       	push	r14
    2abe:	ff 92       	push	r15
    2ac0:	0f 93       	push	r16
    2ac2:	1f 93       	push	r17
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	a2 97       	sbiw	r28, 0x22	; 34
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2ada:	fc 01       	movw	r30, r24
    2adc:	11 82       	std	Z+1, r1	; 0x01
    2ade:	10 82       	st	Z, r1
	capacity = 0;
    2ae0:	13 82       	std	Z+3, r1	; 0x03
    2ae2:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2ae4:	15 82       	std	Z+5, r1	; 0x05
    2ae6:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2ae8:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    2aea:	cb 01       	movw	r24, r22
    2aec:	ba 01       	movw	r22, r20
    2aee:	7e 01       	movw	r14, r28
    2af0:	08 94       	sec
    2af2:	e1 1c       	adc	r14, r1
    2af4:	f1 1c       	adc	r15, r1
    2af6:	a7 01       	movw	r20, r14
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <ltoa>
	*this = buf;
    2afe:	c8 01       	movw	r24, r16
    2b00:	b7 01       	movw	r22, r14
    2b02:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2b06:	a2 96       	adiw	r28, 0x22	; 34
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	08 95       	ret

00002b20 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    2b20:	ef 92       	push	r14
    2b22:	ff 92       	push	r15
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	61 97       	sbiw	r28, 0x11	; 17
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	8c 01       	movw	r16, r24
    2b3e:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2b40:	f8 01       	movw	r30, r16
    2b42:	11 82       	std	Z+1, r1	; 0x01
    2b44:	10 82       	st	Z, r1
	capacity = 0;
    2b46:	13 82       	std	Z+3, r1	; 0x03
    2b48:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2b4a:	15 82       	std	Z+5, r1	; 0x05
    2b4c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2b4e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    2b50:	7e 01       	movw	r14, r28
    2b52:	08 94       	sec
    2b54:	e1 1c       	adc	r14, r1
    2b56:	f1 1c       	adc	r15, r1
    2b58:	b7 01       	movw	r22, r14
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	0e 94 5f 1b 	call	0x36be	; 0x36be <utoa>
	*this = buf;
    2b60:	c8 01       	movw	r24, r16
    2b62:	b7 01       	movw	r22, r14
    2b64:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2b68:	61 96       	adiw	r28, 0x11	; 17
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	1f 91       	pop	r17
    2b7a:	0f 91       	pop	r16
    2b7c:	ff 90       	pop	r15
    2b7e:	ef 90       	pop	r14
    2b80:	08 95       	ret

00002b82 <_ZN6StringC2Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	61 97       	sbiw	r28, 0x11	; 17
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	8c 01       	movw	r16, r24
    2ba0:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2ba2:	f8 01       	movw	r30, r16
    2ba4:	11 82       	std	Z+1, r1	; 0x01
    2ba6:	10 82       	st	Z, r1
	capacity = 0;
    2ba8:	13 82       	std	Z+3, r1	; 0x03
    2baa:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2bac:	15 82       	std	Z+5, r1	; 0x05
    2bae:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2bb0:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    2bb2:	7e 01       	movw	r14, r28
    2bb4:	08 94       	sec
    2bb6:	e1 1c       	adc	r14, r1
    2bb8:	f1 1c       	adc	r15, r1
    2bba:	b7 01       	movw	r22, r14
    2bbc:	50 e0       	ldi	r21, 0x00	; 0
    2bbe:	0e 94 5f 1b 	call	0x36be	; 0x36be <utoa>
	*this = buf;
    2bc2:	c8 01       	movw	r24, r16
    2bc4:	b7 01       	movw	r22, r14
    2bc6:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2bca:	61 96       	adiw	r28, 0x11	; 17
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	ff 90       	pop	r15
    2be0:	ef 90       	pop	r14
    2be2:	08 95       	ret

00002be4 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    2be4:	ef 92       	push	r14
    2be6:	ff 92       	push	r15
    2be8:	0f 93       	push	r16
    2bea:	1f 93       	push	r17
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	62 97       	sbiw	r28, 0x12	; 18
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	8c 01       	movw	r16, r24
    2c02:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2c04:	f8 01       	movw	r30, r16
    2c06:	11 82       	std	Z+1, r1	; 0x01
    2c08:	10 82       	st	Z, r1
	capacity = 0;
    2c0a:	13 82       	std	Z+3, r1	; 0x03
    2c0c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2c0e:	15 82       	std	Z+5, r1	; 0x05
    2c10:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2c12:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    2c14:	7e 01       	movw	r14, r28
    2c16:	08 94       	sec
    2c18:	e1 1c       	adc	r14, r1
    2c1a:	f1 1c       	adc	r15, r1
    2c1c:	b7 01       	movw	r22, r14
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <itoa>
	*this = buf;
    2c24:	c8 01       	movw	r24, r16
    2c26:	b7 01       	movw	r22, r14
    2c28:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2c2c:	62 96       	adiw	r28, 0x12	; 18
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	ff 90       	pop	r15
    2c42:	ef 90       	pop	r14
    2c44:	08 95       	ret

00002c46 <_ZN6StringC2Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    2c46:	ef 92       	push	r14
    2c48:	ff 92       	push	r15
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	62 97       	sbiw	r28, 0x12	; 18
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	8c 01       	movw	r16, r24
    2c64:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2c66:	f8 01       	movw	r30, r16
    2c68:	11 82       	std	Z+1, r1	; 0x01
    2c6a:	10 82       	st	Z, r1
	capacity = 0;
    2c6c:	13 82       	std	Z+3, r1	; 0x03
    2c6e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2c70:	15 82       	std	Z+5, r1	; 0x05
    2c72:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2c74:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    2c76:	7e 01       	movw	r14, r28
    2c78:	08 94       	sec
    2c7a:	e1 1c       	adc	r14, r1
    2c7c:	f1 1c       	adc	r15, r1
    2c7e:	b7 01       	movw	r22, r14
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <itoa>
	*this = buf;
    2c86:	c8 01       	movw	r24, r16
    2c88:	b7 01       	movw	r22, r14
    2c8a:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2c8e:	62 96       	adiw	r28, 0x12	; 18
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	08 95       	ret

00002ca8 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    2ca8:	ef 92       	push	r14
    2caa:	ff 92       	push	r15
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	29 97       	sbiw	r28, 0x09	; 9
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	8c 01       	movw	r16, r24
    2cc6:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2cc8:	f8 01       	movw	r30, r16
    2cca:	11 82       	std	Z+1, r1	; 0x01
    2ccc:	10 82       	st	Z, r1
	capacity = 0;
    2cce:	13 82       	std	Z+3, r1	; 0x03
    2cd0:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2cd2:	15 82       	std	Z+5, r1	; 0x05
    2cd4:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2cd6:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	7e 01       	movw	r14, r28
    2cdc:	08 94       	sec
    2cde:	e1 1c       	adc	r14, r1
    2ce0:	f1 1c       	adc	r15, r1
    2ce2:	b7 01       	movw	r22, r14
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	0e 94 5f 1b 	call	0x36be	; 0x36be <utoa>
	*this = buf;
    2cea:	c8 01       	movw	r24, r16
    2cec:	b7 01       	movw	r22, r14
    2cee:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2cf2:	29 96       	adiw	r28, 0x09	; 9
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	1f 91       	pop	r17
    2d04:	0f 91       	pop	r16
    2d06:	ff 90       	pop	r15
    2d08:	ef 90       	pop	r14
    2d0a:	08 95       	ret

00002d0c <_ZN6StringC2Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    2d0c:	ef 92       	push	r14
    2d0e:	ff 92       	push	r15
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	29 97       	sbiw	r28, 0x09	; 9
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	8c 01       	movw	r16, r24
    2d2a:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2d2c:	f8 01       	movw	r30, r16
    2d2e:	11 82       	std	Z+1, r1	; 0x01
    2d30:	10 82       	st	Z, r1
	capacity = 0;
    2d32:	13 82       	std	Z+3, r1	; 0x03
    2d34:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2d36:	15 82       	std	Z+5, r1	; 0x05
    2d38:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2d3a:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	7e 01       	movw	r14, r28
    2d40:	08 94       	sec
    2d42:	e1 1c       	adc	r14, r1
    2d44:	f1 1c       	adc	r15, r1
    2d46:	b7 01       	movw	r22, r14
    2d48:	50 e0       	ldi	r21, 0x00	; 0
    2d4a:	0e 94 5f 1b 	call	0x36be	; 0x36be <utoa>
	*this = buf;
    2d4e:	c8 01       	movw	r24, r16
    2d50:	b7 01       	movw	r22, r14
    2d52:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2d56:	29 96       	adiw	r28, 0x09	; 9
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	ff 90       	pop	r15
    2d6c:	ef 90       	pop	r14
    2d6e:	08 95       	ret

00002d70 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	0f 92       	push	r0
    2d76:	0f 92       	push	r0
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2d7e:	11 82       	std	Z+1, r1	; 0x01
    2d80:	10 82       	st	Z, r1
	capacity = 0;
    2d82:	13 82       	std	Z+3, r1	; 0x03
    2d84:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2d86:	15 82       	std	Z+5, r1	; 0x05
    2d88:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2d8a:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    2d8c:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    2d8e:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    2d90:	be 01       	movw	r22, r28
    2d92:	6f 5f       	subi	r22, 0xFF	; 255
    2d94:	7f 4f       	sbci	r23, 0xFF	; 255
    2d96:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <_ZN6StringC2Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	0f 92       	push	r0
    2daa:	0f 92       	push	r0
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2db2:	11 82       	std	Z+1, r1	; 0x01
    2db4:	10 82       	st	Z, r1
	capacity = 0;
    2db6:	13 82       	std	Z+3, r1	; 0x03
    2db8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2dba:	15 82       	std	Z+5, r1	; 0x05
    2dbc:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2dbe:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    2dc0:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    2dc2:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    2dc4:	be 01       	movw	r22, r28
    2dc6:	6f 5f       	subi	r22, 0xFF	; 255
    2dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dca:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
}
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    2dd8:	bf 92       	push	r11
    2dda:	cf 92       	push	r12
    2ddc:	df 92       	push	r13
    2dde:	ef 92       	push	r14
    2de0:	ff 92       	push	r15
    2de2:	0f 93       	push	r16
    2de4:	1f 93       	push	r17
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	08 2f       	mov	r16, r24
    2dec:	b9 2e       	mov	r11, r25
    2dee:	6b 01       	movw	r12, r22
    2df0:	7a 01       	movw	r14, r20
    2df2:	e9 01       	movw	r28, r18
{
	if (left > right) {
    2df4:	24 17       	cp	r18, r20
    2df6:	35 07       	cpc	r19, r21
    2df8:	10 f4       	brcc	.+4      	; 0x2dfe <_ZNK6String9substringEjj+0x26>
    2dfa:	ea 01       	movw	r28, r20
    2dfc:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    2dfe:	80 2f       	mov	r24, r16
    2e00:	9b 2d       	mov	r25, r11
    2e02:	6e e0       	ldi	r22, 0x0E	; 14
    2e04:	72 e0       	ldi	r23, 0x02	; 2
    2e06:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_ZN6StringC1EPKc>
	if (left > len) return out;
    2e0a:	d6 01       	movw	r26, r12
    2e0c:	14 96       	adiw	r26, 0x04	; 4
    2e0e:	8d 91       	ld	r24, X+
    2e10:	9c 91       	ld	r25, X
    2e12:	15 97       	sbiw	r26, 0x05	; 5
    2e14:	8e 15       	cp	r24, r14
    2e16:	9f 05       	cpc	r25, r15
    2e18:	d0 f0       	brcs	.+52     	; 0x2e4e <_ZNK6String9substringEjj+0x76>
    2e1a:	8c 17       	cp	r24, r28
    2e1c:	9d 07       	cpc	r25, r29
    2e1e:	08 f4       	brcc	.+2      	; 0x2e22 <_ZNK6String9substringEjj+0x4a>
    2e20:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    2e22:	d6 01       	movw	r26, r12
    2e24:	ed 91       	ld	r30, X+
    2e26:	fc 91       	ld	r31, X
    2e28:	11 97       	sbiw	r26, 0x01	; 1
    2e2a:	ec 0f       	add	r30, r28
    2e2c:	fd 1f       	adc	r31, r29
    2e2e:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
    2e30:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    2e32:	6d 91       	ld	r22, X+
    2e34:	7c 91       	ld	r23, X
    2e36:	6e 0d       	add	r22, r14
    2e38:	7f 1d       	adc	r23, r15
    2e3a:	80 2f       	mov	r24, r16
    2e3c:	9b 2d       	mov	r25, r11
    2e3e:	0e 94 af 14 	call	0x295e	; 0x295e <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    2e42:	d6 01       	movw	r26, r12
    2e44:	ed 91       	ld	r30, X+
    2e46:	fc 91       	ld	r31, X
    2e48:	ec 0f       	add	r30, r28
    2e4a:	fd 1f       	adc	r31, r29
    2e4c:	10 83       	st	Z, r17
	return out;
}
    2e4e:	80 2f       	mov	r24, r16
    2e50:	9b 2d       	mov	r25, r11
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	ff 90       	pop	r15
    2e5c:	ef 90       	pop	r14
    2e5e:	df 90       	pop	r13
    2e60:	cf 90       	pop	r12
    2e62:	bf 90       	pop	r11
    2e64:	08 95       	ret

00002e66 <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
    2e66:	0f 93       	push	r16
    2e68:	1f 93       	push	r17
    2e6a:	8c 01       	movw	r16, r24
    2e6c:	fb 01       	movw	r30, r22
{
	return substring(left, len);
    2e6e:	24 81       	ldd	r18, Z+4	; 0x04
    2e70:	35 81       	ldd	r19, Z+5	; 0x05
    2e72:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZNK6String9substringEjj>
}
    2e76:	c8 01       	movw	r24, r16
    2e78:	1f 91       	pop	r17
    2e7a:	0f 91       	pop	r16
    2e7c:	08 95       	ret

00002e7e <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    2e7e:	cf 93       	push	r28
    2e80:	df 93       	push	r29
    2e82:	ec 01       	movw	r28, r24
    2e84:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    2e86:	86 17       	cp	r24, r22
    2e88:	97 07       	cpc	r25, r23
    2e8a:	61 f0       	breq	.+24     	; 0x2ea4 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2e8c:	60 81       	ld	r22, Z
    2e8e:	71 81       	ldd	r23, Z+1	; 0x01
    2e90:	61 15       	cp	r22, r1
    2e92:	71 05       	cpc	r23, r1
    2e94:	29 f0       	breq	.+10     	; 0x2ea0 <_ZN6StringaSERKS_+0x22>
    2e96:	44 81       	ldd	r20, Z+4	; 0x04
    2e98:	55 81       	ldd	r21, Z+5	; 0x05
    2e9a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN6String4copyEPKcj>
    2e9e:	02 c0       	rjmp	.+4      	; 0x2ea4 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    2ea0:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN6String10invalidateEv>
	
	return *this;
}
    2ea4:	ce 01       	movw	r24, r28
    2ea6:	df 91       	pop	r29
    2ea8:	cf 91       	pop	r28
    2eaa:	08 95       	ret

00002eac <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    2eac:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2eae:	11 82       	std	Z+1, r1	; 0x01
    2eb0:	10 82       	st	Z, r1
	capacity = 0;
    2eb2:	13 82       	std	Z+3, r1	; 0x03
    2eb4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2eb6:	15 82       	std	Z+5, r1	; 0x05
    2eb8:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2eba:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    2ebc:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <_ZN6StringaSERKS_>
}
    2ec0:	08 95       	ret

00002ec2 <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    2ec2:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2ec4:	11 82       	std	Z+1, r1	; 0x01
    2ec6:	10 82       	st	Z, r1
	capacity = 0;
    2ec8:	13 82       	std	Z+3, r1	; 0x03
    2eca:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2ecc:	15 82       	std	Z+5, r1	; 0x05
    2ece:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2ed0:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    2ed2:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <_ZN6StringaSERKS_>
}
    2ed6:	08 95       	ret

00002ed8 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    2ed8:	fc 01       	movw	r30, r24
{
	free(buffer);
    2eda:	80 81       	ld	r24, Z
    2edc:	91 81       	ldd	r25, Z+1	; 0x01
    2ede:	0e 94 15 18 	call	0x302a	; 0x302a <free>
}
    2ee2:	08 95       	ret

00002ee4 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    2ee4:	fc 01       	movw	r30, r24
{
	free(buffer);
    2ee6:	80 81       	ld	r24, Z
    2ee8:	91 81       	ldd	r25, Z+1	; 0x01
    2eea:	0e 94 15 18 	call	0x302a	; 0x302a <free>
}
    2eee:	08 95       	ret

00002ef0 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	bc 01       	movw	r22, r24
    2efa:	82 30       	cpi	r24, 0x02	; 2
    2efc:	91 05       	cpc	r25, r1
    2efe:	10 f4       	brcc	.+4      	; 0x2f04 <malloc+0x14>
    2f00:	62 e0       	ldi	r22, 0x02	; 2
    2f02:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    2f04:	e0 91 4a 03 	lds	r30, 0x034A
    2f08:	f0 91 4b 03 	lds	r31, 0x034B
    2f0c:	40 e0       	ldi	r20, 0x00	; 0
    2f0e:	50 e0       	ldi	r21, 0x00	; 0
    2f10:	a0 e0       	ldi	r26, 0x00	; 0
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	24 c0       	rjmp	.+72     	; 0x2f5e <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	86 17       	cp	r24, r22
    2f1c:	97 07       	cpc	r25, r23
    2f1e:	d0 f0       	brcs	.+52     	; 0x2f54 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    2f20:	86 17       	cp	r24, r22
    2f22:	97 07       	cpc	r25, r23
    2f24:	71 f4       	brne	.+28     	; 0x2f42 <malloc+0x52>
    2f26:	82 81       	ldd	r24, Z+2	; 0x02
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    2f2a:	10 97       	sbiw	r26, 0x00	; 0
    2f2c:	29 f0       	breq	.+10     	; 0x2f38 <malloc+0x48>
				fp2->nx = fp1->nx;
    2f2e:	13 96       	adiw	r26, 0x03	; 3
    2f30:	9c 93       	st	X, r25
    2f32:	8e 93       	st	-X, r24
    2f34:	12 97       	sbiw	r26, 0x02	; 2
    2f36:	2c c0       	rjmp	.+88     	; 0x2f90 <malloc+0xa0>
			else
				__flp = fp1->nx;
    2f38:	90 93 4b 03 	sts	0x034B, r25
    2f3c:	80 93 4a 03 	sts	0x034A, r24
    2f40:	27 c0       	rjmp	.+78     	; 0x2f90 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    2f42:	41 15       	cp	r20, r1
    2f44:	51 05       	cpc	r21, r1
    2f46:	19 f0       	breq	.+6      	; 0x2f4e <malloc+0x5e>
    2f48:	84 17       	cp	r24, r20
    2f4a:	95 07       	cpc	r25, r21
    2f4c:	18 f4       	brcc	.+6      	; 0x2f54 <malloc+0x64>
    2f4e:	8d 01       	movw	r16, r26
    2f50:	ac 01       	movw	r20, r24
    2f52:	ef 01       	movw	r28, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    2f54:	df 01       	movw	r26, r30
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	9c 01       	movw	r18, r24
    2f5c:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    2f5e:	30 97       	sbiw	r30, 0x00	; 0
    2f60:	d1 f6       	brne	.-76     	; 0x2f16 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    2f62:	41 15       	cp	r20, r1
    2f64:	51 05       	cpc	r21, r1
    2f66:	f9 f0       	breq	.+62     	; 0x2fa6 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    2f68:	ca 01       	movw	r24, r20
    2f6a:	86 1b       	sub	r24, r22
    2f6c:	97 0b       	sbc	r25, r23
    2f6e:	84 30       	cpi	r24, 0x04	; 4
    2f70:	91 05       	cpc	r25, r1
    2f72:	80 f4       	brcc	.+32     	; 0x2f94 <malloc+0xa4>
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    2f78:	01 15       	cp	r16, r1
    2f7a:	11 05       	cpc	r17, r1
    2f7c:	21 f0       	breq	.+8      	; 0x2f86 <malloc+0x96>
				sfp2->nx = sfp1->nx;
    2f7e:	f8 01       	movw	r30, r16
    2f80:	93 83       	std	Z+3, r25	; 0x03
    2f82:	82 83       	std	Z+2, r24	; 0x02
    2f84:	04 c0       	rjmp	.+8      	; 0x2f8e <malloc+0x9e>
			else
				__flp = sfp1->nx;
    2f86:	90 93 4b 03 	sts	0x034B, r25
    2f8a:	80 93 4a 03 	sts	0x034A, r24
			return &(sfp1->nx);
    2f8e:	fe 01       	movw	r30, r28
    2f90:	32 96       	adiw	r30, 0x02	; 2
    2f92:	45 c0       	rjmp	.+138    	; 0x301e <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    2f94:	fe 01       	movw	r30, r28
    2f96:	e8 0f       	add	r30, r24
    2f98:	f9 1f       	adc	r31, r25
    2f9a:	61 93       	st	Z+, r22
    2f9c:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    2f9e:	02 97       	sbiw	r24, 0x02	; 2
    2fa0:	99 83       	std	Y+1, r25	; 0x01
    2fa2:	88 83       	st	Y, r24
    2fa4:	3c c0       	rjmp	.+120    	; 0x301e <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    2fa6:	80 91 48 03 	lds	r24, 0x0348
    2faa:	90 91 49 03 	lds	r25, 0x0349
    2fae:	89 2b       	or	r24, r25
    2fb0:	41 f4       	brne	.+16     	; 0x2fc2 <malloc+0xd2>
		__brkval = __malloc_heap_start;
    2fb2:	80 91 19 03 	lds	r24, 0x0319
    2fb6:	90 91 1a 03 	lds	r25, 0x031A
    2fba:	90 93 49 03 	sts	0x0349, r25
    2fbe:	80 93 48 03 	sts	0x0348, r24
	cp = __malloc_heap_end;
    2fc2:	40 91 1b 03 	lds	r20, 0x031B
    2fc6:	50 91 1c 03 	lds	r21, 0x031C
	if (cp == 0)
    2fca:	41 15       	cp	r20, r1
    2fcc:	51 05       	cpc	r21, r1
    2fce:	41 f4       	brne	.+16     	; 0x2fe0 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    2fd0:	4d b7       	in	r20, 0x3d	; 61
    2fd2:	5e b7       	in	r21, 0x3e	; 62
    2fd4:	80 91 17 03 	lds	r24, 0x0317
    2fd8:	90 91 18 03 	lds	r25, 0x0318
    2fdc:	48 1b       	sub	r20, r24
    2fde:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    2fe0:	20 91 48 03 	lds	r18, 0x0348
    2fe4:	30 91 49 03 	lds	r19, 0x0349
    2fe8:	24 17       	cp	r18, r20
    2fea:	35 07       	cpc	r19, r21
    2fec:	b0 f4       	brcc	.+44     	; 0x301a <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    2fee:	ca 01       	movw	r24, r20
    2ff0:	82 1b       	sub	r24, r18
    2ff2:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    2ff4:	86 17       	cp	r24, r22
    2ff6:	97 07       	cpc	r25, r23
    2ff8:	80 f0       	brcs	.+32     	; 0x301a <malloc+0x12a>
    2ffa:	ab 01       	movw	r20, r22
    2ffc:	4e 5f       	subi	r20, 0xFE	; 254
    2ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    3000:	84 17       	cp	r24, r20
    3002:	95 07       	cpc	r25, r21
    3004:	50 f0       	brcs	.+20     	; 0x301a <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    3006:	42 0f       	add	r20, r18
    3008:	53 1f       	adc	r21, r19
    300a:	50 93 49 03 	sts	0x0349, r21
    300e:	40 93 48 03 	sts	0x0348, r20
		fp1->sz = len;
    3012:	f9 01       	movw	r30, r18
    3014:	61 93       	st	Z+, r22
    3016:	71 93       	st	Z+, r23
    3018:	02 c0       	rjmp	.+4      	; 0x301e <malloc+0x12e>
		return &(fp1->nx);
    301a:	e0 e0       	ldi	r30, 0x00	; 0
    301c:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    301e:	cf 01       	movw	r24, r30
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	08 95       	ret

0000302a <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	9c 01       	movw	r18, r24
    3030:	00 97       	sbiw	r24, 0x00	; 0
    3032:	09 f4       	brne	.+2      	; 0x3036 <free+0xc>
    3034:	8f c0       	rjmp	.+286    	; 0x3154 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    3036:	ec 01       	movw	r28, r24
    3038:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    303a:	1b 82       	std	Y+3, r1	; 0x03
    303c:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    303e:	60 91 4a 03 	lds	r22, 0x034A
    3042:	70 91 4b 03 	lds	r23, 0x034B
    3046:	61 15       	cp	r22, r1
    3048:	71 05       	cpc	r23, r1
    304a:	81 f4       	brne	.+32     	; 0x306c <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    304c:	88 81       	ld	r24, Y
    304e:	99 81       	ldd	r25, Y+1	; 0x01
    3050:	82 0f       	add	r24, r18
    3052:	93 1f       	adc	r25, r19
    3054:	20 91 48 03 	lds	r18, 0x0348
    3058:	30 91 49 03 	lds	r19, 0x0349
    305c:	28 17       	cp	r18, r24
    305e:	39 07       	cpc	r19, r25
    3060:	39 f5       	brne	.+78     	; 0x30b0 <free+0x86>
			__brkval = cpnew;
    3062:	d0 93 49 03 	sts	0x0349, r29
    3066:	c0 93 48 03 	sts	0x0348, r28
    306a:	74 c0       	rjmp	.+232    	; 0x3154 <free+0x12a>
		else
			__flp = fpnew;
    306c:	db 01       	movw	r26, r22
    306e:	40 e0       	ldi	r20, 0x00	; 0
    3070:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    3072:	ac 17       	cp	r26, r28
    3074:	bd 07       	cpc	r27, r29
    3076:	08 f1       	brcs	.+66     	; 0x30ba <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    3078:	bb 83       	std	Y+3, r27	; 0x03
    307a:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    307c:	fe 01       	movw	r30, r28
    307e:	21 91       	ld	r18, Z+
    3080:	31 91       	ld	r19, Z+
    3082:	e2 0f       	add	r30, r18
    3084:	f3 1f       	adc	r31, r19
    3086:	ae 17       	cp	r26, r30
    3088:	bf 07       	cpc	r27, r31
    308a:	79 f4       	brne	.+30     	; 0x30aa <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    308c:	8d 91       	ld	r24, X+
    308e:	9c 91       	ld	r25, X
    3090:	11 97       	sbiw	r26, 0x01	; 1
    3092:	28 0f       	add	r18, r24
    3094:	39 1f       	adc	r19, r25
    3096:	2e 5f       	subi	r18, 0xFE	; 254
    3098:	3f 4f       	sbci	r19, 0xFF	; 255
    309a:	39 83       	std	Y+1, r19	; 0x01
    309c:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    309e:	12 96       	adiw	r26, 0x02	; 2
    30a0:	8d 91       	ld	r24, X+
    30a2:	9c 91       	ld	r25, X
    30a4:	13 97       	sbiw	r26, 0x03	; 3
    30a6:	9b 83       	std	Y+3, r25	; 0x03
    30a8:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    30aa:	41 15       	cp	r20, r1
    30ac:	51 05       	cpc	r21, r1
    30ae:	71 f4       	brne	.+28     	; 0x30cc <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    30b0:	d0 93 4b 03 	sts	0x034B, r29
    30b4:	c0 93 4a 03 	sts	0x034A, r28
    30b8:	4d c0       	rjmp	.+154    	; 0x3154 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    30ba:	12 96       	adiw	r26, 0x02	; 2
    30bc:	8d 91       	ld	r24, X+
    30be:	9c 91       	ld	r25, X
    30c0:	13 97       	sbiw	r26, 0x03	; 3
    30c2:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	11 f0       	breq	.+4      	; 0x30cc <free+0xa2>
    30c8:	dc 01       	movw	r26, r24
    30ca:	d3 cf       	rjmp	.-90     	; 0x3072 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    30cc:	da 01       	movw	r26, r20
    30ce:	13 96       	adiw	r26, 0x03	; 3
    30d0:	dc 93       	st	X, r29
    30d2:	ce 93       	st	-X, r28
    30d4:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    30d6:	fa 01       	movw	r30, r20
    30d8:	21 91       	ld	r18, Z+
    30da:	31 91       	ld	r19, Z+
    30dc:	e2 0f       	add	r30, r18
    30de:	f3 1f       	adc	r31, r19
    30e0:	ce 17       	cp	r28, r30
    30e2:	df 07       	cpc	r29, r31
    30e4:	69 f4       	brne	.+26     	; 0x3100 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    30e6:	88 81       	ld	r24, Y
    30e8:	99 81       	ldd	r25, Y+1	; 0x01
    30ea:	28 0f       	add	r18, r24
    30ec:	39 1f       	adc	r19, r25
    30ee:	2e 5f       	subi	r18, 0xFE	; 254
    30f0:	3f 4f       	sbci	r19, 0xFF	; 255
    30f2:	fa 01       	movw	r30, r20
    30f4:	31 83       	std	Z+1, r19	; 0x01
    30f6:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    30f8:	8a 81       	ldd	r24, Y+2	; 0x02
    30fa:	9b 81       	ldd	r25, Y+3	; 0x03
    30fc:	93 83       	std	Z+3, r25	; 0x03
    30fe:	82 83       	std	Z+2, r24	; 0x02
    3100:	e0 e0       	ldi	r30, 0x00	; 0
    3102:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    3104:	db 01       	movw	r26, r22
    3106:	12 96       	adiw	r26, 0x02	; 2
    3108:	8d 91       	ld	r24, X+
    310a:	9c 91       	ld	r25, X
    310c:	13 97       	sbiw	r26, 0x03	; 3
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	19 f0       	breq	.+6      	; 0x3118 <free+0xee>
    3112:	bc 01       	movw	r22, r24
    3114:	fd 01       	movw	r30, r26
    3116:	f6 cf       	rjmp	.-20     	; 0x3104 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    3118:	ab 01       	movw	r20, r22
    311a:	4e 5f       	subi	r20, 0xFE	; 254
    311c:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    311e:	db 01       	movw	r26, r22
    3120:	8d 91       	ld	r24, X+
    3122:	9c 91       	ld	r25, X
    3124:	84 0f       	add	r24, r20
    3126:	95 1f       	adc	r25, r21
    3128:	20 91 48 03 	lds	r18, 0x0348
    312c:	30 91 49 03 	lds	r19, 0x0349
    3130:	28 17       	cp	r18, r24
    3132:	39 07       	cpc	r19, r25
    3134:	79 f4       	brne	.+30     	; 0x3154 <free+0x12a>
		if (fp2 == NULL)
    3136:	30 97       	sbiw	r30, 0x00	; 0
    3138:	29 f4       	brne	.+10     	; 0x3144 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    313a:	10 92 4b 03 	sts	0x034B, r1
    313e:	10 92 4a 03 	sts	0x034A, r1
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <free+0x11e>
		else
			fp2->nx = NULL;
    3144:	13 82       	std	Z+3, r1	; 0x03
    3146:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    3148:	42 50       	subi	r20, 0x02	; 2
    314a:	50 40       	sbci	r21, 0x00	; 0
    314c:	50 93 49 03 	sts	0x0349, r21
    3150:	40 93 48 03 	sts	0x0348, r20
	}
}
    3154:	df 91       	pop	r29
    3156:	cf 91       	pop	r28
    3158:	08 95       	ret

0000315a <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    315a:	6f 92       	push	r6
    315c:	7f 92       	push	r7
    315e:	8f 92       	push	r8
    3160:	9f 92       	push	r9
    3162:	af 92       	push	r10
    3164:	bf 92       	push	r11
    3166:	cf 92       	push	r12
    3168:	df 92       	push	r13
    316a:	ef 92       	push	r14
    316c:	ff 92       	push	r15
    316e:	0f 93       	push	r16
    3170:	1f 93       	push	r17
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	8c 01       	movw	r16, r24
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	29 f4       	brne	.+10     	; 0x3186 <realloc+0x2c>
		return malloc(len);
    317c:	cb 01       	movw	r24, r22
    317e:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <malloc>
    3182:	8c 01       	movw	r16, r24
    3184:	bb c0       	rjmp	.+374    	; 0x32fc <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    3186:	8e ef       	ldi	r24, 0xFE	; 254
    3188:	e8 2e       	mov	r14, r24
    318a:	8f ef       	ldi	r24, 0xFF	; 255
    318c:	f8 2e       	mov	r15, r24
    318e:	e0 0e       	add	r14, r16
    3190:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    3192:	48 01       	movw	r8, r16
    3194:	86 0e       	add	r8, r22
    3196:	97 1e       	adc	r9, r23
	if (cp < cp1)
    3198:	8e 14       	cp	r8, r14
    319a:	9f 04       	cpc	r9, r15
    319c:	08 f4       	brcc	.+2      	; 0x31a0 <realloc+0x46>
    319e:	ac c0       	rjmp	.+344    	; 0x32f8 <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    31a0:	d7 01       	movw	r26, r14
    31a2:	4d 91       	ld	r20, X+
    31a4:	5c 91       	ld	r21, X
    31a6:	11 97       	sbiw	r26, 0x01	; 1
    31a8:	46 17       	cp	r20, r22
    31aa:	57 07       	cpc	r21, r23
    31ac:	b8 f0       	brcs	.+46     	; 0x31dc <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    31ae:	45 30       	cpi	r20, 0x05	; 5
    31b0:	51 05       	cpc	r21, r1
    31b2:	08 f4       	brcc	.+2      	; 0x31b6 <realloc+0x5c>
    31b4:	a3 c0       	rjmp	.+326    	; 0x32fc <realloc+0x1a2>
    31b6:	ca 01       	movw	r24, r20
    31b8:	04 97       	sbiw	r24, 0x04	; 4
    31ba:	86 17       	cp	r24, r22
    31bc:	97 07       	cpc	r25, r23
    31be:	08 f4       	brcc	.+2      	; 0x31c2 <realloc+0x68>
    31c0:	9d c0       	rjmp	.+314    	; 0x32fc <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    31c2:	42 50       	subi	r20, 0x02	; 2
    31c4:	50 40       	sbci	r21, 0x00	; 0
    31c6:	46 1b       	sub	r20, r22
    31c8:	57 0b       	sbc	r21, r23
    31ca:	f4 01       	movw	r30, r8
    31cc:	41 93       	st	Z+, r20
    31ce:	51 93       	st	Z+, r21
		fp1->sz = len;
    31d0:	6d 93       	st	X+, r22
    31d2:	7c 93       	st	X, r23
		free(&(fp2->nx));
    31d4:	cf 01       	movw	r24, r30
    31d6:	0e 94 15 18 	call	0x302a	; 0x302a <free>
    31da:	90 c0       	rjmp	.+288    	; 0x32fc <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    31dc:	5b 01       	movw	r10, r22
    31de:	a4 1a       	sub	r10, r20
    31e0:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    31e2:	38 01       	movw	r6, r16
    31e4:	64 0e       	add	r6, r20
    31e6:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    31e8:	a0 91 4a 03 	lds	r26, 0x034A
    31ec:	b0 91 4b 03 	lds	r27, 0x034B
    31f0:	e0 e0       	ldi	r30, 0x00	; 0
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	cc 24       	eor	r12, r12
    31f6:	dd 24       	eor	r13, r13
    31f8:	47 c0       	rjmp	.+142    	; 0x3288 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    31fa:	a6 15       	cp	r26, r6
    31fc:	b7 05       	cpc	r27, r7
    31fe:	a9 f5       	brne	.+106    	; 0x326a <realloc+0x110>
    3200:	cd 91       	ld	r28, X+
    3202:	dc 91       	ld	r29, X
    3204:	11 97       	sbiw	r26, 0x01	; 1
    3206:	ce 01       	movw	r24, r28
    3208:	02 96       	adiw	r24, 0x02	; 2
    320a:	8a 15       	cp	r24, r10
    320c:	9b 05       	cpc	r25, r11
    320e:	68 f1       	brcs	.+90     	; 0x326a <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    3210:	ce 01       	movw	r24, r28
    3212:	8a 19       	sub	r24, r10
    3214:	9b 09       	sbc	r25, r11
    3216:	02 96       	adiw	r24, 0x02	; 2
    3218:	12 96       	adiw	r26, 0x02	; 2
    321a:	2c 91       	ld	r18, X
    321c:	12 97       	sbiw	r26, 0x02	; 2
    321e:	13 96       	adiw	r26, 0x03	; 3
    3220:	3c 91       	ld	r19, X
    3222:	05 97       	sbiw	r24, 0x05	; 5
    3224:	58 f0       	brcs	.+22     	; 0x323c <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    3226:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    3228:	22 83       	std	Z+2, r18	; 0x02
    322a:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    322c:	ca 19       	sub	r28, r10
    322e:	db 09       	sbc	r29, r11
    3230:	d1 83       	std	Z+1, r29	; 0x01
    3232:	c0 83       	st	Z, r28
				fp1->sz = len;
    3234:	d7 01       	movw	r26, r14
    3236:	6d 93       	st	X+, r22
    3238:	7c 93       	st	X, r23
    323a:	09 c0       	rjmp	.+18     	; 0x324e <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    323c:	4e 5f       	subi	r20, 0xFE	; 254
    323e:	5f 4f       	sbci	r21, 0xFF	; 255
    3240:	4c 0f       	add	r20, r28
    3242:	5d 1f       	adc	r21, r29
    3244:	f7 01       	movw	r30, r14
    3246:	51 83       	std	Z+1, r21	; 0x01
    3248:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    324a:	c9 01       	movw	r24, r18
    324c:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    324e:	c1 14       	cp	r12, r1
    3250:	d1 04       	cpc	r13, r1
    3252:	31 f0       	breq	.+12     	; 0x3260 <realloc+0x106>
				ofp3->nx = fp2;
    3254:	d6 01       	movw	r26, r12
    3256:	13 96       	adiw	r26, 0x03	; 3
    3258:	fc 93       	st	X, r31
    325a:	ee 93       	st	-X, r30
    325c:	12 97       	sbiw	r26, 0x02	; 2
    325e:	4e c0       	rjmp	.+156    	; 0x32fc <realloc+0x1a2>
			else
				__flp = fp2;
    3260:	f0 93 4b 03 	sts	0x034B, r31
    3264:	e0 93 4a 03 	sts	0x034A, r30
    3268:	49 c0       	rjmp	.+146    	; 0x32fc <realloc+0x1a2>
    326a:	8d 91       	ld	r24, X+
    326c:	9c 91       	ld	r25, X
    326e:	11 97       	sbiw	r26, 0x01	; 1
    3270:	e8 17       	cp	r30, r24
    3272:	f9 07       	cpc	r31, r25
    3274:	08 f4       	brcc	.+2      	; 0x3278 <realloc+0x11e>
    3276:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    3278:	6d 01       	movw	r12, r26
    327a:	12 96       	adiw	r26, 0x02	; 2
    327c:	8c 91       	ld	r24, X
    327e:	12 97       	sbiw	r26, 0x02	; 2
    3280:	13 96       	adiw	r26, 0x03	; 3
    3282:	9c 91       	ld	r25, X
    3284:	9c 01       	movw	r18, r24
    3286:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    3288:	10 97       	sbiw	r26, 0x00	; 0
    328a:	09 f0       	breq	.+2      	; 0x328e <realloc+0x134>
    328c:	b6 cf       	rjmp	.-148    	; 0x31fa <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    328e:	80 91 48 03 	lds	r24, 0x0348
    3292:	90 91 49 03 	lds	r25, 0x0349
    3296:	86 15       	cp	r24, r6
    3298:	97 05       	cpc	r25, r7
    329a:	e9 f4       	brne	.+58     	; 0x32d6 <realloc+0x17c>
    329c:	e6 17       	cp	r30, r22
    329e:	f7 07       	cpc	r31, r23
    32a0:	d0 f4       	brcc	.+52     	; 0x32d6 <realloc+0x17c>
		cp1 = __malloc_heap_end;
    32a2:	20 91 1b 03 	lds	r18, 0x031B
    32a6:	30 91 1c 03 	lds	r19, 0x031C
		cp = (char *)ptr + len;
		if (cp1 == 0)
    32aa:	21 15       	cp	r18, r1
    32ac:	31 05       	cpc	r19, r1
    32ae:	41 f4       	brne	.+16     	; 0x32c0 <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    32b0:	2d b7       	in	r18, 0x3d	; 61
    32b2:	3e b7       	in	r19, 0x3e	; 62
    32b4:	80 91 17 03 	lds	r24, 0x0317
    32b8:	90 91 18 03 	lds	r25, 0x0318
    32bc:	28 1b       	sub	r18, r24
    32be:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    32c0:	82 16       	cp	r8, r18
    32c2:	93 06       	cpc	r9, r19
    32c4:	c8 f4       	brcc	.+50     	; 0x32f8 <realloc+0x19e>
			__brkval = cp;
    32c6:	90 92 49 03 	sts	0x0349, r9
    32ca:	80 92 48 03 	sts	0x0348, r8
			fp1->sz = len;
    32ce:	f7 01       	movw	r30, r14
    32d0:	71 83       	std	Z+1, r23	; 0x01
    32d2:	60 83       	st	Z, r22
    32d4:	13 c0       	rjmp	.+38     	; 0x32fc <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    32d6:	cb 01       	movw	r24, r22
    32d8:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <malloc>
    32dc:	ec 01       	movw	r28, r24
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	59 f0       	breq	.+22     	; 0x32f8 <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    32e2:	d7 01       	movw	r26, r14
    32e4:	4d 91       	ld	r20, X+
    32e6:	5c 91       	ld	r21, X
    32e8:	b8 01       	movw	r22, r16
    32ea:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <memcpy>
	free(ptr);
    32ee:	c8 01       	movw	r24, r16
    32f0:	0e 94 15 18 	call	0x302a	; 0x302a <free>
    32f4:	8e 01       	movw	r16, r28
    32f6:	02 c0       	rjmp	.+4      	; 0x32fc <realloc+0x1a2>
	return memp;
    32f8:	00 e0       	ldi	r16, 0x00	; 0
    32fa:	10 e0       	ldi	r17, 0x00	; 0
}
    32fc:	c8 01       	movw	r24, r16
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	1f 91       	pop	r17
    3304:	0f 91       	pop	r16
    3306:	ff 90       	pop	r15
    3308:	ef 90       	pop	r14
    330a:	df 90       	pop	r13
    330c:	cf 90       	pop	r12
    330e:	bf 90       	pop	r11
    3310:	af 90       	pop	r10
    3312:	9f 90       	pop	r9
    3314:	8f 90       	pop	r8
    3316:	7f 90       	pop	r7
    3318:	6f 90       	pop	r6
    331a:	08 95       	ret

0000331c <__mulsi3>:
    331c:	62 9f       	mul	r22, r18
    331e:	d0 01       	movw	r26, r0
    3320:	73 9f       	mul	r23, r19
    3322:	f0 01       	movw	r30, r0
    3324:	82 9f       	mul	r24, r18
    3326:	e0 0d       	add	r30, r0
    3328:	f1 1d       	adc	r31, r1
    332a:	64 9f       	mul	r22, r20
    332c:	e0 0d       	add	r30, r0
    332e:	f1 1d       	adc	r31, r1
    3330:	92 9f       	mul	r25, r18
    3332:	f0 0d       	add	r31, r0
    3334:	83 9f       	mul	r24, r19
    3336:	f0 0d       	add	r31, r0
    3338:	74 9f       	mul	r23, r20
    333a:	f0 0d       	add	r31, r0
    333c:	65 9f       	mul	r22, r21
    333e:	f0 0d       	add	r31, r0
    3340:	99 27       	eor	r25, r25
    3342:	72 9f       	mul	r23, r18
    3344:	b0 0d       	add	r27, r0
    3346:	e1 1d       	adc	r30, r1
    3348:	f9 1f       	adc	r31, r25
    334a:	63 9f       	mul	r22, r19
    334c:	b0 0d       	add	r27, r0
    334e:	e1 1d       	adc	r30, r1
    3350:	f9 1f       	adc	r31, r25
    3352:	bd 01       	movw	r22, r26
    3354:	cf 01       	movw	r24, r30
    3356:	11 24       	eor	r1, r1
    3358:	08 95       	ret

0000335a <__udivmodsi4>:
    335a:	a1 e2       	ldi	r26, 0x21	; 33
    335c:	1a 2e       	mov	r1, r26
    335e:	aa 1b       	sub	r26, r26
    3360:	bb 1b       	sub	r27, r27
    3362:	fd 01       	movw	r30, r26
    3364:	0d c0       	rjmp	.+26     	; 0x3380 <__udivmodsi4_ep>

00003366 <__udivmodsi4_loop>:
    3366:	aa 1f       	adc	r26, r26
    3368:	bb 1f       	adc	r27, r27
    336a:	ee 1f       	adc	r30, r30
    336c:	ff 1f       	adc	r31, r31
    336e:	a2 17       	cp	r26, r18
    3370:	b3 07       	cpc	r27, r19
    3372:	e4 07       	cpc	r30, r20
    3374:	f5 07       	cpc	r31, r21
    3376:	20 f0       	brcs	.+8      	; 0x3380 <__udivmodsi4_ep>
    3378:	a2 1b       	sub	r26, r18
    337a:	b3 0b       	sbc	r27, r19
    337c:	e4 0b       	sbc	r30, r20
    337e:	f5 0b       	sbc	r31, r21

00003380 <__udivmodsi4_ep>:
    3380:	66 1f       	adc	r22, r22
    3382:	77 1f       	adc	r23, r23
    3384:	88 1f       	adc	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	1a 94       	dec	r1
    338a:	69 f7       	brne	.-38     	; 0x3366 <__udivmodsi4_loop>
    338c:	60 95       	com	r22
    338e:	70 95       	com	r23
    3390:	80 95       	com	r24
    3392:	90 95       	com	r25
    3394:	9b 01       	movw	r18, r22
    3396:	ac 01       	movw	r20, r24
    3398:	bd 01       	movw	r22, r26
    339a:	cf 01       	movw	r24, r30
    339c:	08 95       	ret

0000339e <__prologue_saves__>:
    339e:	2f 92       	push	r2
    33a0:	3f 92       	push	r3
    33a2:	4f 92       	push	r4
    33a4:	5f 92       	push	r5
    33a6:	6f 92       	push	r6
    33a8:	7f 92       	push	r7
    33aa:	8f 92       	push	r8
    33ac:	9f 92       	push	r9
    33ae:	af 92       	push	r10
    33b0:	bf 92       	push	r11
    33b2:	cf 92       	push	r12
    33b4:	df 92       	push	r13
    33b6:	ef 92       	push	r14
    33b8:	ff 92       	push	r15
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	cf 93       	push	r28
    33c0:	df 93       	push	r29
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	ca 1b       	sub	r28, r26
    33c8:	db 0b       	sbc	r29, r27
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	19 94       	eijmp

000033d6 <__epilogue_restores__>:
    33d6:	2a 88       	ldd	r2, Y+18	; 0x12
    33d8:	39 88       	ldd	r3, Y+17	; 0x11
    33da:	48 88       	ldd	r4, Y+16	; 0x10
    33dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    33de:	6e 84       	ldd	r6, Y+14	; 0x0e
    33e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    33e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    33e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    33e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    33e8:	b9 84       	ldd	r11, Y+9	; 0x09
    33ea:	c8 84       	ldd	r12, Y+8	; 0x08
    33ec:	df 80       	ldd	r13, Y+7	; 0x07
    33ee:	ee 80       	ldd	r14, Y+6	; 0x06
    33f0:	fd 80       	ldd	r15, Y+5	; 0x05
    33f2:	0c 81       	ldd	r16, Y+4	; 0x04
    33f4:	1b 81       	ldd	r17, Y+3	; 0x03
    33f6:	aa 81       	ldd	r26, Y+2	; 0x02
    33f8:	b9 81       	ldd	r27, Y+1	; 0x01
    33fa:	ce 0f       	add	r28, r30
    33fc:	d1 1d       	adc	r29, r1
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	f8 94       	cli
    3402:	de bf       	out	0x3e, r29	; 62
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	cd bf       	out	0x3d, r28	; 61
    3408:	ed 01       	movw	r28, r26
    340a:	08 95       	ret

0000340c <__tablejump2__>:
    340c:	ee 0f       	add	r30, r30
    340e:	ff 1f       	adc	r31, r31

00003410 <__tablejump__>:
    3410:	05 90       	lpm	r0, Z+
    3412:	f4 91       	lpm	r31, Z+
    3414:	e0 2d       	mov	r30, r0
    3416:	19 94       	eijmp

00003418 <atol>:
    3418:	1f 93       	push	r17
    341a:	fc 01       	movw	r30, r24
    341c:	99 27       	eor	r25, r25
    341e:	88 27       	eor	r24, r24
    3420:	bc 01       	movw	r22, r24
    3422:	e8 94       	clt
    3424:	11 91       	ld	r17, Z+
    3426:	10 32       	cpi	r17, 0x20	; 32
    3428:	e9 f3       	breq	.-6      	; 0x3424 <atol+0xc>
    342a:	19 30       	cpi	r17, 0x09	; 9
    342c:	10 f0       	brcs	.+4      	; 0x3432 <atol+0x1a>
    342e:	1e 30       	cpi	r17, 0x0E	; 14
    3430:	c8 f3       	brcs	.-14     	; 0x3424 <atol+0xc>
    3432:	1b 32       	cpi	r17, 0x2B	; 43
    3434:	51 f0       	breq	.+20     	; 0x344a <atol+0x32>
    3436:	1d 32       	cpi	r17, 0x2D	; 45
    3438:	49 f4       	brne	.+18     	; 0x344c <atol+0x34>
    343a:	68 94       	set
    343c:	06 c0       	rjmp	.+12     	; 0x344a <atol+0x32>
    343e:	0e 94 25 1b 	call	0x364a	; 0x364a <__mulsi_const_10>
    3442:	61 0f       	add	r22, r17
    3444:	71 1d       	adc	r23, r1
    3446:	81 1d       	adc	r24, r1
    3448:	91 1d       	adc	r25, r1
    344a:	11 91       	ld	r17, Z+
    344c:	10 53       	subi	r17, 0x30	; 48
    344e:	1a 30       	cpi	r17, 0x0A	; 10
    3450:	b0 f3       	brcs	.-20     	; 0x343e <atol+0x26>
    3452:	3e f4       	brtc	.+14     	; 0x3462 <atol+0x4a>
    3454:	90 95       	com	r25
    3456:	80 95       	com	r24
    3458:	70 95       	com	r23
    345a:	61 95       	neg	r22
    345c:	7f 4f       	sbci	r23, 0xFF	; 255
    345e:	8f 4f       	sbci	r24, 0xFF	; 255
    3460:	9f 4f       	sbci	r25, 0xFF	; 255
    3462:	1f 91       	pop	r17
    3464:	08 95       	ret

00003466 <isspace>:
    3466:	91 11       	cpse	r25, r1
    3468:	40 c1       	rjmp	.+640    	; 0x36ea <__ctype_isfalse>
    346a:	80 32       	cpi	r24, 0x20	; 32
    346c:	19 f0       	breq	.+6      	; 0x3474 <isspace+0xe>
    346e:	89 50       	subi	r24, 0x09	; 9
    3470:	85 50       	subi	r24, 0x05	; 5
    3472:	d0 f7       	brcc	.-12     	; 0x3468 <isspace+0x2>
    3474:	08 95       	ret

00003476 <tolower>:
    3476:	91 11       	cpse	r25, r1
    3478:	08 95       	ret
    347a:	81 54       	subi	r24, 0x41	; 65
    347c:	8a 51       	subi	r24, 0x1A	; 26
    347e:	08 f4       	brcc	.+2      	; 0x3482 <tolower+0xc>
    3480:	80 5e       	subi	r24, 0xE0	; 224
    3482:	85 5a       	subi	r24, 0xA5	; 165
    3484:	08 95       	ret

00003486 <toupper>:
    3486:	91 11       	cpse	r25, r1
    3488:	08 95       	ret
    348a:	81 56       	subi	r24, 0x61	; 97
    348c:	8a 51       	subi	r24, 0x1A	; 26
    348e:	08 f4       	brcc	.+2      	; 0x3492 <toupper+0xc>
    3490:	80 52       	subi	r24, 0x20	; 32
    3492:	85 58       	subi	r24, 0x85	; 133
    3494:	08 95       	ret

00003496 <memcmp>:
    3496:	fb 01       	movw	r30, r22
    3498:	dc 01       	movw	r26, r24
    349a:	04 c0       	rjmp	.+8      	; 0x34a4 <memcmp+0xe>
    349c:	8d 91       	ld	r24, X+
    349e:	01 90       	ld	r0, Z+
    34a0:	80 19       	sub	r24, r0
    34a2:	21 f4       	brne	.+8      	; 0x34ac <memcmp+0x16>
    34a4:	41 50       	subi	r20, 0x01	; 1
    34a6:	50 40       	sbci	r21, 0x00	; 0
    34a8:	c8 f7       	brcc	.-14     	; 0x349c <memcmp+0x6>
    34aa:	88 1b       	sub	r24, r24
    34ac:	99 0b       	sbc	r25, r25
    34ae:	08 95       	ret

000034b0 <memcpy>:
    34b0:	fb 01       	movw	r30, r22
    34b2:	dc 01       	movw	r26, r24
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <memcpy+0xa>
    34b6:	01 90       	ld	r0, Z+
    34b8:	0d 92       	st	X+, r0
    34ba:	41 50       	subi	r20, 0x01	; 1
    34bc:	50 40       	sbci	r21, 0x00	; 0
    34be:	d8 f7       	brcc	.-10     	; 0x34b6 <memcpy+0x6>
    34c0:	08 95       	ret

000034c2 <memmove>:
    34c2:	68 17       	cp	r22, r24
    34c4:	79 07       	cpc	r23, r25
    34c6:	68 f4       	brcc	.+26     	; 0x34e2 <memmove+0x20>
    34c8:	fb 01       	movw	r30, r22
    34ca:	dc 01       	movw	r26, r24
    34cc:	e4 0f       	add	r30, r20
    34ce:	f5 1f       	adc	r31, r21
    34d0:	a4 0f       	add	r26, r20
    34d2:	b5 1f       	adc	r27, r21
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <memmove+0x18>
    34d6:	02 90       	ld	r0, -Z
    34d8:	0e 92       	st	-X, r0
    34da:	41 50       	subi	r20, 0x01	; 1
    34dc:	50 40       	sbci	r21, 0x00	; 0
    34de:	d8 f7       	brcc	.-10     	; 0x34d6 <memmove+0x14>
    34e0:	08 95       	ret
    34e2:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <memcpy>

000034e6 <strchr>:
    34e6:	fc 01       	movw	r30, r24
    34e8:	81 91       	ld	r24, Z+
    34ea:	86 17       	cp	r24, r22
    34ec:	21 f0       	breq	.+8      	; 0x34f6 <strchr+0x10>
    34ee:	88 23       	and	r24, r24
    34f0:	d9 f7       	brne	.-10     	; 0x34e8 <strchr+0x2>
    34f2:	99 27       	eor	r25, r25
    34f4:	08 95       	ret
    34f6:	31 97       	sbiw	r30, 0x01	; 1
    34f8:	cf 01       	movw	r24, r30
    34fa:	08 95       	ret

000034fc <strcmp>:
    34fc:	fb 01       	movw	r30, r22
    34fe:	dc 01       	movw	r26, r24
    3500:	8d 91       	ld	r24, X+
    3502:	01 90       	ld	r0, Z+
    3504:	80 19       	sub	r24, r0
    3506:	01 10       	cpse	r0, r1
    3508:	d9 f3       	breq	.-10     	; 0x3500 <strcmp+0x4>
    350a:	99 0b       	sbc	r25, r25
    350c:	08 95       	ret

0000350e <strcpy>:
    350e:	fb 01       	movw	r30, r22
    3510:	dc 01       	movw	r26, r24
    3512:	01 90       	ld	r0, Z+
    3514:	0d 92       	st	X+, r0
    3516:	00 20       	and	r0, r0
    3518:	e1 f7       	brne	.-8      	; 0x3512 <strcpy+0x4>
    351a:	08 95       	ret

0000351c <strncmp>:
    351c:	fb 01       	movw	r30, r22
    351e:	dc 01       	movw	r26, r24
    3520:	41 50       	subi	r20, 0x01	; 1
    3522:	50 40       	sbci	r21, 0x00	; 0
    3524:	30 f0       	brcs	.+12     	; 0x3532 <strncmp+0x16>
    3526:	8d 91       	ld	r24, X+
    3528:	01 90       	ld	r0, Z+
    352a:	80 19       	sub	r24, r0
    352c:	19 f4       	brne	.+6      	; 0x3534 <strncmp+0x18>
    352e:	00 20       	and	r0, r0
    3530:	b9 f7       	brne	.-18     	; 0x3520 <strncmp+0x4>
    3532:	88 1b       	sub	r24, r24
    3534:	99 0b       	sbc	r25, r25
    3536:	08 95       	ret

00003538 <strncpy>:
    3538:	fb 01       	movw	r30, r22
    353a:	dc 01       	movw	r26, r24
    353c:	41 50       	subi	r20, 0x01	; 1
    353e:	50 40       	sbci	r21, 0x00	; 0
    3540:	48 f0       	brcs	.+18     	; 0x3554 <strncpy+0x1c>
    3542:	01 90       	ld	r0, Z+
    3544:	0d 92       	st	X+, r0
    3546:	00 20       	and	r0, r0
    3548:	c9 f7       	brne	.-14     	; 0x353c <strncpy+0x4>
    354a:	01 c0       	rjmp	.+2      	; 0x354e <strncpy+0x16>
    354c:	1d 92       	st	X+, r1
    354e:	41 50       	subi	r20, 0x01	; 1
    3550:	50 40       	sbci	r21, 0x00	; 0
    3552:	e0 f7       	brcc	.-8      	; 0x354c <strncpy+0x14>
    3554:	08 95       	ret

00003556 <strrchr>:
    3556:	fc 01       	movw	r30, r24
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	01 90       	ld	r0, Z+
    355e:	06 16       	cp	r0, r22
    3560:	09 f4       	brne	.+2      	; 0x3564 <strrchr+0xe>
    3562:	cf 01       	movw	r24, r30
    3564:	00 20       	and	r0, r0
    3566:	d1 f7       	brne	.-12     	; 0x355c <strrchr+0x6>
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	08 95       	ret

0000356c <strstr>:
    356c:	fb 01       	movw	r30, r22
    356e:	51 91       	ld	r21, Z+
    3570:	55 23       	and	r21, r21
    3572:	a9 f0       	breq	.+42     	; 0x359e <strstr+0x32>
    3574:	bf 01       	movw	r22, r30
    3576:	dc 01       	movw	r26, r24
    3578:	4d 91       	ld	r20, X+
    357a:	45 17       	cp	r20, r21
    357c:	41 11       	cpse	r20, r1
    357e:	e1 f7       	brne	.-8      	; 0x3578 <strstr+0xc>
    3580:	59 f4       	brne	.+22     	; 0x3598 <strstr+0x2c>
    3582:	cd 01       	movw	r24, r26
    3584:	01 90       	ld	r0, Z+
    3586:	00 20       	and	r0, r0
    3588:	49 f0       	breq	.+18     	; 0x359c <strstr+0x30>
    358a:	4d 91       	ld	r20, X+
    358c:	40 15       	cp	r20, r0
    358e:	41 11       	cpse	r20, r1
    3590:	c9 f3       	breq	.-14     	; 0x3584 <strstr+0x18>
    3592:	fb 01       	movw	r30, r22
    3594:	41 11       	cpse	r20, r1
    3596:	ef cf       	rjmp	.-34     	; 0x3576 <strstr+0xa>
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	08 95       	ret

000035a0 <itoa>:
    35a0:	fb 01       	movw	r30, r22
    35a2:	9f 01       	movw	r18, r30
    35a4:	e8 94       	clt
    35a6:	42 30       	cpi	r20, 0x02	; 2
    35a8:	c4 f0       	brlt	.+48     	; 0x35da <itoa+0x3a>
    35aa:	45 32       	cpi	r20, 0x25	; 37
    35ac:	b4 f4       	brge	.+44     	; 0x35da <itoa+0x3a>
    35ae:	4a 30       	cpi	r20, 0x0A	; 10
    35b0:	29 f4       	brne	.+10     	; 0x35bc <itoa+0x1c>
    35b2:	97 fb       	bst	r25, 7
    35b4:	1e f4       	brtc	.+6      	; 0x35bc <itoa+0x1c>
    35b6:	90 95       	com	r25
    35b8:	81 95       	neg	r24
    35ba:	9f 4f       	sbci	r25, 0xFF	; 255
    35bc:	64 2f       	mov	r22, r20
    35be:	77 27       	eor	r23, r23
    35c0:	0e 94 88 1b 	call	0x3710	; 0x3710 <__udivmodhi4>
    35c4:	80 5d       	subi	r24, 0xD0	; 208
    35c6:	8a 33       	cpi	r24, 0x3A	; 58
    35c8:	0c f0       	brlt	.+2      	; 0x35cc <itoa+0x2c>
    35ca:	89 5d       	subi	r24, 0xD9	; 217
    35cc:	81 93       	st	Z+, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	a1 f7       	brne	.-24     	; 0x35bc <itoa+0x1c>
    35d4:	16 f4       	brtc	.+4      	; 0x35da <itoa+0x3a>
    35d6:	5d e2       	ldi	r21, 0x2D	; 45
    35d8:	51 93       	st	Z+, r21
    35da:	10 82       	st	Z, r1
    35dc:	c9 01       	movw	r24, r18
    35de:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <strrev>

000035e2 <ltoa>:
    35e2:	fa 01       	movw	r30, r20
    35e4:	cf 93       	push	r28
    35e6:	ff 93       	push	r31
    35e8:	ef 93       	push	r30
    35ea:	22 30       	cpi	r18, 0x02	; 2
    35ec:	44 f1       	brlt	.+80     	; 0x363e <ltoa+0x5c>
    35ee:	25 32       	cpi	r18, 0x25	; 37
    35f0:	34 f5       	brge	.+76     	; 0x363e <ltoa+0x5c>
    35f2:	c2 2f       	mov	r28, r18
    35f4:	e8 94       	clt
    35f6:	ca 30       	cpi	r28, 0x0A	; 10
    35f8:	49 f4       	brne	.+18     	; 0x360c <ltoa+0x2a>
    35fa:	97 fb       	bst	r25, 7
    35fc:	3e f4       	brtc	.+14     	; 0x360c <ltoa+0x2a>
    35fe:	90 95       	com	r25
    3600:	80 95       	com	r24
    3602:	70 95       	com	r23
    3604:	61 95       	neg	r22
    3606:	7f 4f       	sbci	r23, 0xFF	; 255
    3608:	8f 4f       	sbci	r24, 0xFF	; 255
    360a:	9f 4f       	sbci	r25, 0xFF	; 255
    360c:	2c 2f       	mov	r18, r28
    360e:	33 27       	eor	r19, r19
    3610:	44 27       	eor	r20, r20
    3612:	55 27       	eor	r21, r21
    3614:	ff 93       	push	r31
    3616:	ef 93       	push	r30
    3618:	0e 94 ad 19 	call	0x335a	; 0x335a <__udivmodsi4>
    361c:	ef 91       	pop	r30
    361e:	ff 91       	pop	r31
    3620:	60 5d       	subi	r22, 0xD0	; 208
    3622:	6a 33       	cpi	r22, 0x3A	; 58
    3624:	0c f0       	brlt	.+2      	; 0x3628 <ltoa+0x46>
    3626:	69 5d       	subi	r22, 0xD9	; 217
    3628:	61 93       	st	Z+, r22
    362a:	b9 01       	movw	r22, r18
    362c:	ca 01       	movw	r24, r20
    362e:	60 50       	subi	r22, 0x00	; 0
    3630:	70 40       	sbci	r23, 0x00	; 0
    3632:	80 40       	sbci	r24, 0x00	; 0
    3634:	90 40       	sbci	r25, 0x00	; 0
    3636:	51 f7       	brne	.-44     	; 0x360c <ltoa+0x2a>
    3638:	16 f4       	brtc	.+4      	; 0x363e <ltoa+0x5c>
    363a:	cd e2       	ldi	r28, 0x2D	; 45
    363c:	c1 93       	st	Z+, r28
    363e:	10 82       	st	Z, r1
    3640:	8f 91       	pop	r24
    3642:	9f 91       	pop	r25
    3644:	cf 91       	pop	r28
    3646:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <strrev>

0000364a <__mulsi_const_10>:
    364a:	59 2f       	mov	r21, r25
    364c:	48 2f       	mov	r20, r24
    364e:	37 2f       	mov	r19, r23
    3650:	26 2f       	mov	r18, r22
    3652:	66 0f       	add	r22, r22
    3654:	77 1f       	adc	r23, r23
    3656:	88 1f       	adc	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	66 0f       	add	r22, r22
    365c:	77 1f       	adc	r23, r23
    365e:	88 1f       	adc	r24, r24
    3660:	99 1f       	adc	r25, r25
    3662:	62 0f       	add	r22, r18
    3664:	73 1f       	adc	r23, r19
    3666:	84 1f       	adc	r24, r20
    3668:	95 1f       	adc	r25, r21
    366a:	66 0f       	add	r22, r22
    366c:	77 1f       	adc	r23, r23
    366e:	88 1f       	adc	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	08 95       	ret

00003674 <ultoa>:
    3674:	fa 01       	movw	r30, r20
    3676:	cf 93       	push	r28
    3678:	ff 93       	push	r31
    367a:	ef 93       	push	r30
    367c:	22 30       	cpi	r18, 0x02	; 2
    367e:	cc f0       	brlt	.+50     	; 0x36b2 <ultoa+0x3e>
    3680:	25 32       	cpi	r18, 0x25	; 37
    3682:	bc f4       	brge	.+46     	; 0x36b2 <ultoa+0x3e>
    3684:	c2 2f       	mov	r28, r18
    3686:	2c 2f       	mov	r18, r28
    3688:	33 27       	eor	r19, r19
    368a:	44 27       	eor	r20, r20
    368c:	55 27       	eor	r21, r21
    368e:	ff 93       	push	r31
    3690:	ef 93       	push	r30
    3692:	0e 94 ad 19 	call	0x335a	; 0x335a <__udivmodsi4>
    3696:	ef 91       	pop	r30
    3698:	ff 91       	pop	r31
    369a:	60 5d       	subi	r22, 0xD0	; 208
    369c:	6a 33       	cpi	r22, 0x3A	; 58
    369e:	0c f0       	brlt	.+2      	; 0x36a2 <ultoa+0x2e>
    36a0:	69 5d       	subi	r22, 0xD9	; 217
    36a2:	61 93       	st	Z+, r22
    36a4:	b9 01       	movw	r22, r18
    36a6:	ca 01       	movw	r24, r20
    36a8:	60 50       	subi	r22, 0x00	; 0
    36aa:	70 40       	sbci	r23, 0x00	; 0
    36ac:	80 40       	sbci	r24, 0x00	; 0
    36ae:	90 40       	sbci	r25, 0x00	; 0
    36b0:	51 f7       	brne	.-44     	; 0x3686 <ultoa+0x12>
    36b2:	10 82       	st	Z, r1
    36b4:	8f 91       	pop	r24
    36b6:	9f 91       	pop	r25
    36b8:	cf 91       	pop	r28
    36ba:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <strrev>

000036be <utoa>:
    36be:	fb 01       	movw	r30, r22
    36c0:	9f 01       	movw	r18, r30
    36c2:	42 30       	cpi	r20, 0x02	; 2
    36c4:	74 f0       	brlt	.+28     	; 0x36e2 <utoa+0x24>
    36c6:	45 32       	cpi	r20, 0x25	; 37
    36c8:	64 f4       	brge	.+24     	; 0x36e2 <utoa+0x24>
    36ca:	64 2f       	mov	r22, r20
    36cc:	77 27       	eor	r23, r23
    36ce:	0e 94 88 1b 	call	0x3710	; 0x3710 <__udivmodhi4>
    36d2:	80 5d       	subi	r24, 0xD0	; 208
    36d4:	8a 33       	cpi	r24, 0x3A	; 58
    36d6:	0c f0       	brlt	.+2      	; 0x36da <utoa+0x1c>
    36d8:	89 5d       	subi	r24, 0xD9	; 217
    36da:	81 93       	st	Z+, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	a1 f7       	brne	.-24     	; 0x36ca <utoa+0xc>
    36e2:	10 82       	st	Z, r1
    36e4:	c9 01       	movw	r24, r18
    36e6:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <strrev>

000036ea <__ctype_isfalse>:
    36ea:	99 27       	eor	r25, r25
    36ec:	88 27       	eor	r24, r24

000036ee <__ctype_istrue>:
    36ee:	08 95       	ret

000036f0 <strrev>:
    36f0:	dc 01       	movw	r26, r24
    36f2:	fc 01       	movw	r30, r24
    36f4:	67 2f       	mov	r22, r23
    36f6:	71 91       	ld	r23, Z+
    36f8:	77 23       	and	r23, r23
    36fa:	e1 f7       	brne	.-8      	; 0x36f4 <strrev+0x4>
    36fc:	32 97       	sbiw	r30, 0x02	; 2
    36fe:	04 c0       	rjmp	.+8      	; 0x3708 <strrev+0x18>
    3700:	7c 91       	ld	r23, X
    3702:	6d 93       	st	X+, r22
    3704:	70 83       	st	Z, r23
    3706:	62 91       	ld	r22, -Z
    3708:	ae 17       	cp	r26, r30
    370a:	bf 07       	cpc	r27, r31
    370c:	c8 f3       	brcs	.-14     	; 0x3700 <strrev+0x10>
    370e:	08 95       	ret

00003710 <__udivmodhi4>:
    3710:	aa 1b       	sub	r26, r26
    3712:	bb 1b       	sub	r27, r27
    3714:	51 e1       	ldi	r21, 0x11	; 17
    3716:	07 c0       	rjmp	.+14     	; 0x3726 <__udivmodhi4_ep>

00003718 <__udivmodhi4_loop>:
    3718:	aa 1f       	adc	r26, r26
    371a:	bb 1f       	adc	r27, r27
    371c:	a6 17       	cp	r26, r22
    371e:	b7 07       	cpc	r27, r23
    3720:	10 f0       	brcs	.+4      	; 0x3726 <__udivmodhi4_ep>
    3722:	a6 1b       	sub	r26, r22
    3724:	b7 0b       	sbc	r27, r23

00003726 <__udivmodhi4_ep>:
    3726:	88 1f       	adc	r24, r24
    3728:	99 1f       	adc	r25, r25
    372a:	5a 95       	dec	r21
    372c:	a9 f7       	brne	.-22     	; 0x3718 <__udivmodhi4_loop>
    372e:	80 95       	com	r24
    3730:	90 95       	com	r25
    3732:	bc 01       	movw	r22, r24
    3734:	cd 01       	movw	r24, r26
    3736:	08 95       	ret

00003738 <_exit>:
    3738:	f8 94       	cli

0000373a <__stop_program>:
    373a:	ff cf       	rjmp	.-2      	; 0x373a <__stop_program>
